// Copyright 2015 Regional District of Fraser-Fort George
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#include "DataAdvice-pimpl.h"
#include "saveerror.h"
#include "stopparsing.h"
#include "preflight.h"
#include <fstream>

namespace dataadvice
{
  // Date utility
  QDate fromXmlDate(const ::xml_schema::date& date)
  {
      return QDate(date.year(), date.month(), date.day());
  }

  // DataAdviceImpl
  //

  void DataAdviceImpl::
  pre ()
  {
  }

  void DataAdviceImpl::
  RollYear (long long RollYear)
  {
      rollYear = RollYear;
  }

  void DataAdviceImpl::
  OwnershipYear (long long OwnershipYear)
  {
      ownershipYear = OwnershipYear;
  }

  void DataAdviceImpl::
  RunType (const QString& RunType)
  {
      runType = RunType;
      PreFlight::prepareDatabase(runType);
  }

  void DataAdviceImpl::
  StartDate (const ::xml_schema::date& StartDate)
  {
      startDate = fromXmlDate(StartDate);
  }

  void DataAdviceImpl::
  EndDate (const ::xml_schema::date& EndDate)
  {
      endDate = fromXmlDate(EndDate);
  }

//  void DataAdviceImpl::
//  AssessmentAreas (const std::vector<model::AssessmentArea*>& AssessmentAreas)
//  {
//      assessmentAreas = AssessmentAreas;
//  }
  void DataAdviceImpl::AssessmentAreas() {}

  void DataAdviceImpl::
  ReportSummary (std::unique_ptr<model::DeliverySummary> &ReportSummary)
  {
      reportSummary = std::move(ReportSummary);
  }

  void DataAdviceImpl::
  Version (const QString& Version)
  {
      version = Version;
  }

  void DataAdviceImpl::
  RequestID (const QString& RequestID)
  {
      requestID = RequestID;
  }

  void DataAdviceImpl::
  OrderID (const QString& OrderID)
  {
      orderID = OrderID;
  }

  void DataAdviceImpl::
  RunDate (const ::xml_schema::date& RunDate)
  {
      runDate = fromXmlDate(RunDate);
  }

  std::unique_ptr<model::DataAdvice> DataAdviceImpl::post_DataAdvice()
  {
    auto da = std::make_unique<model::DataAdvice>();
    da->setRollYear(rollYear);
    da->setOwnershipYear(ownershipYear);
    da->setRunType(runType);
    da->setRunDate(runDate);
    da->setEndDate(endDate);
    da->setStartdate(startDate);
    da->setReportSummary(std::move(this->reportSummary));
    da->setVersion(version);
    da->setRequestID(requestID);
    da->setOrderID(orderID);
    return da;
  }

  // VersionImpl
  //

  void VersionImpl::
  pre ()
  {
  }

  QString VersionImpl::
  post_Version ()
  {
    const ::std::string& v (post_string ());
    return QString::fromStdString(v);
  }

  // RunTypeImpl
  //

  void RunTypeImpl::
  pre ()
  {
  }

  QString RunTypeImpl::
  post_RunType ()
  {
    const ::std::string& v (post_string ());
    return QString::fromStdString(v);
  }

  // DeliverySummaryImpl
  //

  void DeliverySummaryImpl::
  pre ()
  {
  }

  void DeliverySummaryImpl::
  TotalFolioCount (long long TotalFolioCount)
  {
      totalFolioCount = TotalFolioCount;
  }

  void DeliverySummaryImpl::
  TaxableFolioCount (long long TaxableFolioCount)
  {
      taxableFolioCount = TaxableFolioCount;
  }

  void DeliverySummaryImpl::
  TaxExemptFolioCount (long long TaxExemptFolioCount)
  {
      taxExemptFolioCount = TaxExemptFolioCount;
  }

  void DeliverySummaryImpl::
  TotalGrossValues ()
  {
  }

  void DeliverySummaryImpl::
  TotalTaxExemptValues ()
  {
  }

  void DeliverySummaryImpl::
  TotalNetValues ()
  {
  }

  void DeliverySummaryImpl::
  GeneralValues (std::vector<std::unique_ptr<model::PropertyClassValue>>& GeneralValues)
  {
      generalValues = std::move(GeneralValues);
  }

  void DeliverySummaryImpl::
  BCTransitValues (std::vector<std::unique_ptr<model::PropertyClassValue> > &BCTransitValues)
  {
      bcTransitValues = std::move(BCTransitValues);
  }

  void DeliverySummaryImpl::
  SchoolValues (std::vector<std::unique_ptr<model::PropertyClassValue>>& SchoolValues)
  {
      schoolValues = std::move(SchoolValues);
  }

  void DeliverySummaryImpl::
  AmendmentReasonCounts ()
  {
  }

  void DeliverySummaryImpl::
  DeleteReasonCounts ()
  {
  }

  std::unique_ptr<model::DeliverySummary> DeliverySummaryImpl::post_DeliverySummary()
  {
      auto ds = std::make_unique<model::DeliverySummary>();
      ds->setTotalFolioCount(totalFolioCount);

      return ds;
  }

  // AmendmentReasonCountCollectionImpl
  //

  void AmendmentReasonCountCollectionImpl::
  pre ()
  {
  }

  void AmendmentReasonCountCollectionImpl::
  AmendmentReasonCount ()
  {
  }

  void AmendmentReasonCountCollectionImpl::
  post_AmendmentReasonCountCollection ()
  {
  }

  // AmendmentReasonCountImpl
  //

  void AmendmentReasonCountImpl::
  pre ()
  {
  }

#pragma warning(push)
#pragma warning(disable:4100)
  void AmendmentReasonCountImpl::
  AmendmentReasonCode (const QString& AmendmentReasonCode)
  {
    // TODO AmendmentReasonCount
    //
  }

  void AmendmentReasonCountImpl::
  AmendmentReasonDescription (const QString& AmendmentReasonDescription)
  {
    // TODO AmendmentReasonCount
    //
  }

  void AmendmentReasonCountImpl::
  FolioCount (long long FolioCount)
  {
    // TODO AmendmentReasonCount
    //
  }
#pragma warning(pop)

  void AmendmentReasonCountImpl::
  post_AmendmentReasonCount ()
  {
  }

  // DeleteReasonCountCollectionImpl
  //

  void DeleteReasonCountCollectionImpl::
  pre ()
  {
  }

  void DeleteReasonCountCollectionImpl::
  DeleteReasonCount ()
  {
  }

  void DeleteReasonCountCollectionImpl::
  post_DeleteReasonCountCollection ()
  {
  }

  // DeleteReasonCountImpl
  //

  void DeleteReasonCountImpl::
  pre ()
  {
  }

#pragma warning(push)
#pragma warning(disable:4100)
  void DeleteReasonCountImpl::
  DeleteReasonCode (const QString& DeleteReasonCode)
  {
    // TODO DeleteReasonCount
    //
  }

  void DeleteReasonCountImpl::
  DeleteReasonDescription (const QString& DeleteReasonDescription)
  {
    // TODO DeleteReasonCount
    //
  }

  void DeleteReasonCountImpl::
  FolioCount (long long FolioCount)
  {
    // TODO DeleteReasonCount
    //
  }
#pragma warning(pop)

  void DeleteReasonCountImpl::
  post_DeleteReasonCount ()
  {
  }

  // AssessmentAreaCollectionImpl
  //

  void AssessmentAreaCollectionImpl::pre()
  {}

  void AssessmentAreaCollectionImpl::AssessmentArea() {}

  void AssessmentAreaCollectionImpl::post_AssessmentAreaCollection() {}

  AssessmentAreaCollectionImpl::~AssessmentAreaCollectionImpl() {}

  // AssessmentAreaImpl
  //

  void AssessmentAreaImpl::
  pre ()
  {
      m_assessmentArea = std::make_shared<model::AssessmentArea>();
      auto collection_parser = dynamic_cast<JurisdictionCollectionImpl*>(Jurisdictions_parser_);
      if (collection_parser != nullptr)
      {
          auto jurisdiction_parser = dynamic_cast<JurisdictionImpl*>(collection_parser->Jurisdiction_parser());
          if (jurisdiction_parser != nullptr) {
              std::weak_ptr<model::AssessmentArea> area = m_assessmentArea;
              jurisdiction_parser->setAssessmentArea(area);
          }
      }
  }

  void AssessmentAreaImpl::
  AssessmentAreaCode (const QString &AssessmentAreaCode)
  {
      m_assessmentArea->setAssessmentAreaCode(AssessmentAreaCode);
  }

  void AssessmentAreaImpl::
  AssessmentAreaDescription (const QString& AssessmentAreaDescription)
  {
      m_assessmentArea->setAssessmentAreaDescription(AssessmentAreaDescription);
  }

  void AssessmentAreaImpl::Jurisdictions() {}

#pragma warning(push)
#pragma warning(disable:4100)
  void AssessmentAreaImpl::
  AreaSummary (std::unique_ptr<model::DeliverySummary> &AreaSummary)
  {
    // TODO AssessmentAreaImpl::AreaSummary
    //
  }
#pragma warning(pop)

  void AssessmentAreaImpl::post_AssessmentArea() {}

  AssessmentAreaImpl::~AssessmentAreaImpl() {}

  // AssessmentAreaCodeImpl
  //

  void AssessmentAreaCodeImpl::
  pre ()
  {
  }

  QString AssessmentAreaCodeImpl::post_AssessmentAreaCode()
  {
    const ::std::string& v (post_string ());
    return QString::fromStdString(v);
  }

  // JurisdictionCollectionImpl
  //

  void JurisdictionCollectionImpl::
  pre ()
  {
          jurisdictions = std::vector<std::unique_ptr<model::Jurisdiction>>();
  }

  void JurisdictionCollectionImpl::Jurisdiction() {}

  void JurisdictionCollectionImpl::post_JurisdictionCollection() {}

  JurisdictionCollectionImpl::~JurisdictionCollectionImpl() {}

  Jurisdiction_pskel *JurisdictionCollectionImpl::Jurisdiction_parser() const
  {
      return Jurisdiction_parser_;
  }

  // JurisdictionImpl
  //

  void JurisdictionImpl::
  pre ()
  {
      jurisdiction = std::make_shared<model::Jurisdiction>();
      auto folioCollection_parser = dynamic_cast<FolioRecordCollectionImpl*>(FolioRecords_parser_);
      if (folioCollection_parser != nullptr)
      {
          auto folio_parser = dynamic_cast<FolioRecordImpl*>(folioCollection_parser->folioRecord_parser());
          if (folio_parser != nullptr)
              folio_parser->setJurisdiction(jurisdiction);
      }
  }

  void JurisdictionImpl::
  JurisdictionCode (const QString& JurisdictionCode)
  {
      jurisdiction->setCode(JurisdictionCode);
  }

  void JurisdictionImpl::
  JurisdictionDescription (const QString& JurisdictionDescription)
  {
      jurisdiction->setDescription(JurisdictionDescription);
      if (auto area = m_area.lock()) {
          if (!area->save())
              throw SaveError(area->lastError().text());
          jurisdiction->setAssessmentArea(area.get());
          if (!jurisdiction->save())
              throw SaveError(jurisdiction->lastError().text());
      }
  }

  void JurisdictionImpl::
  FolioRecords (std::vector<std::unique_ptr<model::Folio> > &FolioRecords)
  {
    folios = std::move(FolioRecords);
  }

#pragma warning(push)
#pragma warning(disable:4100)
  void JurisdictionImpl::
  JurisdictionSummary (std::unique_ptr<model::DeliverySummary> &JurisdictionSummary)
  {
    // TODO JurisdictionSummary
    //
  }
#pragma warning(pop)

  void JurisdictionImpl::post_Jurisdiction() {}

  void JurisdictionImpl::setAssessmentArea(std::weak_ptr<model::AssessmentArea> &area)
  {
      m_area = area;
  }

  JurisdictionImpl::~JurisdictionImpl() {}

  // JurisdictionCodeImpl
  //

  void JurisdictionCodeImpl::
  pre ()
  {
  }

  QString JurisdictionCodeImpl::
  post_JurisdictionCode ()
  {
    const ::std::string& v (post_string ());
    return QString::fromStdString(v);
  }

  // FolioGroupValuesImpl
  // Only used for DeliverySummary
  //

  void FolioGroupValuesImpl::
  pre ()
  {
  }

#pragma warning(push)
#pragma warning(disable:4100)
  void FolioGroupValuesImpl::
  LandValue (double LandValue)
  {
    // TODO FolioGroupValues
    //
  }

  void FolioGroupValuesImpl::
  ImprovementValue (double ImprovementValue)
  {
    // TODO FolioGroupValues
    //
  }
#pragma warning(pop)

  void FolioGroupValuesImpl::
  post_FolioGroupValues ()
  {
  }

  // FolioRecordCollectionImpl
  //

  void FolioRecordCollectionImpl::
  pre ()
  {
      folios = std::vector<std::unique_ptr<model::Folio>>();
  }

  void FolioRecordCollectionImpl::
  FolioRecord (std::unique_ptr<model::Folio> &FolioRecord)
  {
      folios.push_back(std::move(FolioRecord));
  }

  std::vector<std::unique_ptr<model::Folio> >
  FolioRecordCollectionImpl::post_FolioRecordCollection()
  {
      return std::move(folios);
  }

  FolioRecord_pskel* FolioRecordCollectionImpl::folioRecord_parser() const
  {
      return FolioRecord_parser_;
  }

  FolioRecordCollectionImpl::~FolioRecordCollectionImpl()
  {
  }

  // FolioRecordImpl
  //

  FolioRecordImpl::FolioRecordImpl(std::ifstream &is, size_t size) :
      FolioRecord_pskel()
    , QObject(0)
    , m_inputStream(is)
    , m_inputSize(size)
  {
  }

  void FolioRecordImpl::setCancelFlag(bool& shouldCancel)
  {
      m_shouldCancel = &shouldCancel;
  }

  void FolioRecordImpl::
  pre ()
  {
      m_folio = std::make_unique<model::Folio>();
      m_folioAddresses = std::vector<std::unique_ptr<model::FolioAddress>>();
      m_ownershipGroups = std::vector<std::unique_ptr<model::OwnershipGroup>>();
      m_legalDescriptions = std::vector<std::unique_ptr<model::LegalDescription>>();
      m_folioDescription = std::make_unique<model::FolioDescription>();
      m_sales = std::vector<std::unique_ptr<model::Sale>>();
      m_minorTaxingJurisdictions = std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>();
      m_farms = std::vector<std::unique_ptr<model::Farm>>();
      m_manufacturedHomes = std::vector<std::unique_ptr<model::ManufacturedHome>>();
      m_oilAndGas = std::vector<std::unique_ptr<model::OilAndGas>>();
      m_landCharacteristics = std::vector<std::unique_ptr<model::LandCharacteristic>>();
      m_propertyValues = std::make_unique<model::PropertyValues>();
      m_action = NULL;
  }

  void FolioRecordImpl::
  RollNumber (const model::StringItem &item)
  {
      m_folio->setRollNumber(item.value());
  }

  void FolioRecordImpl::
  FolioStatus (const model::StringItem &item)
  {
      m_folio->setStatus(item.value());
  }

  void FolioRecordImpl::
  FolioStatusDescription (const model::StringItem &item)
  {
      m_folio->setStatusDescription(item.value());
  }

  void FolioRecordImpl::
  FolioAction (std::unique_ptr<model::FolioAction> &action)
  {
      m_action = std::move(action);
  }

  void FolioRecordImpl::
  FolioAddresses (std::vector<std::unique_ptr<model::FolioAddress> > &FolioAddresses)
  {
      m_folioAddresses = std::move(FolioAddresses);
  }

  void FolioRecordImpl::
  OwnershipGroups (std::vector<std::unique_ptr<model::OwnershipGroup> > &OwnershipGroups)
  {
      m_ownershipGroups = std::move(OwnershipGroups);
  }

  void FolioRecordImpl::
  LegalDescriptions (std::vector<std::unique_ptr<model::LegalDescription> > &LegalDescriptions)
  {
      m_legalDescriptions = std::move(LegalDescriptions);
  }

  void FolioRecordImpl::
  FolioDescription (std::unique_ptr<model::FolioDescription> &FolioDescription)
  {
      m_folioDescription = std::move(FolioDescription);
  }

  void FolioRecordImpl::
  Sales (std::vector<std::unique_ptr<model::Sale> > &Sales)
  {
      m_sales = std::move(Sales);
  }

  void FolioRecordImpl::
  Values (std::unique_ptr<model::PropertyValues> &values)
  {
      m_propertyValues = std::move(values);
  }

  void FolioRecordImpl::
  Amendments ()
  {
  }

  void FolioRecordImpl::
  MinorTaxing (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction> > &MinorTaxing)
  {
      m_minorTaxingJurisdictions = std::move(MinorTaxing);
  }

  void FolioRecordImpl::
  Farms (std::vector<std::unique_ptr<model::Farm> > &Farms)
  {
      m_farms = std::move(Farms);
  }

  void FolioRecordImpl::
  ManufacturedHomes (std::vector<std::unique_ptr<model::ManufacturedHome>>& ManufacturedHomes)
  {
      m_manufacturedHomes = std::move(ManufacturedHomes);
  }

  void FolioRecordImpl::
  ManagedForests (std::vector<std::unique_ptr<model::ManagedForest>>& ManagedForests)
  {
      m_managedForests = std::move(ManagedForests);
  }

  void FolioRecordImpl::
  OilAndGas (std::vector<std::unique_ptr<model::OilAndGas>>& OilAndGas)
  {
      m_oilAndGas = std::move(OilAndGas);
  }

  void FolioRecordImpl::
  LandCharacteristics (std::vector<std::unique_ptr<model::LandCharacteristic> > &LandCharacteristics)
  {
      m_landCharacteristics = std::move(LandCharacteristics);
  }

  void FolioRecordImpl::
  ID (const QString& ID)
  {
      m_folio->setId(ID);
  }

  void FolioRecordImpl::setJurisdiction(std::weak_ptr<model::Jurisdiction> jurisdiction)
  {
      m_jurisdiction = jurisdiction;
  }

  std::unique_ptr<model::Folio> FolioRecordImpl::post_FolioRecord()
  {
    if (*m_shouldCancel)
    {
        emit message(QString("import cancelled."));
        throw StopParsing();
    }
    if (auto jurisdiction = m_jurisdiction.lock())
    {
        if (!m_action || m_action->actionType() == model::FolioAction::ADD) // folio action is null or Add
        {
            if (m_action && m_action->renumber())
            {
                emit message(QString("Found a folio renumber section in folio ID ") + m_folio->id() + QString(". This was not handled!"));
            }
            m_folio->setJurisdiction(jurisdiction.get());
            if (!m_folio->save())
                throw SaveError(m_folio->lastError().text());
            // save child objects... add error handling...
            for (auto &&addr: m_folioAddresses)
            {
                addr->setFolio(m_folio.get());
                if(!addr->save())
                    throw SaveError(addr->lastError().text());
            }
            for (auto &&ownGroup: m_ownershipGroups)
            {
                ownGroup->setFolio(m_folio.get());
                if(!ownGroup->save())
                    throw SaveError(ownGroup->lastError().text());
                for (auto &&owner: ownGroup->owners())
                {
                    owner->setOwnershipGroup(ownGroup.get());
                    if (!owner->save())
                        throw SaveError(QString("Owner: ") + owner->lastError().text());
                }
                if (ownGroup->mailingAddress())
                {
                    ownGroup->mailingAddress()->setOwnershipGroup(ownGroup.get());
                    if (!ownGroup->mailingAddress()->save())
                    throw SaveError(QString("Mailing Address: ")
                                    + ownGroup->mailingAddress()->lastError().text());
                }
                if (ownGroup->formattedMailingAddress())
                {
                    ownGroup->formattedMailingAddress()->setOwnershipGroup(ownGroup.get());
                    if (!ownGroup->formattedMailingAddress()->save())
                        throw SaveError(QString("Formatted Mailing Address: ")
                                        + ownGroup->formattedMailingAddress()->lastError().text());
                }
            }
            for (auto &&legal: m_legalDescriptions)
            {
                legal->setFolio(m_folio.get());
                if (!legal->save())
                    throw SaveError(legal->lastError().text());
            }
            // folio description
            m_folioDescription->setFolio(m_folio.get());
            if (!m_folioDescription->save())
                throw SaveError(QString("Folio Description: ")+ m_folioDescription->lastError().text());
            if (m_folioDescription->landMeasurement())
            {
                m_folioDescription->landMeasurement()->setFolioDescription(m_folioDescription.get());
                if (!m_folioDescription->landMeasurement()->save())
                    throw SaveError(QString("Land Measurement: ")
                                        + m_folioDescription->landMeasurement()->lastError().text());
                m_folioDescription->neighbourhood()->setFolioDescription(m_folioDescription.get());
            }
            if (m_folioDescription->neighbourhood())
            {
                m_folioDescription->neighbourhood()->setFolioDescription(m_folioDescription.get());
                if (!m_folioDescription->neighbourhood()->save())
                    throw SaveError(QString("Neighbourhood: ")
                                        + m_folioDescription->neighbourhood()->lastError().text());
            }
            // property values
            for (auto &&value: m_propertyValues->first)
            {
                value->setFolio(m_folio.get());
                if (!value->save())
                    throw SaveError(QString("Values By ETC: ")
                                        + value->lastError().text());
            }

            for (auto &&value: m_propertyValues->second)
            {
                value->setFolio(m_folio.get());
                if (!value->save())
                    throw SaveError(QString("Property Values: ")
                                        + value->lastError().text());
            }

            // sales
            for (auto &&sale: m_sales)
            {
                sale->setFolio(m_folio.get());
                if (!sale->save())
                    throw SaveError(sale->lastError().text());
            }
            for (auto &&minorTax: m_minorTaxingJurisdictions)
            {
                // minor tax jurisdictions
                model::minortaxing::MinorTaxing taxing;
                taxing.setFolio(m_folio.get());
                if (!minorTax->save())
                    throw SaveError(minorTax->lastError().text());
                taxing.setMinorTaxingJurisdiction(minorTax.get());
                if (!taxing.save())
                    throw SaveError(taxing.lastError().text());
            }
            for (auto &&oAndG: m_oilAndGas)
            {
                oAndG->setFolio(m_folio.get());
                if (!oAndG->save())
                    throw SaveError(oAndG->lastError().text());
            }
            for (auto &&land : m_landCharacteristics)
            {
                land->setFolio(m_folio.get());
                if (!land->save())
                    throw SaveError(land->lastError().text());
            }
            // property values
            for (auto &&vByETC: m_propertyValues->first)
            {
                vByETC->setFolio(m_folio.get());
                if (!vByETC->save())
                    throw SaveError(vByETC->lastError().text());
            }
            for (auto &&valuation: m_propertyValues->second)
            {
                auto val = valuation->grossValues();
                if (valuation->grossValues() != NULL)
                    if (!valuation->grossValues()->save()) throw SaveError(valuation->grossValues()->lastError().text());
                if (valuation->netValues() != NULL)
                    if (!valuation->netValues()->save()) throw SaveError(valuation->netValues()->lastError().text());
                if (valuation->taxExemptValues() != NULL)
                    if (!valuation->taxExemptValues()->save()) throw SaveError(valuation->taxExemptValues()->lastError().text());
                valuation->setFolio(m_folio.get());
                if (!valuation->save())
                    throw SaveError(valuation->lastError().text());
            }
        }
        else if (m_action->actionType() == model::FolioAction::DELETE)
        {
            if (m_action->renumber() != NULL) {
                emit message(QString("Found a folio renumber section in folio ID ") + m_folio->id() + QString(". This was not handled!"));
            }
            if (!m_folio->remove())
                throw SaveError(m_folio->lastError().text());
        }
    }
    else
    {
        throw SaveError("failed to get lock (this should never happen)");
    }

    // calculate progress
    auto prog = m_inputStream.tellg();
    float pct = static_cast<float>(prog) / static_cast<float>(m_inputSize);
    emit folioSaved(pct);

    return std::move(m_folio);

  }

  FolioRecordImpl::~FolioRecordImpl() {}

  // String32Impl
  //

  void String32Impl::
  pre ()
  {
  }

  QString String32Impl::
  post_String32 ()
  {
    const ::std::string& v (post_string ());
    return QString::fromStdString(v);
  }

  // FolioRollNumberImpl
  //

  void FolioRollNumberImpl::
  pre ()
  {
  }

  void FolioRollNumberImpl::
  Action (const model::ActionCode::Code &action)
  {
      m_action = action;
  }

  void FolioRollNumberImpl::
  OldValue (const QString& OldValue)
  {
      m_oldValue = OldValue;
  }

  model::StringItem FolioRollNumberImpl::post_FolioRollNumber()
  {
    const QString& v (post_String32 ());
    return model::StringItem(v, m_oldValue, m_action);
  }

  // FolioActionImpl
  //

  void FolioActionImpl::
  pre ()
  {
      m_action = std::make_unique<model::FolioAction>();
  }

  void FolioActionImpl::
  FolioAdd (const model::FolioAction &add)
  {
      *m_action = add;
  }

  void FolioActionImpl::
  FolioDelete (const model::FolioAction &del)
  {
      *m_action = del;
  }

  std::unique_ptr<model::FolioAction> FolioActionImpl::post_FolioAction()
  {
      return std::move(m_action);
  }

  // FolioAddImpl
  //

  void FolioAddImpl::
  pre ()
  {
      m_renumber = NULL;
  }

  void FolioAddImpl::
  FolioRenumber (const model::FolioRenumber& add)
  {
      *m_renumber = add;
  }

  model::FolioAction FolioAddImpl::post_FolioAdd()
  {
      if (m_renumber)
          return model::FolioAction(model::FolioAction::ADD, *m_renumber);
      else
          return model::FolioAction(model::FolioAction::ADD);
  }

  // FolioDeleteImpl
  //

  void FolioDeleteImpl::
  pre ()
  {
      m_renumber = NULL;
  }

  void FolioDeleteImpl::
  FolioRenumber (const model::FolioRenumber &renumber)
  {
      *m_renumber = renumber;
  }

  void FolioDeleteImpl::
  DeleteReasonCode (const QString& DeleteReasonCode)
  {
      m_deleteReason = DeleteReasonCode;
  }

  void FolioDeleteImpl::
  DeleteReasonDescription (const QString& DeleteReasonDescription)
  {
      m_reasonDescr = DeleteReasonDescription;
  }

  model::FolioAction FolioDeleteImpl::
  post_FolioDelete ()
  {
      if (m_renumber)
      {
        return model::FolioAction(model::FolioAction::DELETE, *m_renumber, m_deleteReason, m_reasonDescr);
      }
      else
      {
        return model::FolioAction(model::FolioAction::ActionType::DELETE, m_deleteReason, m_reasonDescr);
      }
  }

  // FolioRenumberImpl
  //

  void FolioRenumberImpl::
  pre ()
  {
      m_renumber = model::FolioRenumber();
  }

  void FolioRenumberImpl::
  AssessmentAreaCode (const QString &code)
  {
      m_renumber.setAssessmentAreaCode(code);
  }

  void FolioRenumberImpl::
  AssessmentAreaDescription (const QString& AssessmentAreaDescription)
  {
      m_renumber.setAssessmentAreaDescription(AssessmentAreaDescription);
  }

  void FolioRenumberImpl::
  JurisdictionCode (const QString& JurisdictionCode)
  {
      m_renumber.setJurisdictionCode(JurisdictionCode);
  }

  void FolioRenumberImpl::
  JurisdictionDescription (const QString& JurisdictionDescription)
  {
      m_renumber.setJurisdictionDescription(JurisdictionDescription);
  }

  void FolioRenumberImpl::
  RollNumber (const QString& RollNumber)
  {
      m_renumber.setRollNumber(RollNumber);
  }

  model::FolioRenumber FolioRenumberImpl::
  post_FolioRenumber ()
  {
      return m_renumber;
  }

  // FolioItemGroupImpl
  //

  void FolioItemGroupImpl::
  pre ()
  {
      action = model::ActionCode::Add;
  }

  void FolioItemGroupImpl::
  Action (const model::ActionCode::Code &Action)
  {
      action = Action;
  }

  // don't call post_FolioItemGroup twice (as the second
  // will be defaulted to Add)
  model::ActionCode::Code FolioItemGroupImpl::
  post_FolioItemGroup ()
  {
      auto last_action = action;
      action = model::ActionCode::Add;
      return last_action;
  }

  // FolioAddressCollectionImpl
  //

  void FolioAddressCollectionImpl::
  pre ()
  {
      addresses = std::vector<std::unique_ptr<model::FolioAddress>>();
//      addresses = std::vector<std::unique_ptr<model::FolioAddress> >();
  }

  void FolioAddressCollectionImpl::
  FolioAddress (std::unique_ptr<model::FolioAddress> &FolioAddress)
  {
      if (FolioAddress)
          addresses.push_back(std::move(FolioAddress));
  }

  std::vector<std::unique_ptr<model::FolioAddress> > FolioAddressCollectionImpl::post_FolioAddressCollection()
  {
    if ( post_FolioItemGroup () == model::ActionCode::Delete)
    {
        for (auto &&obj: addresses)
        {
            obj->remove();
        }
        addresses.clear();
    }
    return std::move(addresses);
  }

  // FolioAddressImpl
  //

  void FolioAddressImpl::
  pre ()
  {
      m_address = std::make_unique<model::FolioAddress>();
  }

  void FolioAddressImpl::
  PrimaryFlag (const model::BooleanItem &item)
  {
      m_address->setPrimaryFlag(item.value());
  }

  void FolioAddressImpl::
  UnitNumber (const model::StringItem &item)
  {
      m_address->setUnitNumber(item.value());
  }

  void FolioAddressImpl::
  StreetNumber (const model::StringItem &item)
  {
      m_address->setStreetNumber(item.value());
  }

  void FolioAddressImpl::
  StreetDirectionPrefix (const model::StringItem &item)
  {
      m_address->setStreetDirectionPrefix(item.value());
  }

  void FolioAddressImpl::
  StreetName (const model::StringItem &item)
  {
      m_address->setStreetName(item.value());
  }

  void FolioAddressImpl::
  StreetType (const model::StringItem &item)
  {
      m_address->setStreetType(item.value());
  }

  void FolioAddressImpl::
  StreetDirectionSuffix (const model::StringItem &item)
  {
      m_address->setStreetDirectionSuffix(item.value());
  }

  void FolioAddressImpl::
  City (const model::StringItem &item)
  {
      m_address->setCity(item.value());
  }

  void FolioAddressImpl::
  ProvinceState (const model::StringItem &item)
  {
      m_address->setProvinceState(item.value());
  }

  void FolioAddressImpl::
  PostalZip (const model::StringItem &item)
  {
      m_address->setPostalCode(item.value());
  }

  void FolioAddressImpl::
  MapReferenceNumber (const model::StringItem &item)
  {
      m_address->setMapReferenceNumber(item.value());
  }

  void FolioAddressImpl::
  ID (const QString& ID)
  {
      m_address->setId(ID);
  }

  std::unique_ptr<model::FolioAddress> FolioAddressImpl::post_FolioAddress()
  {
    model::ActionCode::Code action = post_FolioItemGroup (); // TODO: use the action for something
    if (action == model::ActionCode::Delete)
    {
        m_address->remove();
    }
    auto ret = std::move(m_address);
    m_address.reset();
    return ret;
  }

  // OwnershipGroupCollectionImpl
  //

  void OwnershipGroupCollectionImpl::
  pre ()
  {
      m_owners.clear();
  }

  void OwnershipGroupCollectionImpl::
  OwnershipGroup (std::unique_ptr<model::OwnershipGroup> &OwnershipGroup)
  {
      if (OwnershipGroup)
          m_owners.push_back(std::move(OwnershipGroup));
  }

  std::vector<std::unique_ptr<model::OwnershipGroup> > OwnershipGroupCollectionImpl::post_OwnershipGroupCollection()
  {
    auto action = post_FolioItemGroup ();
    if (action == model::ActionCode::Delete)
    {
        for (auto &&owner: m_owners)
        {
            owner->remove();
        }
        m_owners.clear();
    }
    return std::move(m_owners);
  }

  // OwnershipGroupImpl
  //

  void OwnershipGroupImpl::
  pre ()
  {
      m_owners = std::make_unique<model::OwnershipGroup>();
  }

  void OwnershipGroupImpl::
  OwnershipGroupID (const model::StringItem &)
  {
  }

  void OwnershipGroupImpl::
  AssessmentNoticeReturned (const model::BooleanItem& item)
  {
      m_owners->setAssessmentNoticeReturned(item.value());
  }

  void OwnershipGroupImpl::
  AssessmentNoticeSuppressed (const model::BooleanItem &item)
  {
      m_owners->setAssessmentNoticeSuppressed(item.value());
  }

  void OwnershipGroupImpl::
  ChangeType (const model::StringItem &item)
  {
      m_owners->setChangeType(item.value());
  }

  void OwnershipGroupImpl::
  ChangeTypeDescription (const model::StringItem &item)
  {
      m_owners->setChangeTypeDescription(item.value());
  }

  void OwnershipGroupImpl::
  ChangeDate (const model::DateItem& date)
  {
      m_owners->setChangeDate(date.value());
  }

  void OwnershipGroupImpl::
  ChangeSource (const model::StringItem &item)
  {
      m_owners->setChangeSource(item.value());
  }

  void OwnershipGroupImpl::
  ChangeSourceDescription (const model::StringItem &item)
  {
      m_owners->setChangeSourceDescription(item.value());
  }

  void OwnershipGroupImpl::
  Owners (std::vector<std::unique_ptr<model::Owner>>& Owners)
  {
      m_owners->setOwners(std::move(Owners));
  }

  void OwnershipGroupImpl::
  FormattedMailingAddress (std::unique_ptr<model::FormattedMailingAddress> &FormattedMailingAddress)
  {
    m_owners->setFormattedMailingAddress(std::move(FormattedMailingAddress));
  }

  void OwnershipGroupImpl::
  MailingAddress (std::unique_ptr<model::MailingAddress> &MailingAddress)
  {
      m_owners->setMailingAddress(std::move(MailingAddress));
  }

  std::unique_ptr<model::OwnershipGroup> OwnershipGroupImpl::post_OwnershipGroup()
  {
    auto action = post_FolioItemGroup ();
    if (action == model::ActionCode::Delete)
    {
        m_owners->remove();
        m_owners.release();
    }
    return std::move(m_owners);
  }

  // OwnerCollectionImpl
  //

  void OwnerCollectionImpl::
  pre ()
  {
      m_owners.clear();
  }

  void OwnerCollectionImpl::
  Owner (std::unique_ptr<model::Owner> &Owner)
  {
      if (Owner)
          m_owners.push_back(std::move(Owner));
  }

  std::vector<std::unique_ptr<model::Owner> > OwnerCollectionImpl::post_OwnerCollection()
  {
    auto action = post_FolioItemGroup ();
    if (action == model::ActionCode::Delete)
    {
        for (auto &&owner: m_owners)
        {
            owner->remove();
        }
        m_owners.clear();
    }
    return std::move(m_owners);
  }

  // OwnerImpl
  //

  void OwnerImpl::
  pre ()
  {
      m_owner = std::make_unique<model::Owner>();
  }

  void OwnerImpl::
  FirstName (const model::StringItem &item)
  {
      m_owner->setFirstname(item.value());
  }

  void OwnerImpl::
  MiddleName (const model::StringItem &item)
  {
      m_owner->setMiddleName(item.value());
  }

  void OwnerImpl::
  MiddleInitial (const model::StringItem &item)
  {
      m_owner->setMiddleInitial(item.value());
  }

  void OwnerImpl::
  CompanyOrLastName (const model::StringItem &item)
  {
      m_owner->setCompanyOrLastName(item.value());
  }

  void OwnerImpl::
  OwnerSequenceID (const model::StringItem &item)
  {
      m_owner->setOwnerSequenceID(item.value());
  }

  void OwnerImpl::
  EquityType (const model::StringItem &item)
  {
      m_owner->setEquityType(item.value());
  }

  void OwnerImpl::
  EquityTypeDescription (const model::StringItem &item)
  {
      m_owner->setEquityTypeDescription(item.value());
  }

  void OwnerImpl::
  ID (const QString& ID)
  {
      m_owner->setId(ID);
  }

  std::unique_ptr<model::Owner> OwnerImpl::post_Owner()
  {
    auto action = post_FolioItemGroup ();
    if (action == model::ActionCode::Delete)
    {
        m_owner->remove();
        m_owner.release();
    }
    return std::move(m_owner);
  }

  // MailingAddressImpl
  //

  void MailingAddressImpl::
  pre ()
  {
      m_addr = std::make_unique<model::MailingAddress>();
  }

  void MailingAddressImpl::
  Attention (const model::StringItem &item)
  {
      m_addr->setAttention(item.value());
  }

  void MailingAddressImpl::
  CareOf (const model::StringItem &item)
  {
      m_addr->setCareOf(item.value());
  }

  void MailingAddressImpl::
  Floor (const model::StringItem &item)
  {
      m_addr->setFloor(item.value());
  }

  void MailingAddressImpl::
  UnitNumber (const model::StringItem &item)
  {
      m_addr->setUnitNumber(item.value());
  }

  void MailingAddressImpl::
  StreetDirectionPrefix (const model::StringItem &item)
  {
      m_addr->setStreetDirectionPrefix(item.value());
  }

  void MailingAddressImpl::
  StreetNumber (const model::StringItem &item)
  {
      m_addr->setStreetNumber(item.value());
  }

  void MailingAddressImpl::
  StreetName (const model::StringItem &item)
  {
      m_addr->setStreetName(item.value());
  }

  void MailingAddressImpl::
  StreetType (const model::StringItem &item)
  {
      m_addr->setStreetType(item.value());
  }

  void MailingAddressImpl::
  StreetDirectionSuffix (const model::StringItem &item)
  {
      m_addr->setStreetDirectionSuffix(item.value());
  }

  void MailingAddressImpl::
  City (const model::StringItem &item)
  {
      m_addr->setCity(item.value());
  }

  void MailingAddressImpl::
  ProvinceState (const model::StringItem &item)
  {
      m_addr->setProvinceState(item.value());
  }

  void MailingAddressImpl::
  Country (const model::StringItem &item)
  {
      m_addr->setCountry(item.value());
  }

  void MailingAddressImpl::
  PostalZip (const model::StringItem &item)
  {
      m_addr->setPostalZip(item.value());
  }

  void MailingAddressImpl::
  FreeformAddress (const model::StringItem &item)
  {
      m_addr->setFreeFormAddress(item.value());
  }

  void MailingAddressImpl::
  Compartment (const model::StringItem &item)
  {
      m_addr->setCompartment(item.value());
  }

  void MailingAddressImpl::
  DeliveryInstallationType (const model::StringItem &item)
  {
      m_addr->setDeliveryInstallationType(item.value());
  }

  void MailingAddressImpl::
  DeliveryInstallationTypeValue (const model::StringItem &item)
  {
      m_addr->setDeliveryInstallationType(item.value());
  }

  void MailingAddressImpl::
  ModeOfDelivery (const model::StringItem &item)
  {
      m_addr->setModeOfDelivery(item.value());
  }

  void MailingAddressImpl::
  ModeOfDeliveryValue (const model::StringItem &item)
  {
      m_addr->setModeOfDeliveryValue(item.value());
  }

  void MailingAddressImpl::
  Site (const model::StringItem &item)
  {
      m_addr->setSite(item.value());
  }

  void MailingAddressImpl::
  BulkMailCode (const model::StringItem &item)
  {
      m_addr->setBulkMailCode(item.value());
  }

  void MailingAddressImpl::
  ID (const QString& ID)
  {
      m_addr->setId(ID);
  }

  std::unique_ptr<model::MailingAddress> MailingAddressImpl::
  post_MailingAddress ()
  {
    auto action = post_FolioItemGroup ();
    if (action == model::ActionCode::Delete)
    {
        m_addr->remove();
        m_addr.release();
    }
    return std::move(m_addr);
  }

  // FormattedMailingAddressImpl
  //

  void FormattedMailingAddressImpl::
  pre ()
  {
      m_addr = std::make_unique<model::FormattedMailingAddress>();
  }

  void FormattedMailingAddressImpl::
  Line1 (const model::StringItem &item)
  {
      m_addr->setLine1(item.value());
  }

  void FormattedMailingAddressImpl::
  Line2 (const model::StringItem &item)
  {
      m_addr->setLine2(item.value());
  }

  void FormattedMailingAddressImpl::
  Line3 (const model::StringItem &item)
  {
      m_addr->setLine3(item.value());
  }

  void FormattedMailingAddressImpl::
  Line4 (const model::StringItem &item)
  {
      m_addr->setLine4(item.value());
  }

  void FormattedMailingAddressImpl::
  Line5 (const model::StringItem &item)
  {
      m_addr->setLine5(item.value());
  }

  void FormattedMailingAddressImpl::
  Line6 (const model::StringItem &item)
  {
      m_addr->setLine6(item.value());
  }

  void FormattedMailingAddressImpl::
  ID (const QString& ID)
  {
      m_addr->setId(ID);
  }

  std::unique_ptr<model::FormattedMailingAddress>
  FormattedMailingAddressImpl::post_FormattedMailingAddress()
  {
    auto action = post_FolioItemGroup ();
    if (action == model::ActionCode::Delete)
    {
        m_addr->remove();
        m_addr.release();
    }
    return std::move(m_addr);
  }

  // String40Impl
  //

  void String40Impl::
  pre ()
  {
  }

  QString String40Impl::
  post_String40 ()
  {
    const ::std::string& v (post_string ());
    return QString::fromStdString(v);
  }

  // FormattedMailingAddressLineImpl
  //

  void FormattedMailingAddressLineImpl::
  pre ()
  {
  }

  void FormattedMailingAddressLineImpl::
  Action (const model::ActionCode::Code &code)
  {
      m_action = code;
  }

  void FormattedMailingAddressLineImpl::
  OldValue (const QString& OldValue)
  {
      m_oldValue = OldValue;
  }

  model::StringItem FormattedMailingAddressLineImpl::post_FormattedMailingAddressLine()
  {
    const QString& v (post_String40 ());
    return model::StringItem(v, m_oldValue, m_action);
  }

  // LegalDescriptionCollectionImpl
  //

  void LegalDescriptionCollectionImpl::
  pre ()
  {
      m_descr = std::vector<std::unique_ptr<model::LegalDescription>>();
  }

  void LegalDescriptionCollectionImpl::
  LegalDescription (std::unique_ptr<model::LegalDescription> &LegalDescription)
  {
      if (LegalDescription)
          m_descr.push_back(std::move(LegalDescription));
  }

  std::vector<std::unique_ptr<model::LegalDescription> >
  LegalDescriptionCollectionImpl::post_LegalDescriptionCollection()
  {
    auto action = post_FolioItemGroup ();
    if (action == model::ActionCode::Delete)
    {
        for (auto &&descr: m_descr)
        {
            descr->remove();
        }
        m_descr.clear();
    }
    return std::move(m_descr);
  }

  // LegalDescriptionImpl
  //

  void LegalDescriptionImpl::
  pre ()
  {
      m_descr = std::make_unique<model::LegalDescription>();
  }

  void LegalDescriptionImpl::
  FormattedLegalDescription (const model::StringItem &item)
  {
      m_descr->setFormattedLegalDescription(item.value());
  }

  void LegalDescriptionImpl::
  PID (const model::StringItem &item)
  {
      m_descr->setPID(item.value());
  }

  void LegalDescriptionImpl::
  Lot (const model::StringItem &item)
  {
      m_descr->setLot(item.value());
  }

  void LegalDescriptionImpl::
  StrataLot (const model::StringItem &item)
  {
      m_descr->setStrataLot(item.value());
  }

  void LegalDescriptionImpl::
  Parcel (const model::StringItem &item)
  {
      m_descr->setParcel(item.value());
  }

  void LegalDescriptionImpl::
  Block (const model::StringItem &item)
  {
      m_descr->setBlock(item.value());
  }

  void LegalDescriptionImpl::
  SubBlock (const model::StringItem &item)
  {
      m_descr->setSubBlock(item.value());
  }

  void LegalDescriptionImpl::
  Plan (const model::StringItem &item)
  {
      m_descr->setPlan(item.value());
  }

  void LegalDescriptionImpl::
  SubLot (const model::StringItem &item)
  {
      m_descr->setSubLot(item.value());
  }

  void LegalDescriptionImpl::
  Part1 (const model::StringItem &item)
  {
      m_descr->setPart1(item.value());
  }

  void LegalDescriptionImpl::
  Part2 (const model::StringItem &item)
  {
      m_descr->setPart2(item.value());
  }

  void LegalDescriptionImpl::
  Part3 (const model::StringItem &item)
  {
      m_descr->setPart3(item.value());
  }

  void LegalDescriptionImpl::
  Part4 (const model::StringItem &item)
  {
      m_descr->setPart4(item.value());
  }

  void LegalDescriptionImpl::
  DistrictLot (const model::StringItem &item)
  {
      m_descr->setDistrictLot(item.value());
  }

  void LegalDescriptionImpl::
  LegalSubdivision (const model::StringItem &item)
  {
      m_descr->setLegalSubdivision(item.value());
  }

  void LegalDescriptionImpl::
  Section (const model::StringItem &item)
  {
      m_descr->setSection(item.value());
  }

  void LegalDescriptionImpl::
  Township (const model::StringItem &item)
  {
      m_descr->setTownship(item.value());
  }

  void LegalDescriptionImpl::
  Range (const model::StringItem &item)
  {
      m_descr->setRange(item.value());
  }

  void LegalDescriptionImpl::
  Meridian (const model::StringItem &item)
  {
      m_descr->setMeridian(item.value());
  }

  void LegalDescriptionImpl::
  MeridianShort (const model::StringItem &item)
  {
      m_descr->setMeridianShort(item.value());
  }

  void LegalDescriptionImpl::
  BCAGroup (const model::StringItem &item)
  {
      m_descr->setBCAGroup(item.value());
  }

  void LegalDescriptionImpl::
  LandDistrict (const model::StringItem &item)
  {
      m_descr->setLandDistrict(item.value());
  }

  void LegalDescriptionImpl::
  LandDistrictDescription (const model::StringItem &item)
  {
      m_descr->setLandDistrictDescription(item.value());
  }

  void LegalDescriptionImpl::
  Portion (const model::StringItem &item)
  {
      m_descr->setPortion(item.value());
  }

  void LegalDescriptionImpl::
  ExceptPlan (const model::StringItem &item)
  {
      m_descr->setExceptPlan(item.value());
  }

  void LegalDescriptionImpl::
  FirstNationReserveNumber (const model::StringItem &item)
  {
      m_descr->setFirstNationsReserveNumber(item.value());
  }

  void LegalDescriptionImpl::
  FirstNationReserveDescription (const model::StringItem &item)
  {
      m_descr->setFirstNationsReserveDescription(item.value());
  }

  void LegalDescriptionImpl::
  LeaseLicenceNumber (const model::StringItem &item)
  {
      m_descr->setLeaseLicenceNumber(item.value());
  }

  void LegalDescriptionImpl::
  LandBranchFileNumber (const model::StringItem &item)
  {
      m_descr->setLandBranchFileNumber(item.value());
  }

  void LegalDescriptionImpl::
  AirSpaceParcelNumber (const model::StringItem &item)
  {
      m_descr->setAirSpaceParcelNumber(item.value());
  }

  void LegalDescriptionImpl::
  NtsLocation (const model::StringItem &item)
  {
      m_descr->setNtsLocation(item.value());
  }

  void LegalDescriptionImpl::
  LegalText (const model::StringItem &item)
  {
      m_descr->setLegalText(item.value());
  }

  void LegalDescriptionImpl::
  ID (const QString& ID)
  {
      m_descr->setId(ID);
  }

  std::unique_ptr<model::LegalDescription>
  LegalDescriptionImpl::post_LegalDescription()
  {
    if ( post_FolioItemGroup () == model::ActionCode::Delete)
    {
        m_descr->remove();
        m_descr.release();
    }
    return std::move(m_descr);
  }

  // LandCharacteristicImpl
  //

  void LandCharacteristicImpl::
  pre ()
  {
      m_characteristic = std::make_unique<model::LandCharacteristic>();
  }

  void LandCharacteristicImpl::
  LandCharacteristicCode (const model::StringItem &item)
  {
      m_characteristic->setCode(item.value());
  }

  void LandCharacteristicImpl::
  LandCharacteristicDescription (const model::StringItem &item)
  {
      m_characteristic->setDescription(item.value());
  }

  std::unique_ptr<model::LandCharacteristic>
  LandCharacteristicImpl::post_LandCharacteristic()
  {
    if (post_FolioItemGroup () == model::ActionCode::Delete)
    {
        m_characteristic->remove();
        m_characteristic.release();
    }
    return std::move(m_characteristic);
  }

  // LandCharacteristicCollectionImpl
  //

  void LandCharacteristicCollectionImpl::
  pre ()
  {
      m_landcharacteristics = std::vector<std::unique_ptr<model::LandCharacteristic>>();
  }

  void LandCharacteristicCollectionImpl::
  LandCharacteristic (std::unique_ptr<model::LandCharacteristic> &LandCharacteristic)
  {
      if (LandCharacteristic)
          m_landcharacteristics.push_back(std::move(LandCharacteristic));
  }

  std::vector<std::unique_ptr<model::LandCharacteristic> >
  LandCharacteristicCollectionImpl::post_LandCharacteristicCollection()
  {
    if (post_FolioItemGroup () == model::ActionCode::Delete)
    {
        for (auto &&character: m_landcharacteristics)
        {
            character->remove();
        }
        m_landcharacteristics.clear();
    }
    return std::move(m_landcharacteristics);
  }

  // ManufacturedHomeCollectionImpl
  //

  void ManufacturedHomeCollectionImpl::
  pre ()
  {
      m_homes = std::vector<std::unique_ptr<model::ManufacturedHome>>();
  }

  void ManufacturedHomeCollectionImpl::
  ManufacturedHome (std::unique_ptr<model::ManufacturedHome> &home)
  {
      if (home)
          m_homes.push_back(std::move(home));
  }

  std::vector<std::unique_ptr<model::ManufacturedHome>> ManufacturedHomeCollectionImpl::
  post_ManufacturedHomeCollection ()
  {
    if (post_FolioItemGroup () == model::ActionCode::Delete)
    {
        for (auto &&home: m_homes)
        {
            home->remove();
        }
        m_homes.clear();
    }
    return std::move(m_homes);
  }

  // ManufacturedHomeImpl
  //

  void ManufacturedHomeImpl::
  pre ()
  {
      m_home = std::make_unique<model::ManufacturedHome>();
  }

  void ManufacturedHomeImpl::
  MHRegistryNumber (const model::StringItem &item)
  {
      m_home->setMhRegistryNumber(item.value());
  }

  void ManufacturedHomeImpl::
  MHBayNumber (const model::StringItem &item)
  {
      m_home->setMhBayNumber(item.value());
  }

  void ManufacturedHomeImpl::
  MHPark (const model::StringItem &item)
  {
      m_home->setMhPark(item.value());
  }

  void ManufacturedHomeImpl::
  MHParkRollNumber (const model::StringItem &item)
  {
      m_home->setMhParkRollNumber(item.value());
  }

  void ManufacturedHomeImpl::
  ID (const QString& ID)
  {
      m_home->setId(ID);
  }

  std::unique_ptr<model::ManufacturedHome> ManufacturedHomeImpl::post_ManufacturedHome()
  {
    auto action = post_FolioItemGroup ();
    if (action == model::ActionCode::Delete)
    {
        m_home->remove();
        m_home.release();
    }
    return std::move(m_home);
  }

  // FarmCollectionImpl
  //

  void FarmCollectionImpl::
  pre ()
  {
      farms.clear();
  }

  void FarmCollectionImpl::
  Farm (std::unique_ptr<model::Farm> &Farm)
  {
      if (Farm)
          farms.push_back(std::move(Farm));
  }

  std::vector<std::unique_ptr<model::Farm> > FarmCollectionImpl::post_FarmCollection()
  {
    if (post_FolioItemGroup () == model::ActionCode::Delete)
    {
        for (auto &&farm: farms)
            farm->remove();
        farms.clear();
    }
    return std::move(farms);
  }

  // FarmImpl
  //

  void FarmImpl::
  pre ()
  {
      m_farm = std::make_unique<model::Farm>();
  }

  void FarmImpl::
  FarmNumber (const model::StringItem &number)
  {
      m_farm->setFarmNumber(number.value());
  }

  void FarmImpl::
  ID (const QString& ID)
  {
      m_farm->setId(ID);
  }

  std::unique_ptr<model::Farm> FarmImpl::post_Farm()
  {
    if (post_FolioItemGroup () == model::ActionCode::Delete)
    {
        m_farm->remove();
        m_farm.release();
    }
    return std::move(m_farm);
  }

  // OilAndGasCollectionImpl
  //

  void OilAndGasCollectionImpl::
  pre ()
  {
      m_oil = std::vector<std::unique_ptr<model::OilAndGas>>();
  }

  void OilAndGasCollectionImpl::
  OilAndGas (std::unique_ptr<model::OilAndGas>& oilAndGas)
  {
      if (oilAndGas)
          m_oil.push_back(std::move(oilAndGas));
  }

  std::vector<std::unique_ptr<model::OilAndGas> >
  OilAndGasCollectionImpl::post_OilAndGasCollection()
  {
    if (post_FolioItemGroup () == model::ActionCode::Delete)
    {
        for (auto &&oil: m_oil)
            oil->remove();
        m_oil.clear();
    }
    return std::move(m_oil);
  }

  // OilAndGasImpl
  //

  void OilAndGasImpl::
  pre ()
  {
      m_oil = std::make_unique<model::OilAndGas>();
  }

  void OilAndGasImpl::
  PipelineProjectNumber (const model::StringItem &item)
  {
      m_oil->setPipelineProjectNumber(item.value());
  }

  void OilAndGasImpl::
  ID (const QString& ID)
  {
      m_oil->setId(ID);
  }

  std::unique_ptr<model::OilAndGas> OilAndGasImpl::post_OilAndGas()
  {
    if ( post_FolioItemGroup () == model::ActionCode::Delete)
    {
        m_oil->remove();
        m_oil.release();
    }
    return std::move(m_oil);
  }

  // ManagedForestCollectionImpl
  //

  void ManagedForestCollectionImpl::
  pre ()
  {
      m_forest = std::vector<std::unique_ptr<model::ManagedForest>>();
  }

  void ManagedForestCollectionImpl::
  ManagedForest (std::unique_ptr<model::ManagedForest> &forest)
  {
      if (forest)
          m_forest.push_back(std::move(forest));
  }

  std::vector<std::unique_ptr<model::ManagedForest> > ManagedForestCollectionImpl::post_ManagedForestCollection()
  {
    if ( post_FolioItemGroup () == model::ActionCode::Delete)
    {
        for (auto &&obj: m_forest)
        {
            obj->remove();
        }
        m_forest.clear();
    }
    return std::move(m_forest);
  }

  // ManagedForestImpl
  //

  void ManagedForestImpl::
  pre ()
  {
      m_forest = std::make_unique<model::ManagedForest>();
  }

  void ManagedForestImpl::
  ManagedForestNumber (const model::StringItem &item)
  {
      m_forest->setManagedForestNumber(item.value());
  }

  void ManagedForestImpl::
  ID (const QString& ID)
  {
      m_forest->setId(ID);
  }

  std::unique_ptr<model::ManagedForest> ManagedForestImpl::post_ManagedForest()
  {
    if ( post_FolioItemGroup () == model::ActionCode::Delete)
    {
        m_forest->remove();
        m_forest.release();
    }
    return std::move(m_forest);
  }

  // FolioAmendmentCollectionImpl
  //

  void FolioAmendmentCollectionImpl::
  pre ()
  {
  }

  void FolioAmendmentCollectionImpl::
  Amendment ()
  {
  }

  void FolioAmendmentCollectionImpl::
  post_FolioAmendmentCollection ()
  {
#pragma warning(push)
#pragma warning(disable:4189)
    auto action = post_FolioItemGroup ();
  }
#pragma warning(pop)

  // FolioAmendmentImpl
  //

  void FolioAmendmentImpl::
  pre ()
  {
  }

  void FolioAmendmentImpl::
  AmendmentType ()
  {
  }

  void FolioAmendmentImpl::
  AmendmentTypeDescription ()
  {
  }

  void FolioAmendmentImpl::
  AmendmentReasonCode ()
  {
  }

  void FolioAmendmentImpl::
  AmendmentReasonDescription ()
  {
  }

  void FolioAmendmentImpl::
  SuppOccupancyDate ()
  {
  }

  void FolioAmendmentImpl::
  SuppOccupancyCode ()
  {
  }

#pragma warning(push)
#pragma warning(disable:4100)
  void FolioAmendmentImpl::
  ID (const QString& ID)
  {
    // TODO FolioAmendmentImpl::ID
    //
  }
#pragma warning(pop)

  void FolioAmendmentImpl::
  post_FolioAmendment ()
  {
#pragma warning(push)
#pragma warning(disable:4189)
    auto action = post_FolioItemGroup ();
  }
#pragma warning(pop)

  // SaleCollectionImpl
  //

  void SaleCollectionImpl::
  pre ()
  {
      sales = std::vector<std::unique_ptr<model::Sale>>();
  }

  void SaleCollectionImpl::
  Sale (std::unique_ptr<model::Sale> &Sale)
  {
      if (Sale)
          sales.push_back(std::move(Sale));
  }

  std::vector<std::unique_ptr<model::Sale>> SaleCollectionImpl::
  post_SaleCollection ()
  {
    if ( post_FolioItemGroup () == model::ActionCode::Delete)
    {
        for (auto &&obj: sales)
        {
            obj->remove();
        }
        sales.clear();
    }
    return std::move(sales);
  }

  // SaleImpl
  //

  void SaleImpl::
  pre ()
  {
      m_sale = std::make_unique<model::Sale>();
  }

  void SaleImpl::
  DocumentNumber (const model::StringItem &item)
  {
      m_sale->setDocumentNumber(item.value());
  }

  void SaleImpl::
  ConveyanceDate (const model::DateItem& item)
  {
      m_sale->setConveyanceDate(item.value());
  }

  void SaleImpl::
  ConveyancePrice (const model::DecimalItem& item)
  {
      m_sale->setConveyancePrice(item.value());
  }

  void SaleImpl::
  ConveyanceType (const model::StringItem& item)
  {
      m_sale->setConveyanceType(item.value());
  }

  void SaleImpl::
  ConveyanceTypeDescription (const model::StringItem& item)
  {
      m_sale->setConveyanceTypeDescription(item.value());
  }

  void SaleImpl::
  RejectReasonCode (const model::StringItem& item)
  {
      m_sale->setRejectReasonCode(item.value());
  }

  void SaleImpl::
  RejectReasonDescription (const model::StringItem& item)
  {
      m_sale->setRejectReasonDescription(item.value());
  }

  void SaleImpl::
  ID (const QString& ID)
  {
      m_sale->setId(ID);
  }

  std::unique_ptr<model::Sale> SaleImpl::post_Sale()
  {
    if ( post_FolioItemGroup () == model::ActionCode::Delete)
    {
        m_sale->remove();
        m_sale.release();
    }
    return std::move(m_sale);
  }

  // FolioDescriptionImpl
  //

  void FolioDescriptionImpl::
  pre ()
  {
      m_descr = std::make_unique<model::FolioDescription>();
  }

  void FolioDescriptionImpl::
  Neighbourhood (std::unique_ptr<model::Neighbourhood> &Neighbourhood)
  {
      m_descr->setNeighbourhood(Neighbourhood);
  }

  void FolioDescriptionImpl::
  ActualUseCode (const model::StringItem &item)
  {
      m_descr->setActualUseCode(item.value());
  }

  void FolioDescriptionImpl::
  ActualUseDescription (const model::StringItem &item)
  {
      m_descr->setActualUseDescription(item.value());
  }

  void FolioDescriptionImpl::
  VacantFlag (const model::BooleanItem &item)
  {
      m_descr->setVacantFlag(item.value());
  }

  void FolioDescriptionImpl::
  BCTransitFlag (const model::BooleanItem &item)
  {
      m_descr->setBcTransitFlag(item.value());
  }

  void FolioDescriptionImpl::
  PoliceTaxFlag (const model::BooleanItem &item)
  {
      m_descr->setPoliceTaxFlag(item.value());
  }

  void FolioDescriptionImpl::
  ALRCode (const model::StringItem &item)
  {
      m_descr->setAlrCode(item.value());
  }

  void FolioDescriptionImpl::
  ALRDescription (const model::StringItem &item)
  {
      m_descr->setAlrDescription(item.value());
  }

  void FolioDescriptionImpl::
  TenureCode (const model::StringItem &item)
  {
      m_descr->setTenureCode(item.value());
  }

  void FolioDescriptionImpl::
  TenureDescription (const model::StringItem &item)
  {
      m_descr->setTenureDescription(item.value());
  }

  void FolioDescriptionImpl::
  ParkingArea (const model::StringItem &item)
  {
      m_descr->setParkingArea(item.value());
  }

  void FolioDescriptionImpl::
  LandMeasurement (std::unique_ptr<model::LandMeasurement> &land)
  {
      m_descr->setLandMeasurement(land);
  }

  void FolioDescriptionImpl::
  SchoolDistrict (std::unique_ptr<model::SpecialDistrict> &SchoolDistrict)
  {
      if (!SchoolDistrict->save())
          throw SaveError(QString("School district: ")
                          + SchoolDistrict->lastError().text());
      m_descr->setSchoolDistrict(std::move(SchoolDistrict));
  }

  void FolioDescriptionImpl::
  RegionalDistrict (std::unique_ptr<model::SpecialDistrict> &RegionalDistrict)
  {
      if (!RegionalDistrict->save())
          throw SaveError(QString("Regional District: ")
                          + RegionalDistrict->lastError().text());
      m_descr->setRegionalDistrict(std::move(RegionalDistrict));
  }

  void FolioDescriptionImpl::
  RegionalHospitalDistrict (std::unique_ptr<model::SpecialDistrict> &RegionalHospitalDistrict)
  {
      if (!RegionalHospitalDistrict->save())
          throw SaveError(QString("Regional hospital district: ")
                          + RegionalHospitalDistrict->lastError().text());
      m_descr->setRegionalHospitalDistrict(std::move(RegionalHospitalDistrict));
  }

  void FolioDescriptionImpl::
  PredominantManualClass (std::unique_ptr<model::ManualClass> &PredominantManualClass)
  {
      m_descr->setPredominantManualClass(std::move(PredominantManualClass));
  }

  std::unique_ptr<model::FolioDescription> FolioDescriptionImpl::
  post_FolioDescription ()
  {
    if ( post_FolioItemGroup () == model::ActionCode::Delete)
    {
        m_descr->remove();
        m_descr.release();
    }
    return std::move(m_descr);
  }

  // LandMeasurementImpl
  //

  void LandMeasurementImpl::
  pre ()
  {
      m_measurement = std::make_unique<model::LandMeasurement>();
  }

  void LandMeasurementImpl::
  LandDimensionType (const model::StringItem &item)
  {
      m_measurement->setLandDimensionType(item.value());
  }

  void LandMeasurementImpl::
  LandDimensionTypeDescription (const model::StringItem &item)
  {
      m_measurement->setLandDimensionTypeDescription(item.value());
  }

  void LandMeasurementImpl::
  LandDimension (const model::StringItem &item)
  {
      m_measurement->setLandDimension(item.value());
  }

  void LandMeasurementImpl::
  LandWidth (const model::StringItem &item)
  {
      m_measurement->setLandWidth(item.value());
  }

  void LandMeasurementImpl::
  LandDepth (const model::StringItem &item)
  {
      m_measurement->setLandDepth(item.value());
  }

  std::unique_ptr<model::LandMeasurement> LandMeasurementImpl::
  post_LandMeasurement ()
  {
    if ( post_FolioItemGroup () == model::ActionCode::Delete)
    {
        m_measurement->remove();
        m_measurement.release();
    }
    return std::move(m_measurement);
  }

  // NeighbourhoodImpl
  //

  void NeighbourhoodImpl::
  pre ()
  {
      m_neighbourhood = std::make_unique<model::Neighbourhood>();
  }

  void NeighbourhoodImpl::
  NeighbourhoodCode (const model::StringItem &item)
  {
      m_neighbourhood->setNeighbourhoodCode(item.value());
  }

  void NeighbourhoodImpl::
  NeighbourhoodDescription (const model::StringItem &item)
  {
      m_neighbourhood->setNeighbourhoodDescription(item.value());
  }

  std::unique_ptr<model::Neighbourhood> NeighbourhoodImpl::
  post_Neighbourhood ()
  {
    if ( post_FolioItemGroup () == model::ActionCode::Delete)
    {
        m_neighbourhood->remove();
        m_neighbourhood.release();
    }
    return std::move(m_neighbourhood);
  }

  // SpecialDistrictImpl
  //

  void SpecialDistrictImpl::
  pre ()
  {
      m_district = std::make_unique<model::SpecialDistrict>();
  }

  void SpecialDistrictImpl::
  DistrictCode (const model::StringItem& item)
  {
      m_district->setCode(item.value());
  }

  void SpecialDistrictImpl::
  DistrictDescription (const model::StringItem &item)
  {
      m_district->setDescription(item.value());
  }

  std::unique_ptr<model::SpecialDistrict> SpecialDistrictImpl::
  post_SpecialDistrict ()
  {
    if ( post_FolioItemGroup () == model::ActionCode::Delete)
    {
        m_district->remove();
        m_district.release();
    }
    return std::move(m_district);
  }

  // ManualClassImpl
  //

  void ManualClassImpl::
  pre ()
  {
      m_class = std::make_unique<model::ManualClass>();
  }

  void ManualClassImpl::
  ManualClassCode (const model::StringItem &item)
  {
      m_class->setManualClassCode(item.value());
  }

  void ManualClassImpl::
  ManualClassDescription (const model::StringItem &item)
  {
      m_class->setManualClassDescription(item.value());
  }

  void ManualClassImpl::
  PercentDeviation (const model::DecimalItem &item)
  {
      m_class->setDeviation(item.value());
  }

  std::unique_ptr<model::ManualClass> ManualClassImpl::
  post_ManualClass ()
  {
    if ( post_FolioItemGroup () == model::ActionCode::Delete)
    {
        m_class->remove();
        m_class.release();
    }
    return std::move(m_class);
  }

  // MinorTaxingImpl
  //

  void MinorTaxingImpl::
  pre ()
  {
      m_taxings = std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>();
  }

  void MinorTaxingImpl::
  ElectoralAreas (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>& taxings)
  {
      for (auto &&taxing: taxings)
      {
          auto jurisdictionType = model::minortaxing::JurisdictionType::getModel(
                                  model::minortaxing::JurisdictionType::ElectoralArea);
          taxing->setJurisdictionType(std::move(jurisdictionType));
      }
      m_taxings.insert(m_taxings.end(),
                       std::make_move_iterator(taxings.begin()),
                       std::make_move_iterator(taxings.end()));
  }

  void MinorTaxingImpl::
  ServiceAreas (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>& taxings)
  {
      for (auto &&taxing: taxings)
      {
          auto jurisdictionType = model::minortaxing::JurisdictionType::getModel(
                                  model::minortaxing::JurisdictionType::ServiceArea);
          taxing->setJurisdictionType(std::move(jurisdictionType));
      }
      m_taxings.insert(m_taxings.end(),
                       std::make_move_iterator(taxings.begin()),
                       std::make_move_iterator(taxings.end()));
  }

  void MinorTaxingImpl::
  Defined (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>& taxings)
  {
      for (auto &&taxing: taxings)
      {
          auto jurisdictionType = model::minortaxing::JurisdictionType::getModel(
                                  model::minortaxing::JurisdictionType::Defined);
          taxing->setJurisdictionType(std::move(jurisdictionType));
      }
      m_taxings.insert(m_taxings.end(),
                       std::make_move_iterator(taxings.begin()),
                       std::make_move_iterator(taxings.end()));
  }

  void MinorTaxingImpl::
  SpecifiedRegional (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>& taxings)
  {
      for (auto &&taxing: taxings)
      {
          auto jurisdictionType = model::minortaxing::JurisdictionType::getModel(
                                  model::minortaxing::JurisdictionType::SpecifiedRegional);
          taxing->setJurisdictionType(std::move(jurisdictionType));
      }
      m_taxings.insert(m_taxings.end(),
                       std::make_move_iterator(taxings.begin()),
                       std::make_move_iterator(taxings.end()));
  }

  void MinorTaxingImpl::
  SpecifiedMunicipal (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>& taxings)
  {
      for (auto &&taxing: taxings)
      {
          auto jurisdictionType = model::minortaxing::JurisdictionType::getModel(
                                  model::minortaxing::JurisdictionType::SpecifiedMunicipal);
          taxing->setJurisdictionType(std::move(jurisdictionType));
      }
      m_taxings.insert(m_taxings.end(),
                       std::make_move_iterator(taxings.begin()),
                       std::make_move_iterator(taxings.end()));
  }

  void MinorTaxingImpl::
  LocalAreas (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>& taxings)
  {
      for (auto &&taxing: taxings)
      {
          auto jurisdictionType = model::minortaxing::JurisdictionType::getModel(
                                  model::minortaxing::JurisdictionType::LocalArea);
          taxing->setJurisdictionType(std::move(jurisdictionType));
      }
      m_taxings.insert(m_taxings.end(),
                       std::make_move_iterator(taxings.begin()),
                       std::make_move_iterator(taxings.end()));
  }

  void MinorTaxingImpl::
  GeneralServices (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>& taxings)
  {
      for (auto &&taxing: taxings)
      {
          auto jurisdictionType = model::minortaxing::JurisdictionType::getModel(
                                  model::minortaxing::JurisdictionType::GeneralService);
          taxing->setJurisdictionType(std::move(jurisdictionType));
      }
      m_taxings.insert(m_taxings.end(),
                       std::make_move_iterator(taxings.begin()),
                       std::make_move_iterator(taxings.end()));
  }

  void MinorTaxingImpl::
  ImprovementDistricts (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction> >  &taxings)
  {
      for (auto &&taxing: taxings)
      {
          auto jurisdictionType = model::minortaxing::JurisdictionType::getModel(
                                  model::minortaxing::JurisdictionType::ImprovementDistrict);
          taxing->setJurisdictionType(std::move(jurisdictionType));
      }
      m_taxings.insert(m_taxings.end(),
                       std::make_move_iterator(taxings.begin()),
                       std::make_move_iterator(taxings.end()));
  }

  void MinorTaxingImpl::
  IslandsTrusts (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction> > &taxings)
  {
      for (auto &&taxing: taxings)
      {
          auto jurisdictionType = model::minortaxing::JurisdictionType::getModel(
                                  model::minortaxing::JurisdictionType::IslandTrust);
          taxing->setJurisdictionType(std::move(jurisdictionType));
      }
      m_taxings.insert(m_taxings.end(),
                       std::make_move_iterator(taxings.begin()),
                       std::make_move_iterator(taxings.end()));
  }

  std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction> >
  MinorTaxingImpl::post_MinorTaxing()
  {
    if ( post_FolioItemGroup () == model::ActionCode::Delete)
    {
        for (auto &&obj: m_taxings)
        {
            obj->remove();
        }
        m_taxings.clear();
    }
    return std::move(m_taxings);
  }

  // MinorTaxingJurisdictionCollectionImpl
  //

  void MinorTaxingJurisdictionCollectionImpl::
  pre ()
  {
      m_jurisdictions = std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>();
  }

  void MinorTaxingJurisdictionCollectionImpl::
  MinorTaxingJurisdiction (std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction> &taxing)
  {
      if (taxing)
          m_jurisdictions.push_back(std::move(taxing));
  }

  std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction> >
  MinorTaxingJurisdictionCollectionImpl::post_MinorTaxingJurisdictionCollection()
  {
    if ( post_FolioItemGroup () == model::ActionCode::Delete)
    {
        for (auto &&obj: m_jurisdictions)
        {
            obj->remove();
        }
        m_jurisdictions.clear();
    }
    return std::move(m_jurisdictions);
  }

  // MinorTaxingJurisdictionImpl
  //

  void MinorTaxingJurisdictionImpl::
  pre ()
  {
      m_jurisdiction = std::make_unique<model::minortaxing::MinorTaxingJurisdiction>();
  }

  void MinorTaxingJurisdictionImpl::
  MinorTaxingCode (const model::StringItem &item)
  {
      m_jurisdiction->setCode(item.value());
  }

  void MinorTaxingJurisdictionImpl::
  MinorTaxingCodeShort (const model::StringItem &item)
  {
      m_jurisdiction->setShortCode(item.value());
  }

  void MinorTaxingJurisdictionImpl::
  MinorTaxingDescription (const model::StringItem &item)
  {
      m_jurisdiction->setMinorTaxingDescription(item.value());
  }

  void MinorTaxingJurisdictionImpl::
  ID (const QString& ID)
  {
      m_jurisdiction->setID(ID);
  }

 std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>
  MinorTaxingJurisdictionImpl::post_MinorTaxingJurisdiction()
  {
    if ( post_FolioItemGroup () == model::ActionCode::Delete)
    {
        m_jurisdiction->remove();
        m_jurisdiction.release();
    }
    return std::move(m_jurisdiction);
  }

  // PropertyValuesImpl
  //

  void PropertyValuesImpl::
  pre ()
  {
      m_values = std::make_unique<model::PropertyValues>();
  }

  void PropertyValuesImpl::
  GeneralValues (std::vector<std::unique_ptr<model::PropertyClassValue>>& GeneralValues)
  {
      for (auto &&val: GeneralValues)
      {
          val->setValueType(model::PropertyClassValueType::getModel(
                                model::PropertyClassValueType::General));
          m_values->second.push_back(std::move(val));
      }
  }

  void PropertyValuesImpl::
  BCTransitValues (std::vector<std::unique_ptr<model::PropertyClassValue>>& BCTransitValues)
  {
      for (auto &&val: BCTransitValues)
      {
          val->setValueType(model::PropertyClassValueType::getModel(
                                model::PropertyClassValueType::BCTransit));
          m_values->second.push_back(std::move(val));
      }
  }

  void PropertyValuesImpl::
  SchoolValues (std::vector<std::unique_ptr<model::PropertyClassValue>>& SchoolValues)
  {
      for (auto &&val: SchoolValues)
      {
          val->setValueType(model::PropertyClassValueType::getModel(
                                model::PropertyClassValueType::School));
          m_values->second.push_back(std::move(val));
      }
  }

  void PropertyValuesImpl::
  Valuation (std::vector<std::unique_ptr<model::ValuesByETC> > &Valuation)
  {
      m_values->first = std::move(Valuation);
  }

  std::unique_ptr<model::PropertyValues> PropertyValuesImpl::post_PropertyValues()
  {
      return std::move(m_values);
  }

  // ValuationCollectionImpl
  //

  void ValuationCollectionImpl::
  pre ()
  {
      valuations = std::vector<std::unique_ptr<model::ValuesByETC>>();
  }

  void ValuationCollectionImpl::
  ValuesByETC (std::unique_ptr<model::ValuesByETC> &values)
  {
      valuations.push_back(std::move(values));
  }

  std::vector<std::unique_ptr<model::ValuesByETC> >
  ValuationCollectionImpl::post_ValuationCollection()
  {
      return std::move(valuations);
  }

  // ValuesByETCImpl
  //

  void ValuesByETCImpl::
  pre ()
  {
      m_values = std::make_unique<model::ValuesByETC>();
  }

  void ValuesByETCImpl::
  TaxExemptCode (const QString& TaxExemptCode)
  {
      m_values->setTaxExemptCode(TaxExemptCode);
  }

  void ValuesByETCImpl::
  TaxExemptDescription (const QString& TaxExemptDescription)
  {
      m_values->setTaxExemptDescription(TaxExemptDescription);
  }

  void ValuesByETCImpl::
  PropertyClassCode (const QString &Code)
  {
      m_values->setPropertyClassCode(Code);
  }

  void ValuesByETCImpl::
  PropertyClassDescription (const QString& PropertyClassDescription)
  {
      m_values->setPropertyClassDescription(PropertyClassDescription);
  }

  void ValuesByETCImpl::
  LandValue (double LandValue)
  {
      m_values->setLandValue(LandValue);
  }

  void ValuesByETCImpl::
  ImprovementValue (double ImprovementValue)
  {
      m_values->setImprovementValue(ImprovementValue);
  }

  std::unique_ptr<model::ValuesByETC>
  ValuesByETCImpl::post_ValuesByETC()
  {
      return std::move(m_values);
  }

  // PropertyClassValuesCollectionImpl
  //

  void PropertyClassValuesCollectionImpl::
  pre ()
  {
      propertyClassValues = std::vector<std::unique_ptr<model::PropertyClassValue>>();
  }

  void PropertyClassValuesCollectionImpl::
  PropertyClassValues (std::unique_ptr<model::PropertyClassValue> &PropertyClassValues)
  {
      propertyClassValues.push_back(std::move(PropertyClassValues));
  }

  std::vector<std::unique_ptr<model::PropertyClassValue>> PropertyClassValuesCollectionImpl::
  post_PropertyClassValuesCollection ()
  {
      return std::move(propertyClassValues);
  }

  // PropertyClassValuesImpl
  //

  void PropertyClassValuesImpl::
  pre ()
  {
      m_value = std::make_unique<model::PropertyClassValue>();
  }

  void PropertyClassValuesImpl::
  PropertyClassCode (const QString &code)
  {
      m_value->setPropertyClassCode(code);
  }

  void PropertyClassValuesImpl::
  PropertyClassDescription (const QString& PropertyClassDescription)
  {
      m_value->setPropertyClassDescription(PropertyClassDescription);
  }

  void PropertyClassValuesImpl::
  PropertySubClassCode (const QString& PropertySubClassCode)
  {
      m_value->setPropertySubClassCode(PropertySubClassCode);
  }

  void PropertyClassValuesImpl::
  PropertySubClassDescription (const QString& PropertySubClassDescription)
  {
      m_value->setPropertySubClassDescription(PropertySubClassDescription);
  }

  void PropertyClassValuesImpl::
  GrossValues (std::unique_ptr<model::Valuation> &GrossValues)
  {
      m_value->setGrossValues(std::move(GrossValues));
  }

  void PropertyClassValuesImpl::
  TaxExemptValues (std::unique_ptr<model::Valuation> &TaxExemptValues)
  {
      m_value->setTaxExemptValues(std::move(TaxExemptValues));
  }

  void PropertyClassValuesImpl::
  NetValues (std::unique_ptr<model::Valuation> &NetValues)
  {
      m_value->setNetValues(std::move(NetValues));
  }

  std::unique_ptr<model::PropertyClassValue> PropertyClassValuesImpl::post_PropertyClassValues()
  {
      return std::move(m_value);
  }

  // PropertyClassCodeImpl
  //

  void PropertyClassCodeImpl::
  pre ()
  {
  }

  QString PropertyClassCodeImpl::
  post_PropertyClassCode ()
  {
    const ::std::string& v (post_string ());
    return QString::fromStdString(v);
  }

  // PropertySubClassCodeImpl
  //

  void PropertySubClassCodeImpl::
  pre ()
  {
  }

  QString PropertySubClassCodeImpl::
  post_PropertySubClassCode ()
  {
    const ::std::string& v (post_string ());
    return QString::fromStdString(v);
  }

  // ValuationImpl
  //

  void ValuationImpl::
  pre ()
  {
      landValue = 0;
      improvementValue = 0;
  }

  void ValuationImpl::
  LandValue (double LandValue)
  {
      landValue = LandValue;
  }

  void ValuationImpl::
  ImprovementValue (double ImprovementValue)
  {
      improvementValue = ImprovementValue;
  }

  std::unique_ptr<model::Valuation> ValuationImpl::post_Valuation()
  {
      auto valuation = std::make_unique<model::Valuation>();
      valuation->setImprovementValue(improvementValue);
      valuation->setLandValue(landValue);
      return valuation;
  }

  // FolioIntegerItemImpl
  //

  void FolioIntegerItemImpl::
  pre ()
  {
  }

  void FolioIntegerItemImpl::
  Action (const model::ActionCode::Code &Action)
  {
      action = Action;
  }

  void FolioIntegerItemImpl::
  OldValue (long long OldValue)
  {
      oldValue = OldValue;
  }

  model::IntegerItem FolioIntegerItemImpl::
  post_FolioIntegerItem ()
  {
    long long v (post_integer ());
    return model::IntegerItem(v, oldValue, action);
  }

  // FolioBooleanItemImpl
  //

  void FolioBooleanItemImpl::
  pre ()
  {
  }

  void FolioBooleanItemImpl::
  Action (const model::ActionCode::Code& Action)
  {
      action = Action;
  }

  void FolioBooleanItemImpl::
  OldValue (bool OldValue)
  {
      oldValue = OldValue;
  }

  model::BooleanItem FolioBooleanItemImpl::
  post_FolioBooleanItem ()
  {
    bool v (post_boolean ());
    return model::BooleanItem(v, oldValue, action);
  }

  // FolioDecimalItemImpl
  //

  void FolioDecimalItemImpl::
  pre ()
  {
  }

  void FolioDecimalItemImpl::
  Action (const model::ActionCode::Code &Action)
  {
      action = Action;
  }

  void FolioDecimalItemImpl::
  OldValue (double OldValue)
  {
      oldValue = OldValue;
  }

  model::DecimalItem FolioDecimalItemImpl::
  post_FolioDecimalItem ()
  {
    double v (post_decimal ());
    return model::DecimalItem(v, oldValue, action);
  }

  // FolioDateItemImpl
  //

  void FolioDateItemImpl::
  pre ()
  {
      action = model::ActionCode::Add;
      oldValue = QDate();
  }

  void FolioDateItemImpl::
  Action (const model::ActionCode::Code &action)
  {
      this->action = action;
  }

  void FolioDateItemImpl::
  OldValue (const ::xml_schema::date& OldValue)
  {
      oldValue = fromXmlDate(OldValue);
  }

  model::DateItem FolioDateItemImpl::
  post_FolioDateItem ()
  {
    const ::xml_schema::date& v (post_date ());
    return model::DateItem(fromXmlDate(v), oldValue, action);
  }

  // UniqueIDImpl
  //

  void UniqueIDImpl::
  pre ()
  {
  }

  QString UniqueIDImpl::
  post_UniqueID ()
  {
    const ::std::string& v (post_string ());
    return QString::fromStdString(v);
  }

  // FolioUniqueIDItemImpl
  //

  void FolioUniqueIDItemImpl::
  pre ()
  {
      action = model::ActionCode::Add;
      oldValue = QString();
  }

  void FolioUniqueIDItemImpl::
  Action (const model::ActionCode::Code &action)
  {
      this->action = action;
  }

  void FolioUniqueIDItemImpl::
  OldValue (const QString& OldValue)
  {
      oldValue = OldValue;
  }

  model::StringItem FolioUniqueIDItemImpl::post_FolioUniqueIDItem()
  {
    const QString& v (post_UniqueID ());
    return model::StringItem(v, oldValue, action);
  }

  // LookupCodeImpl
  //

  void LookupCodeImpl::
  pre ()
  {
  }

  QString LookupCodeImpl::
  post_LookupCode ()
  {
    const ::std::string& v (post_string ());
    return QString::fromStdString(v);
  }

  // FolioLookupCodeItemImpl
  //

  void FolioLookupCodeItemImpl::
  pre ()
  {
  }

  void FolioLookupCodeItemImpl::
  Action (const model::ActionCode::Code& Action)
  {
      action = Action;
  }

  void FolioLookupCodeItemImpl::
  OldValue (const QString& OldValue)
  {
      oldValue = OldValue;
  }

  model::StringItem FolioLookupCodeItemImpl::
  post_FolioLookupCodeItem ()
  {
    const QString& v (post_LookupCode ());
    return model::StringItem(v, oldValue, action);
  }

  // String1Impl
  //

  void String1Impl::
  pre ()
  {
  }

  QString String1Impl::
  post_String1 ()
  {
    const ::std::string& v (post_string ());
    return QString::fromStdString(v);
  }

  // FolioString1ItemImpl
  //

  void FolioString1ItemImpl::
  pre ()
  {
       action = model::ActionCode::Add;
       oldValue = QString();
  }

  void FolioString1ItemImpl::
  Action (const model::ActionCode::Code &Action)
  {
      action = Action;
  }

  void FolioString1ItemImpl::
  OldValue (const QString& OldValue)
  {
      oldValue = OldValue;
  }

  model::StringItem FolioString1ItemImpl::
  post_FolioString1Item ()
  {
    const QString& v (post_String1 ());
    return model::StringItem(v, oldValue, action);
  }

  // String255Impl
  //

  void String255Impl::
  pre ()
  {
  }

  QString String255Impl::
  post_String255 ()
  {
    const ::std::string& v (post_string ());
    return QString::fromStdString(v);
  }

  // FolioString255ItemImpl
  //

  void FolioString255ItemImpl::
  pre ()
  {
      m_oldValue = "";
      m_action = model::ActionCode::Add;
  }

  void FolioString255ItemImpl::
  Action (const model::ActionCode::Code &code)
  {
      m_action = code;
  }

  void FolioString255ItemImpl::
  OldValue (const QString& OldValue)
  {
      m_oldValue = OldValue;
  }

  model::StringItem FolioString255ItemImpl::post_FolioString255Item()
  {
    const QString& v (post_String255 ());
    return model::StringItem(v, m_oldValue, m_action);
  }

  // String1024Impl
  //

  void String1024Impl::
  pre ()
  {
  }

  QString String1024Impl::
  post_String1024 ()
  {
    const ::std::string& v (post_string ());
    return QString::fromStdString(v);
  }

  // FolioString1024ItemImpl
  //

  void FolioString1024ItemImpl::
  pre ()
  {
  }

  void FolioString1024ItemImpl::
  Action (const model::ActionCode::Code &Action)
  {
      m_action = Action;
  }

  void FolioString1024ItemImpl::
  OldValue (const QString& OldValue)
  {
      m_oldValue = OldValue;
  }

  model::StringItem FolioString1024ItemImpl::
  post_FolioString1024Item ()
  {
    const QString& v (post_String1024 ());
    return model::StringItem(v, m_oldValue, m_action);
  }

  // ActionCodeImpl
  //

  void ActionCodeImpl::
  pre ()
  {
  }

  model::ActionCode::Code ActionCodeImpl::
  post_ActionCode ()
  {
    const ::std::string& v (post_string ());
    return model::ActionCode::fromString(QString::fromStdString(v));
  }
}
