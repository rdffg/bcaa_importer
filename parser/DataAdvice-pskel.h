// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___DATA_ADVICE_PSKEL_H
#define CXX___DATA_ADVICE_PSKEL_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

// Begin prologue.
//
#pragma warning(disable: 4239)
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

// Forward declarations
//
namespace dataadvice
{
  class DataAdvice_pskel;
  class Version_pskel;
  class RunType_pskel;
  class DeliverySummary_pskel;
  class AmendmentReasonCountCollection_pskel;
  class AmendmentReasonCount_pskel;
  class DeleteReasonCountCollection_pskel;
  class DeleteReasonCount_pskel;
  class AssessmentAreaCollection_pskel;
  class AssessmentArea_pskel;
  class AssessmentAreaCode_pskel;
  class JurisdictionCollection_pskel;
  class Jurisdiction_pskel;
  class JurisdictionCode_pskel;
  class FolioGroupValues_pskel;
  class FolioRecordCollection_pskel;
  class FolioRecord_pskel;
  class String32_pskel;
  class FolioRollNumber_pskel;
  class FolioAction_pskel;
  class FolioAdd_pskel;
  class FolioDelete_pskel;
  class FolioRenumber_pskel;
  class FolioItemGroup_pskel;
  class FolioAddressCollection_pskel;
  class FolioAddress_pskel;
  class OwnershipGroupCollection_pskel;
  class OwnershipGroup_pskel;
  class OwnerCollection_pskel;
  class Owner_pskel;
  class MailingAddress_pskel;
  class FormattedMailingAddress_pskel;
  class String40_pskel;
  class FormattedMailingAddressLine_pskel;
  class LegalDescriptionCollection_pskel;
  class LegalDescription_pskel;
  class LandCharacteristic_pskel;
  class LandCharacteristicCollection_pskel;
  class ManufacturedHomeCollection_pskel;
  class ManufacturedHome_pskel;
  class FarmCollection_pskel;
  class Farm_pskel;
  class OilAndGasCollection_pskel;
  class OilAndGas_pskel;
  class ManagedForestCollection_pskel;
  class ManagedForest_pskel;
  class FolioAmendmentCollection_pskel;
  class FolioAmendment_pskel;
  class SaleCollection_pskel;
  class Sale_pskel;
  class FolioDescription_pskel;
  class LandMeasurement_pskel;
  class Neighbourhood_pskel;
  class SpecialDistrict_pskel;
  class ManualClass_pskel;
  class MinorTaxing_pskel;
  class MinorTaxingJurisdictionCollection_pskel;
  class MinorTaxingJurisdiction_pskel;
  class PropertyValues_pskel;
  class ValuationCollection_pskel;
  class ValuesByETC_pskel;
  class PropertyClassValuesCollection_pskel;
  class PropertyClassValues_pskel;
  class PropertyClassCode_pskel;
  class PropertySubClassCode_pskel;
  class Valuation_pskel;
  class FolioIntegerItem_pskel;
  class FolioBooleanItem_pskel;
  class FolioDecimalItem_pskel;
  class FolioDateItem_pskel;
  class UniqueID_pskel;
  class FolioUniqueIDItem_pskel;
  class LookupCode_pskel;
  class FolioLookupCodeItem_pskel;
  class String1_pskel;
  class FolioString1Item_pskel;
  class String255_pskel;
  class FolioString255Item_pskel;
  class String1024_pskel;
  class FolioString1024Item_pskel;
  class ActionCode_pskel;
}


#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_PARSER_USE_CHAR
#define XSD_CXX_PARSER_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>
#include <xsd/cxx/xml/error-handler.hxx>
#include <xsd/cxx/parser/exceptions.hxx>
#include <xsd/cxx/parser/elements.hxx>
#include <xsd/cxx/parser/xml-schema.hxx>
#include <xsd/cxx/parser/non-validating/parser.hxx>
#include <xsd/cxx/parser/non-validating/xml-schema-pskel.hxx>
#include <xsd/cxx/parser/non-validating/xml-schema-pimpl.hxx>
#include <xsd/cxx/parser/xerces/elements.hxx>

#include <memory>
#include "../parser/folioitem.h"
#include "../model/model.h"
#include "../model/folioaction.h"
#include "../model/deliverysummary.h"
#include "../model/dataadvice.h"
#include "../model/action.h"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  typedef ::xsd::cxx::parser::string_sequence< char > string_sequence;
  typedef ::xsd::cxx::parser::qname< char > qname;
  typedef ::xsd::cxx::parser::buffer buffer;
  typedef ::xsd::cxx::parser::time_zone time_zone;
  typedef ::xsd::cxx::parser::gday gday;
  typedef ::xsd::cxx::parser::gmonth gmonth;
  typedef ::xsd::cxx::parser::gyear gyear;
  typedef ::xsd::cxx::parser::gmonth_day gmonth_day;
  typedef ::xsd::cxx::parser::gyear_month gyear_month;
  typedef ::xsd::cxx::parser::date date;
  typedef ::xsd::cxx::parser::time time;
  typedef ::xsd::cxx::parser::date_time date_time;
  typedef ::xsd::cxx::parser::duration duration;

  // Base parser skeletons.
  //
  typedef ::xsd::cxx::parser::parser_base< char > parser_base;
  typedef ::xsd::cxx::parser::non_validating::empty_content< char > empty_content;
  typedef ::xsd::cxx::parser::non_validating::simple_content< char > simple_content;
  typedef ::xsd::cxx::parser::non_validating::complex_content< char > complex_content;
  typedef ::xsd::cxx::parser::non_validating::list_base< char > list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  typedef ::xsd::cxx::parser::non_validating::any_type_pskel< char > any_type_pskel;
  typedef ::xsd::cxx::parser::non_validating::any_type_pimpl< char > any_typeImpl;

  typedef ::xsd::cxx::parser::non_validating::any_simple_type_pskel< char > any_simple_type_pskel;
  typedef ::xsd::cxx::parser::non_validating::any_simple_type_pimpl< char > any_simple_typeImpl;

  typedef ::xsd::cxx::parser::non_validating::byte_pskel< char > byte_pskel;
  typedef ::xsd::cxx::parser::non_validating::byte_pimpl< char > byteImpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_byte_pskel< char > unsigned_byte_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_byte_pimpl< char > unsigned_byteImpl;

  typedef ::xsd::cxx::parser::non_validating::short_pskel< char > short_pskel;
  typedef ::xsd::cxx::parser::non_validating::short_pimpl< char > shortImpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_short_pskel< char > unsigned_short_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_short_pimpl< char > unsigned_shortImpl;

  typedef ::xsd::cxx::parser::non_validating::int_pskel< char > int_pskel;
  typedef ::xsd::cxx::parser::non_validating::int_pimpl< char > intImpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_int_pskel< char > unsigned_int_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_int_pimpl< char > unsigned_intImpl;

  typedef ::xsd::cxx::parser::non_validating::long_pskel< char > long_pskel;
  typedef ::xsd::cxx::parser::non_validating::long_pimpl< char > longImpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_long_pskel< char > unsigned_long_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_long_pimpl< char > unsigned_longImpl;

  typedef ::xsd::cxx::parser::non_validating::integer_pskel< char > integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::integer_pimpl< char > integerImpl;

  typedef ::xsd::cxx::parser::non_validating::non_positive_integer_pskel< char > non_positive_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::non_positive_integer_pimpl< char > non_positive_integerImpl;

  typedef ::xsd::cxx::parser::non_validating::non_negative_integer_pskel< char > non_negative_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::non_negative_integer_pimpl< char > non_negative_integerImpl;

  typedef ::xsd::cxx::parser::non_validating::positive_integer_pskel< char > positive_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::positive_integer_pimpl< char > positive_integerImpl;

  typedef ::xsd::cxx::parser::non_validating::negative_integer_pskel< char > negative_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::negative_integer_pimpl< char > negative_integerImpl;

  typedef ::xsd::cxx::parser::non_validating::boolean_pskel< char > boolean_pskel;
  typedef ::xsd::cxx::parser::non_validating::boolean_pimpl< char > booleanImpl;

  typedef ::xsd::cxx::parser::non_validating::float_pskel< char > float_pskel;
  typedef ::xsd::cxx::parser::non_validating::float_pimpl< char > floatImpl;

  typedef ::xsd::cxx::parser::non_validating::double_pskel< char > double_pskel;
  typedef ::xsd::cxx::parser::non_validating::double_pimpl< char > doubleImpl;

  typedef ::xsd::cxx::parser::non_validating::decimal_pskel< char > decimal_pskel;
  typedef ::xsd::cxx::parser::non_validating::decimal_pimpl< char > decimalImpl;

  typedef ::xsd::cxx::parser::non_validating::string_pskel< char > string_pskel;
  typedef ::xsd::cxx::parser::non_validating::string_pimpl< char > stringImpl;

  typedef ::xsd::cxx::parser::non_validating::normalized_string_pskel< char > normalized_string_pskel;
  typedef ::xsd::cxx::parser::non_validating::normalized_string_pimpl< char > normalized_stringImpl;

  typedef ::xsd::cxx::parser::non_validating::token_pskel< char > token_pskel;
  typedef ::xsd::cxx::parser::non_validating::token_pimpl< char > tokenImpl;

  typedef ::xsd::cxx::parser::non_validating::name_pskel< char > name_pskel;
  typedef ::xsd::cxx::parser::non_validating::name_pimpl< char > nameImpl;

  typedef ::xsd::cxx::parser::non_validating::nmtoken_pskel< char > nmtoken_pskel;
  typedef ::xsd::cxx::parser::non_validating::nmtoken_pimpl< char > nmtokenImpl;

  typedef ::xsd::cxx::parser::non_validating::nmtokens_pskel< char > nmtokens_pskel;
  typedef ::xsd::cxx::parser::non_validating::nmtokens_pimpl< char > nmtokensImpl;

  typedef ::xsd::cxx::parser::non_validating::ncname_pskel< char > ncname_pskel;
  typedef ::xsd::cxx::parser::non_validating::ncname_pimpl< char > ncnameImpl;

  typedef ::xsd::cxx::parser::non_validating::language_pskel< char > language_pskel;
  typedef ::xsd::cxx::parser::non_validating::language_pimpl< char > languageImpl;

  typedef ::xsd::cxx::parser::non_validating::id_pskel< char > id_pskel;
  typedef ::xsd::cxx::parser::non_validating::id_pimpl< char > idImpl;

  typedef ::xsd::cxx::parser::non_validating::idref_pskel< char > idref_pskel;
  typedef ::xsd::cxx::parser::non_validating::idref_pimpl< char > idrefImpl;

  typedef ::xsd::cxx::parser::non_validating::idrefs_pskel< char > idrefs_pskel;
  typedef ::xsd::cxx::parser::non_validating::idrefs_pimpl< char > idrefsImpl;

  typedef ::xsd::cxx::parser::non_validating::uri_pskel< char > uri_pskel;
  typedef ::xsd::cxx::parser::non_validating::uri_pimpl< char > uriImpl;

  typedef ::xsd::cxx::parser::non_validating::qname_pskel< char > qname_pskel;
  typedef ::xsd::cxx::parser::non_validating::qname_pimpl< char > qnameImpl;

  typedef ::xsd::cxx::parser::non_validating::base64_binary_pskel< char > base64_binary_pskel;
  typedef ::xsd::cxx::parser::non_validating::base64_binary_pimpl< char > base64_binaryImpl;

  typedef ::xsd::cxx::parser::non_validating::hex_binary_pskel< char > hex_binary_pskel;
  typedef ::xsd::cxx::parser::non_validating::hex_binary_pimpl< char > hex_binaryImpl;

  typedef ::xsd::cxx::parser::non_validating::date_pskel< char > date_pskel;
  typedef ::xsd::cxx::parser::non_validating::date_pimpl< char > dateImpl;

  typedef ::xsd::cxx::parser::non_validating::date_time_pskel< char > date_time_pskel;
  typedef ::xsd::cxx::parser::non_validating::date_time_pimpl< char > date_timeImpl;

  typedef ::xsd::cxx::parser::non_validating::duration_pskel< char > duration_pskel;
  typedef ::xsd::cxx::parser::non_validating::duration_pimpl< char > durationImpl;

  typedef ::xsd::cxx::parser::non_validating::gday_pskel< char > gday_pskel;
  typedef ::xsd::cxx::parser::non_validating::gday_pimpl< char > gdayImpl;

  typedef ::xsd::cxx::parser::non_validating::gmonth_pskel< char > gmonth_pskel;
  typedef ::xsd::cxx::parser::non_validating::gmonth_pimpl< char > gmonthImpl;

  typedef ::xsd::cxx::parser::non_validating::gmonth_day_pskel< char > gmonth_day_pskel;
  typedef ::xsd::cxx::parser::non_validating::gmonth_day_pimpl< char > gmonth_dayImpl;

  typedef ::xsd::cxx::parser::non_validating::gyear_pskel< char > gyear_pskel;
  typedef ::xsd::cxx::parser::non_validating::gyear_pimpl< char > gyearImpl;

  typedef ::xsd::cxx::parser::non_validating::gyear_month_pskel< char > gyear_month_pskel;
  typedef ::xsd::cxx::parser::non_validating::gyear_month_pimpl< char > gyear_monthImpl;

  typedef ::xsd::cxx::parser::non_validating::time_pskel< char > time_pskel;
  typedef ::xsd::cxx::parser::non_validating::time_pimpl< char > timeImpl;

  // Exceptions. See libxsd/xsd/cxx/parser/exceptions.hxx for details.
  //
  typedef ::xsd::cxx::parser::exception< char > exception;

  // Parsing diagnostics.
  //
  typedef ::xsd::cxx::parser::severity severity;
  typedef ::xsd::cxx::parser::error< char > error;
  typedef ::xsd::cxx::parser::diagnostics< char > diagnostics;
  typedef ::xsd::cxx::parser::parsing< char > parsing;

  // Error handler. See libxsd/xsd/cxx/xml/error-handler.hxx for details.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // Read-only string.
  //
  typedef ::xsd::cxx::ro_string< char > ro_string;

  // Parsing flags. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::flags flags;

  // Parsing properties. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::properties< char > properties;

  // Document type. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::document< char > document;
}

namespace dataadvice
{
  class DataAdvice_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    RollYear (long long);

    virtual void
    OwnershipYear (long long);

    virtual void
    RunType (const QString&);

    virtual void
    StartDate (const ::xml_schema::date&);

    virtual void
    EndDate (const ::xml_schema::date&);

    virtual void
    AssessmentAreas ();

    virtual void
    ReportSummary (std::unique_ptr<model::DeliverySummary>&);

    virtual void
    Version (const QString&);

    virtual void
    RequestID (const QString&);

    virtual void
    OrderID (const QString&);

    virtual void
    RunDate (const ::xml_schema::date&);

    virtual std::unique_ptr<model::DataAdvice>
    post_DataAdvice () = 0;

    // Parser construction API.
    //
    void
    RollYear_parser (::xml_schema::integer_pskel&);

    void
    OwnershipYear_parser (::xml_schema::integer_pskel&);

    void
    RunType_parser (::dataadvice::RunType_pskel&);

    void
    StartDate_parser (::xml_schema::date_pskel&);

    void
    EndDate_parser (::xml_schema::date_pskel&);

    void
    AssessmentAreas_parser (::dataadvice::AssessmentAreaCollection_pskel&);

    void
    ReportSummary_parser (::dataadvice::DeliverySummary_pskel&);

    void
    Version_parser (::dataadvice::Version_pskel&);

    void
    RequestID_parser (::dataadvice::UniqueID_pskel&);

    void
    OrderID_parser (::dataadvice::UniqueID_pskel&);

    void
    RunDate_parser (::xml_schema::date_pskel&);

    void
    parsers (::xml_schema::integer_pskel& /* RollYear */,
             ::xml_schema::integer_pskel& /* OwnershipYear */,
             ::dataadvice::RunType_pskel& /* RunType */,
             ::xml_schema::date_pskel& /* StartDate */,
             ::xml_schema::date_pskel& /* EndDate */,
             ::dataadvice::AssessmentAreaCollection_pskel& /* AssessmentAreas */,
             ::dataadvice::DeliverySummary_pskel& /* ReportSummary */,
             ::dataadvice::Version_pskel& /* Version */,
             ::dataadvice::UniqueID_pskel& /* RequestID */,
             ::dataadvice::UniqueID_pskel& /* OrderID */,
             ::xml_schema::date_pskel& /* RunDate */);

    // Constructor.
    //
    DataAdvice_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::integer_pskel* RollYear_parser_;
    ::xml_schema::integer_pskel* OwnershipYear_parser_;
    ::dataadvice::RunType_pskel* RunType_parser_;
    ::xml_schema::date_pskel* StartDate_parser_;
    ::xml_schema::date_pskel* EndDate_parser_;
    ::dataadvice::AssessmentAreaCollection_pskel* AssessmentAreas_parser_;
    ::dataadvice::DeliverySummary_pskel* ReportSummary_parser_;
    ::dataadvice::Version_pskel* Version_parser_;
    ::dataadvice::UniqueID_pskel* RequestID_parser_;
    ::dataadvice::UniqueID_pskel* OrderID_parser_;
    ::xml_schema::date_pskel* RunDate_parser_;
  };

  class Version_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual QString
    post_Version () = 0;
  };

  class RunType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual QString
    post_RunType () = 0;
  };

  class DeliverySummary_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    TotalFolioCount (long long);

    virtual void
    TaxableFolioCount (long long);

    virtual void
    TaxExemptFolioCount (long long);

    virtual void
    TotalGrossValues ();

    virtual void
    TotalTaxExemptValues ();

    virtual void
    TotalNetValues ();

    virtual void
    GeneralValues (std::vector<std::unique_ptr<model::PropertyClassValue>>&);

    virtual void
    BCTransitValues (std::vector<std::unique_ptr<model::PropertyClassValue>>&);

    virtual void
    SchoolValues (std::vector<std::unique_ptr<model::PropertyClassValue>>&);

    virtual void
    AmendmentReasonCounts ();

    virtual void
    DeleteReasonCounts ();

    virtual std::unique_ptr<model::DeliverySummary>
    post_DeliverySummary () = 0;

    // Parser construction API.
    //
    void
    TotalFolioCount_parser (::xml_schema::integer_pskel&);

    void
    TaxableFolioCount_parser (::xml_schema::integer_pskel&);

    void
    TaxExemptFolioCount_parser (::xml_schema::integer_pskel&);

    void
    TotalGrossValues_parser (::dataadvice::FolioGroupValues_pskel&);

    void
    TotalTaxExemptValues_parser (::dataadvice::FolioGroupValues_pskel&);

    void
    TotalNetValues_parser (::dataadvice::FolioGroupValues_pskel&);

    void
    GeneralValues_parser (::dataadvice::PropertyClassValuesCollection_pskel&);

    void
    BCTransitValues_parser (::dataadvice::PropertyClassValuesCollection_pskel&);

    void
    SchoolValues_parser (::dataadvice::PropertyClassValuesCollection_pskel&);

    void
    AmendmentReasonCounts_parser (::dataadvice::AmendmentReasonCountCollection_pskel&);

    void
    DeleteReasonCounts_parser (::dataadvice::DeleteReasonCountCollection_pskel&);

    void
    parsers (::xml_schema::integer_pskel& /* TotalFolioCount */,
             ::xml_schema::integer_pskel& /* TaxableFolioCount */,
             ::xml_schema::integer_pskel& /* TaxExemptFolioCount */,
             ::dataadvice::FolioGroupValues_pskel& /* TotalGrossValues */,
             ::dataadvice::FolioGroupValues_pskel& /* TotalTaxExemptValues */,
             ::dataadvice::FolioGroupValues_pskel& /* TotalNetValues */,
             ::dataadvice::PropertyClassValuesCollection_pskel& /* GeneralValues */,
             ::dataadvice::PropertyClassValuesCollection_pskel& /* BCTransitValues */,
             ::dataadvice::PropertyClassValuesCollection_pskel& /* SchoolValues */,
             ::dataadvice::AmendmentReasonCountCollection_pskel& /* AmendmentReasonCounts */,
             ::dataadvice::DeleteReasonCountCollection_pskel& /* DeleteReasonCounts */);

    // Constructor.
    //
    DeliverySummary_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::integer_pskel* TotalFolioCount_parser_;
    ::xml_schema::integer_pskel* TaxableFolioCount_parser_;
    ::xml_schema::integer_pskel* TaxExemptFolioCount_parser_;
    ::dataadvice::FolioGroupValues_pskel* TotalGrossValues_parser_;
    ::dataadvice::FolioGroupValues_pskel* TotalTaxExemptValues_parser_;
    ::dataadvice::FolioGroupValues_pskel* TotalNetValues_parser_;
    ::dataadvice::PropertyClassValuesCollection_pskel* GeneralValues_parser_;
    ::dataadvice::PropertyClassValuesCollection_pskel* BCTransitValues_parser_;
    ::dataadvice::PropertyClassValuesCollection_pskel* SchoolValues_parser_;
    ::dataadvice::AmendmentReasonCountCollection_pskel* AmendmentReasonCounts_parser_;
    ::dataadvice::DeleteReasonCountCollection_pskel* DeleteReasonCounts_parser_;
  };

  class AmendmentReasonCountCollection_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    AmendmentReasonCount ();

    virtual void
    post_AmendmentReasonCountCollection ();

    // Parser construction API.
    //
    void
    AmendmentReasonCount_parser (::dataadvice::AmendmentReasonCount_pskel&);

    void
    parsers (::dataadvice::AmendmentReasonCount_pskel& /* AmendmentReasonCount */);

    // Constructor.
    //
    AmendmentReasonCountCollection_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::AmendmentReasonCount_pskel* AmendmentReasonCount_parser_;
  };

  class AmendmentReasonCount_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    AmendmentReasonCode (const QString&);

    virtual void
    AmendmentReasonDescription (const QString&);

    virtual void
    FolioCount (long long);

    virtual void
    post_AmendmentReasonCount ();

    // Parser construction API.
    //
    void
    AmendmentReasonCode_parser (::dataadvice::LookupCode_pskel&);

    void
    AmendmentReasonDescription_parser (::dataadvice::String255_pskel&);

    void
    FolioCount_parser (::xml_schema::integer_pskel&);

    void
    parsers (::dataadvice::LookupCode_pskel& /* AmendmentReasonCode */,
             ::dataadvice::String255_pskel& /* AmendmentReasonDescription */,
             ::xml_schema::integer_pskel& /* FolioCount */);

    // Constructor.
    //
    AmendmentReasonCount_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::LookupCode_pskel* AmendmentReasonCode_parser_;
    ::dataadvice::String255_pskel* AmendmentReasonDescription_parser_;
    ::xml_schema::integer_pskel* FolioCount_parser_;
  };

  class DeleteReasonCountCollection_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    DeleteReasonCount ();

    virtual void
    post_DeleteReasonCountCollection ();

    // Parser construction API.
    //
    void
    DeleteReasonCount_parser (::dataadvice::DeleteReasonCount_pskel&);

    void
    parsers (::dataadvice::DeleteReasonCount_pskel& /* DeleteReasonCount */);

    // Constructor.
    //
    DeleteReasonCountCollection_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::DeleteReasonCount_pskel* DeleteReasonCount_parser_;
  };

  class DeleteReasonCount_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    DeleteReasonCode (const QString&);

    virtual void
    DeleteReasonDescription (const QString&);

    virtual void
    FolioCount (long long);

    virtual void
    post_DeleteReasonCount ();

    // Parser construction API.
    //
    void
    DeleteReasonCode_parser (::dataadvice::LookupCode_pskel&);

    void
    DeleteReasonDescription_parser (::dataadvice::String255_pskel&);

    void
    FolioCount_parser (::xml_schema::integer_pskel&);

    void
    parsers (::dataadvice::LookupCode_pskel& /* DeleteReasonCode */,
             ::dataadvice::String255_pskel& /* DeleteReasonDescription */,
             ::xml_schema::integer_pskel& /* FolioCount */);

    // Constructor.
    //
    DeleteReasonCount_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::LookupCode_pskel* DeleteReasonCode_parser_;
    ::dataadvice::String255_pskel* DeleteReasonDescription_parser_;
    ::xml_schema::integer_pskel* FolioCount_parser_;
  };

  class AssessmentAreaCollection_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    AssessmentArea ();

    virtual void
    post_AssessmentAreaCollection ();

    // Parser construction API.
    //
    void
    AssessmentArea_parser (::dataadvice::AssessmentArea_pskel&);

    void
    parsers (::dataadvice::AssessmentArea_pskel& /* AssessmentArea */);

    // Constructor.
    //
    AssessmentAreaCollection_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::AssessmentArea_pskel* AssessmentArea_parser_;
  };

  class AssessmentArea_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    AssessmentAreaCode (const QString&);

    virtual void
    AssessmentAreaDescription (const QString&);

    virtual void
    Jurisdictions ();

    virtual void
    AreaSummary (std::unique_ptr<model::DeliverySummary>&);

    virtual void
    post_AssessmentArea ();

    // Parser construction API.
    //
    void
    AssessmentAreaCode_parser (::dataadvice::AssessmentAreaCode_pskel&);

    void
    AssessmentAreaDescription_parser (::dataadvice::String255_pskel&);

    void
    Jurisdictions_parser (::dataadvice::JurisdictionCollection_pskel&);

    void
    AreaSummary_parser (::dataadvice::DeliverySummary_pskel&);

    void
    parsers (::dataadvice::AssessmentAreaCode_pskel& /* AssessmentAreaCode */,
             ::dataadvice::String255_pskel& /* AssessmentAreaDescription */,
             ::dataadvice::JurisdictionCollection_pskel& /* Jurisdictions */,
             ::dataadvice::DeliverySummary_pskel& /* AreaSummary */);

    // Constructor.
    //
    AssessmentArea_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::AssessmentAreaCode_pskel* AssessmentAreaCode_parser_;
    ::dataadvice::String255_pskel* AssessmentAreaDescription_parser_;
    ::dataadvice::JurisdictionCollection_pskel* Jurisdictions_parser_;
    ::dataadvice::DeliverySummary_pskel* AreaSummary_parser_;
  };

  class AssessmentAreaCode_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual QString
    post_AssessmentAreaCode () = 0;
  };

  class JurisdictionCollection_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Jurisdiction ();

    virtual void
    post_JurisdictionCollection ();

    // Parser construction API.
    //
    void
    Jurisdiction_parser (::dataadvice::Jurisdiction_pskel&);

    void
    parsers (::dataadvice::Jurisdiction_pskel& /* Jurisdiction */);

    // Constructor.
    //
    JurisdictionCollection_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::Jurisdiction_pskel* Jurisdiction_parser_;
  };

  class Jurisdiction_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    JurisdictionCode (const QString&);

    virtual void
    JurisdictionDescription (const QString&);

    virtual void
    FolioRecords (std::vector<std::unique_ptr<model::Folio>>&);

    virtual void
    JurisdictionSummary (std::unique_ptr<model::DeliverySummary>&);

    virtual void
    post_Jurisdiction ();

    // Parser construction API.
    //
    void
    JurisdictionCode_parser (::dataadvice::JurisdictionCode_pskel&);

    void
    JurisdictionDescription_parser (::dataadvice::String255_pskel&);

    void
    FolioRecords_parser (::dataadvice::FolioRecordCollection_pskel&);

    void
    JurisdictionSummary_parser (::dataadvice::DeliverySummary_pskel&);

    void
    parsers (::dataadvice::JurisdictionCode_pskel& /* JurisdictionCode */,
             ::dataadvice::String255_pskel& /* JurisdictionDescription */,
             ::dataadvice::FolioRecordCollection_pskel& /* FolioRecords */,
             ::dataadvice::DeliverySummary_pskel& /* JurisdictionSummary */);

    // Constructor.
    //
    Jurisdiction_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::JurisdictionCode_pskel* JurisdictionCode_parser_;
    ::dataadvice::String255_pskel* JurisdictionDescription_parser_;
    ::dataadvice::FolioRecordCollection_pskel* FolioRecords_parser_;
    ::dataadvice::DeliverySummary_pskel* JurisdictionSummary_parser_;
  };

  class JurisdictionCode_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual QString
    post_JurisdictionCode () = 0;
  };

  class FolioGroupValues_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    LandValue (double);

    virtual void
    ImprovementValue (double);

    virtual void
    post_FolioGroupValues ();

    // Parser construction API.
    //
    void
    LandValue_parser (::xml_schema::decimal_pskel&);

    void
    ImprovementValue_parser (::xml_schema::decimal_pskel&);

    void
    parsers (::xml_schema::decimal_pskel& /* LandValue */,
             ::xml_schema::decimal_pskel& /* ImprovementValue */);

    // Constructor.
    //
    FolioGroupValues_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::decimal_pskel* LandValue_parser_;
    ::xml_schema::decimal_pskel* ImprovementValue_parser_;
  };

  class FolioRecordCollection_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    FolioRecord (std::unique_ptr<model::Folio>&);

    virtual std::vector<std::unique_ptr<model::Folio>>
    post_FolioRecordCollection () = 0;

    // Parser construction API.
    //
    void
    FolioRecord_parser (::dataadvice::FolioRecord_pskel&);

    void
    parsers (::dataadvice::FolioRecord_pskel& /* FolioRecord */);

    // Constructor.
    //
    FolioRecordCollection_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::FolioRecord_pskel* FolioRecord_parser_;
  };

  class FolioRecord_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    RollNumber (const model::StringItem&);

    virtual void
    FolioStatus (const model::StringItem&);

    virtual void
    FolioStatusDescription (const model::StringItem&);

    virtual void
    FolioAction (std::unique_ptr<model::FolioAction>&);

    virtual void
    FolioAddresses (std::vector<std::unique_ptr<model::FolioAddress>>&);

    virtual void
    OwnershipGroups (std::vector<std::unique_ptr<model::OwnershipGroup>>&);

    virtual void
    LegalDescriptions (std::vector<std::unique_ptr<model::LegalDescription>>&);

    virtual void
    FolioDescription (std::unique_ptr<model::FolioDescription>&);

    virtual void
    Sales (std::vector<std::unique_ptr<model::Sale>>&);

    virtual void
    Values (std::unique_ptr<model::PropertyValues>&);

    virtual void
    Amendments ();

    virtual void
    MinorTaxing (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&);

    virtual void
    Farms (std::vector<std::unique_ptr<model::Farm>>&);

    virtual void
    ManufacturedHomes (std::vector<std::unique_ptr<model::ManufacturedHome>>&);

    virtual void
    ManagedForests (std::vector<std::unique_ptr<model::ManagedForest>>&);

    virtual void
    OilAndGas (std::vector<std::unique_ptr<model::OilAndGas>>&);

    virtual void
    LandCharacteristics (std::vector<std::unique_ptr<model::LandCharacteristic>>&);

    virtual void
    ID (const QString&);

    virtual std::unique_ptr<model::Folio>
    post_FolioRecord () = 0;

    // Parser construction API.
    //
    void
    RollNumber_parser (::dataadvice::FolioRollNumber_pskel&);

    void
    FolioStatus_parser (::dataadvice::FolioLookupCodeItem_pskel&);

    void
    FolioStatusDescription_parser (::dataadvice::FolioString255Item_pskel&);

    void
    FolioAction_parser (::dataadvice::FolioAction_pskel&);

    void
    FolioAddresses_parser (::dataadvice::FolioAddressCollection_pskel&);

    void
    OwnershipGroups_parser (::dataadvice::OwnershipGroupCollection_pskel&);

    void
    LegalDescriptions_parser (::dataadvice::LegalDescriptionCollection_pskel&);

    void
    FolioDescription_parser (::dataadvice::FolioDescription_pskel&);

    void
    Sales_parser (::dataadvice::SaleCollection_pskel&);

    void
    Values_parser (::dataadvice::PropertyValues_pskel&);

    void
    Amendments_parser (::dataadvice::FolioAmendmentCollection_pskel&);

    void
    MinorTaxing_parser (::dataadvice::MinorTaxing_pskel&);

    void
    Farms_parser (::dataadvice::FarmCollection_pskel&);

    void
    ManufacturedHomes_parser (::dataadvice::ManufacturedHomeCollection_pskel&);

    void
    ManagedForests_parser (::dataadvice::ManagedForestCollection_pskel&);

    void
    OilAndGas_parser (::dataadvice::OilAndGasCollection_pskel&);

    void
    LandCharacteristics_parser (::dataadvice::LandCharacteristicCollection_pskel&);

    void
    ID_parser (::dataadvice::UniqueID_pskel&);

    void
    parsers (::dataadvice::FolioRollNumber_pskel& /* RollNumber */,
             ::dataadvice::FolioLookupCodeItem_pskel& /* FolioStatus */,
             ::dataadvice::FolioString255Item_pskel& /* FolioStatusDescription */,
             ::dataadvice::FolioAction_pskel& /* FolioAction */,
             ::dataadvice::FolioAddressCollection_pskel& /* FolioAddresses */,
             ::dataadvice::OwnershipGroupCollection_pskel& /* OwnershipGroups */,
             ::dataadvice::LegalDescriptionCollection_pskel& /* LegalDescriptions */,
             ::dataadvice::FolioDescription_pskel& /* FolioDescription */,
             ::dataadvice::SaleCollection_pskel& /* Sales */,
             ::dataadvice::PropertyValues_pskel& /* Values */,
             ::dataadvice::FolioAmendmentCollection_pskel& /* Amendments */,
             ::dataadvice::MinorTaxing_pskel& /* MinorTaxing */,
             ::dataadvice::FarmCollection_pskel& /* Farms */,
             ::dataadvice::ManufacturedHomeCollection_pskel& /* ManufacturedHomes */,
             ::dataadvice::ManagedForestCollection_pskel& /* ManagedForests */,
             ::dataadvice::OilAndGasCollection_pskel& /* OilAndGas */,
             ::dataadvice::LandCharacteristicCollection_pskel& /* LandCharacteristics */,
             ::dataadvice::UniqueID_pskel& /* ID */);

    // Constructor.
    //
    FolioRecord_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::FolioRollNumber_pskel* RollNumber_parser_;
    ::dataadvice::FolioLookupCodeItem_pskel* FolioStatus_parser_;
    ::dataadvice::FolioString255Item_pskel* FolioStatusDescription_parser_;
    ::dataadvice::FolioAction_pskel* FolioAction_parser_;
    ::dataadvice::FolioAddressCollection_pskel* FolioAddresses_parser_;
    ::dataadvice::OwnershipGroupCollection_pskel* OwnershipGroups_parser_;
    ::dataadvice::LegalDescriptionCollection_pskel* LegalDescriptions_parser_;
    ::dataadvice::FolioDescription_pskel* FolioDescription_parser_;
    ::dataadvice::SaleCollection_pskel* Sales_parser_;
    ::dataadvice::PropertyValues_pskel* Values_parser_;
    ::dataadvice::FolioAmendmentCollection_pskel* Amendments_parser_;
    ::dataadvice::MinorTaxing_pskel* MinorTaxing_parser_;
    ::dataadvice::FarmCollection_pskel* Farms_parser_;
    ::dataadvice::ManufacturedHomeCollection_pskel* ManufacturedHomes_parser_;
    ::dataadvice::ManagedForestCollection_pskel* ManagedForests_parser_;
    ::dataadvice::OilAndGasCollection_pskel* OilAndGas_parser_;
    ::dataadvice::LandCharacteristicCollection_pskel* LandCharacteristics_parser_;
    ::dataadvice::UniqueID_pskel* ID_parser_;
  };

  class String32_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual QString
    post_String32 () = 0;
  };

  class FolioRollNumber_pskel: public virtual ::dataadvice::String32_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Action (const model::ActionCode::Code&);

    virtual void
    OldValue (const QString&);

    virtual model::StringItem
    post_FolioRollNumber () = 0;

    // Parser construction API.
    //
    void
    Action_parser (::dataadvice::ActionCode_pskel&);

    void
    OldValue_parser (::dataadvice::String32_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::String32_pskel& /* OldValue */);

    // Constructor.
    //
    FolioRollNumber_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::ActionCode_pskel* Action_parser_;
    ::dataadvice::String32_pskel* OldValue_parser_;
  };

  class FolioAction_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    FolioAdd (model::FolioAction&);

    virtual void
    FolioDelete (model::FolioAction&);

    virtual std::unique_ptr<model::FolioAction>
    post_FolioAction () = 0;

    // Parser construction API.
    //
    void
    FolioAdd_parser (::dataadvice::FolioAdd_pskel&);

    void
    FolioDelete_parser (::dataadvice::FolioDelete_pskel&);

    void
    parsers (::dataadvice::FolioAdd_pskel& /* FolioAdd */,
             ::dataadvice::FolioDelete_pskel& /* FolioDelete */);

    // Constructor.
    //
    FolioAction_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::FolioAdd_pskel* FolioAdd_parser_;
    ::dataadvice::FolioDelete_pskel* FolioDelete_parser_;
  };

  class FolioAdd_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    FolioRenumber (const model::FolioRenumber&);

    virtual model::FolioAction
    post_FolioAdd () = 0;

    // Parser construction API.
    //
    void
    FolioRenumber_parser (::dataadvice::FolioRenumber_pskel&);

    void
    parsers (::dataadvice::FolioRenumber_pskel& /* FolioRenumber */);

    // Constructor.
    //
    FolioAdd_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::FolioRenumber_pskel* FolioRenumber_parser_;
  };

  class FolioDelete_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    FolioRenumber (const model::FolioRenumber&);

    virtual void
    DeleteReasonCode (const QString&);

    virtual void
    DeleteReasonDescription (const QString&);

    virtual model::FolioAction
    post_FolioDelete () = 0;

    // Parser construction API.
    //
    void
    FolioRenumber_parser (::dataadvice::FolioRenumber_pskel&);

    void
    DeleteReasonCode_parser (::dataadvice::LookupCode_pskel&);

    void
    DeleteReasonDescription_parser (::dataadvice::String255_pskel&);

    void
    parsers (::dataadvice::FolioRenumber_pskel& /* FolioRenumber */,
             ::dataadvice::LookupCode_pskel& /* DeleteReasonCode */,
             ::dataadvice::String255_pskel& /* DeleteReasonDescription */);

    // Constructor.
    //
    FolioDelete_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::FolioRenumber_pskel* FolioRenumber_parser_;
    ::dataadvice::LookupCode_pskel* DeleteReasonCode_parser_;
    ::dataadvice::String255_pskel* DeleteReasonDescription_parser_;
  };

  class FolioRenumber_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    AssessmentAreaCode (const QString&);

    virtual void
    AssessmentAreaDescription (const QString&);

    virtual void
    JurisdictionCode (const QString&);

    virtual void
    JurisdictionDescription (const QString&);

    virtual void
    RollNumber (const QString&);

    virtual model::FolioRenumber
    post_FolioRenumber () = 0;

    // Parser construction API.
    //
    void
    AssessmentAreaCode_parser (::dataadvice::AssessmentAreaCode_pskel&);

    void
    AssessmentAreaDescription_parser (::dataadvice::String255_pskel&);

    void
    JurisdictionCode_parser (::dataadvice::JurisdictionCode_pskel&);

    void
    JurisdictionDescription_parser (::dataadvice::String255_pskel&);

    void
    RollNumber_parser (::dataadvice::String32_pskel&);

    void
    parsers (::dataadvice::AssessmentAreaCode_pskel& /* AssessmentAreaCode */,
             ::dataadvice::String255_pskel& /* AssessmentAreaDescription */,
             ::dataadvice::JurisdictionCode_pskel& /* JurisdictionCode */,
             ::dataadvice::String255_pskel& /* JurisdictionDescription */,
             ::dataadvice::String32_pskel& /* RollNumber */);

    // Constructor.
    //
    FolioRenumber_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::AssessmentAreaCode_pskel* AssessmentAreaCode_parser_;
    ::dataadvice::String255_pskel* AssessmentAreaDescription_parser_;
    ::dataadvice::JurisdictionCode_pskel* JurisdictionCode_parser_;
    ::dataadvice::String255_pskel* JurisdictionDescription_parser_;
    ::dataadvice::String32_pskel* RollNumber_parser_;
  };

  class FolioItemGroup_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Action (const model::ActionCode::Code&);

    virtual model::ActionCode::Code
    post_FolioItemGroup () = 0;

    // Parser construction API.
    //
    void
    Action_parser (::dataadvice::ActionCode_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */);

    // Constructor.
    //
    FolioItemGroup_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::ActionCode_pskel* Action_parser_;
  };

  class FolioAddressCollection_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    FolioAddress (std::unique_ptr<model::FolioAddress>&);

    virtual std::vector<std::unique_ptr<model::FolioAddress>>
    post_FolioAddressCollection () = 0;

    // Parser construction API.
    //
    void
    FolioAddress_parser (::dataadvice::FolioAddress_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::FolioAddress_pskel& /* FolioAddress */);

    // Constructor.
    //
    FolioAddressCollection_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::FolioAddress_pskel* FolioAddress_parser_;
  };

  class FolioAddress_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    PrimaryFlag (const model::BooleanItem&);

    virtual void
    UnitNumber (const model::StringItem&);

    virtual void
    StreetNumber (const model::StringItem&);

    virtual void
    StreetDirectionPrefix (const model::StringItem&);

    virtual void
    StreetName (const model::StringItem&);

    virtual void
    StreetType (const model::StringItem&);

    virtual void
    StreetDirectionSuffix (const model::StringItem&);

    virtual void
    City (const model::StringItem&);

    virtual void
    ProvinceState (const model::StringItem&);

    virtual void
    PostalZip (const model::StringItem&);

    virtual void
    MapReferenceNumber (const model::StringItem&);

    virtual void
    ID (const QString&);

    virtual std::unique_ptr<model::FolioAddress>
    post_FolioAddress () = 0;

    // Parser construction API.
    //
    void
    PrimaryFlag_parser (::dataadvice::FolioBooleanItem_pskel&);

    void
    UnitNumber_parser (::dataadvice::FolioString255Item_pskel&);

    void
    StreetNumber_parser (::dataadvice::FolioString255Item_pskel&);

    void
    StreetDirectionPrefix_parser (::dataadvice::FolioString255Item_pskel&);

    void
    StreetName_parser (::dataadvice::FolioString255Item_pskel&);

    void
    StreetType_parser (::dataadvice::FolioString255Item_pskel&);

    void
    StreetDirectionSuffix_parser (::dataadvice::FolioString255Item_pskel&);

    void
    City_parser (::dataadvice::FolioString255Item_pskel&);

    void
    ProvinceState_parser (::dataadvice::FolioString255Item_pskel&);

    void
    PostalZip_parser (::dataadvice::FolioString255Item_pskel&);

    void
    MapReferenceNumber_parser (::dataadvice::FolioString255Item_pskel&);

    void
    ID_parser (::dataadvice::UniqueID_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::FolioBooleanItem_pskel& /* PrimaryFlag */,
             ::dataadvice::FolioString255Item_pskel& /* UnitNumber */,
             ::dataadvice::FolioString255Item_pskel& /* StreetNumber */,
             ::dataadvice::FolioString255Item_pskel& /* StreetDirectionPrefix */,
             ::dataadvice::FolioString255Item_pskel& /* StreetName */,
             ::dataadvice::FolioString255Item_pskel& /* StreetType */,
             ::dataadvice::FolioString255Item_pskel& /* StreetDirectionSuffix */,
             ::dataadvice::FolioString255Item_pskel& /* City */,
             ::dataadvice::FolioString255Item_pskel& /* ProvinceState */,
             ::dataadvice::FolioString255Item_pskel& /* PostalZip */,
             ::dataadvice::FolioString255Item_pskel& /* MapReferenceNumber */,
             ::dataadvice::UniqueID_pskel& /* ID */);

    // Constructor.
    //
    FolioAddress_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::FolioBooleanItem_pskel* PrimaryFlag_parser_;
    ::dataadvice::FolioString255Item_pskel* UnitNumber_parser_;
    ::dataadvice::FolioString255Item_pskel* StreetNumber_parser_;
    ::dataadvice::FolioString255Item_pskel* StreetDirectionPrefix_parser_;
    ::dataadvice::FolioString255Item_pskel* StreetName_parser_;
    ::dataadvice::FolioString255Item_pskel* StreetType_parser_;
    ::dataadvice::FolioString255Item_pskel* StreetDirectionSuffix_parser_;
    ::dataadvice::FolioString255Item_pskel* City_parser_;
    ::dataadvice::FolioString255Item_pskel* ProvinceState_parser_;
    ::dataadvice::FolioString255Item_pskel* PostalZip_parser_;
    ::dataadvice::FolioString255Item_pskel* MapReferenceNumber_parser_;
    ::dataadvice::UniqueID_pskel* ID_parser_;
  };

  class OwnershipGroupCollection_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    OwnershipGroup (std::unique_ptr<model::OwnershipGroup>&);

    virtual std::vector<std::unique_ptr<model::OwnershipGroup>>
    post_OwnershipGroupCollection () = 0;

    // Parser construction API.
    //
    void
    OwnershipGroup_parser (::dataadvice::OwnershipGroup_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::OwnershipGroup_pskel& /* OwnershipGroup */);

    // Constructor.
    //
    OwnershipGroupCollection_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::OwnershipGroup_pskel* OwnershipGroup_parser_;
  };

  class OwnershipGroup_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    OwnershipGroupID (const model::StringItem&);

    virtual void
    AssessmentNoticeReturned (const model::BooleanItem&);

    virtual void
    AssessmentNoticeSuppressed (const model::BooleanItem&);

    virtual void
    ChangeType (const model::StringItem&);

    virtual void
    ChangeTypeDescription (const model::StringItem&);

    virtual void
    ChangeDate (const model::DateItem&);

    virtual void
    ChangeSource (const model::StringItem&);

    virtual void
    ChangeSourceDescription (const model::StringItem&);

    virtual void
    Owners (std::vector<std::unique_ptr<model::Owner>>&);

    virtual void
    FormattedMailingAddress (std::unique_ptr<model::FormattedMailingAddress>&);

    virtual void
    MailingAddress (std::unique_ptr<model::MailingAddress>&);

    virtual std::unique_ptr<model::OwnershipGroup>
    post_OwnershipGroup () = 0;

    // Parser construction API.
    //
    void
    OwnershipGroupID_parser (::dataadvice::FolioUniqueIDItem_pskel&);

    void
    AssessmentNoticeReturned_parser (::dataadvice::FolioBooleanItem_pskel&);

    void
    AssessmentNoticeSuppressed_parser (::dataadvice::FolioBooleanItem_pskel&);

    void
    ChangeType_parser (::dataadvice::FolioLookupCodeItem_pskel&);

    void
    ChangeTypeDescription_parser (::dataadvice::FolioString255Item_pskel&);

    void
    ChangeDate_parser (::dataadvice::FolioDateItem_pskel&);

    void
    ChangeSource_parser (::dataadvice::FolioLookupCodeItem_pskel&);

    void
    ChangeSourceDescription_parser (::dataadvice::FolioString255Item_pskel&);

    void
    Owners_parser (::dataadvice::OwnerCollection_pskel&);

    void
    FormattedMailingAddress_parser (::dataadvice::FormattedMailingAddress_pskel&);

    void
    MailingAddress_parser (::dataadvice::MailingAddress_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::FolioUniqueIDItem_pskel& /* OwnershipGroupID */,
             ::dataadvice::FolioBooleanItem_pskel& /* AssessmentNoticeReturned */,
             ::dataadvice::FolioBooleanItem_pskel& /* AssessmentNoticeSuppressed */,
             ::dataadvice::FolioLookupCodeItem_pskel& /* ChangeType */,
             ::dataadvice::FolioString255Item_pskel& /* ChangeTypeDescription */,
             ::dataadvice::FolioDateItem_pskel& /* ChangeDate */,
             ::dataadvice::FolioLookupCodeItem_pskel& /* ChangeSource */,
             ::dataadvice::FolioString255Item_pskel& /* ChangeSourceDescription */,
             ::dataadvice::OwnerCollection_pskel& /* Owners */,
             ::dataadvice::FormattedMailingAddress_pskel& /* FormattedMailingAddress */,
             ::dataadvice::MailingAddress_pskel& /* MailingAddress */);

    // Constructor.
    //
    OwnershipGroup_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::FolioUniqueIDItem_pskel* OwnershipGroupID_parser_;
    ::dataadvice::FolioBooleanItem_pskel* AssessmentNoticeReturned_parser_;
    ::dataadvice::FolioBooleanItem_pskel* AssessmentNoticeSuppressed_parser_;
    ::dataadvice::FolioLookupCodeItem_pskel* ChangeType_parser_;
    ::dataadvice::FolioString255Item_pskel* ChangeTypeDescription_parser_;
    ::dataadvice::FolioDateItem_pskel* ChangeDate_parser_;
    ::dataadvice::FolioLookupCodeItem_pskel* ChangeSource_parser_;
    ::dataadvice::FolioString255Item_pskel* ChangeSourceDescription_parser_;
    ::dataadvice::OwnerCollection_pskel* Owners_parser_;
    ::dataadvice::FormattedMailingAddress_pskel* FormattedMailingAddress_parser_;
    ::dataadvice::MailingAddress_pskel* MailingAddress_parser_;
  };

  class OwnerCollection_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Owner (std::unique_ptr<model::Owner>&);

    virtual std::vector<std::unique_ptr<model::Owner>>
    post_OwnerCollection () = 0;

    // Parser construction API.
    //
    void
    Owner_parser (::dataadvice::Owner_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::Owner_pskel& /* Owner */);

    // Constructor.
    //
    OwnerCollection_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::Owner_pskel* Owner_parser_;
  };

  class Owner_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    FirstName (const model::StringItem&);

    virtual void
    MiddleName (const model::StringItem&);

    virtual void
    MiddleInitial (const model::StringItem&);

    virtual void
    CompanyOrLastName (const model::StringItem&);

    virtual void
    OwnerSequenceID (const model::StringItem&);

    virtual void
    EquityType (const model::StringItem&);

    virtual void
    EquityTypeDescription (const model::StringItem&);

    virtual void
    ID (const QString&);

    virtual std::unique_ptr<model::Owner>
    post_Owner () = 0;

    // Parser construction API.
    //
    void
    FirstName_parser (::dataadvice::FolioString255Item_pskel&);

    void
    MiddleName_parser (::dataadvice::FolioString255Item_pskel&);

    void
    MiddleInitial_parser (::dataadvice::FolioString1Item_pskel&);

    void
    CompanyOrLastName_parser (::dataadvice::FolioString255Item_pskel&);

    void
    OwnerSequenceID_parser (::dataadvice::FolioUniqueIDItem_pskel&);

    void
    EquityType_parser (::dataadvice::FolioLookupCodeItem_pskel&);

    void
    EquityTypeDescription_parser (::dataadvice::FolioString255Item_pskel&);

    void
    ID_parser (::dataadvice::UniqueID_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::FolioString255Item_pskel& /* FirstName */,
             ::dataadvice::FolioString255Item_pskel& /* MiddleName */,
             ::dataadvice::FolioString1Item_pskel& /* MiddleInitial */,
             ::dataadvice::FolioString255Item_pskel& /* CompanyOrLastName */,
             ::dataadvice::FolioUniqueIDItem_pskel& /* OwnerSequenceID */,
             ::dataadvice::FolioLookupCodeItem_pskel& /* EquityType */,
             ::dataadvice::FolioString255Item_pskel& /* EquityTypeDescription */,
             ::dataadvice::UniqueID_pskel& /* ID */);

    // Constructor.
    //
    Owner_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::FolioString255Item_pskel* FirstName_parser_;
    ::dataadvice::FolioString255Item_pskel* MiddleName_parser_;
    ::dataadvice::FolioString1Item_pskel* MiddleInitial_parser_;
    ::dataadvice::FolioString255Item_pskel* CompanyOrLastName_parser_;
    ::dataadvice::FolioUniqueIDItem_pskel* OwnerSequenceID_parser_;
    ::dataadvice::FolioLookupCodeItem_pskel* EquityType_parser_;
    ::dataadvice::FolioString255Item_pskel* EquityTypeDescription_parser_;
    ::dataadvice::UniqueID_pskel* ID_parser_;
  };

  class MailingAddress_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Attention (const model::StringItem&);

    virtual void
    CareOf (const model::StringItem&);

    virtual void
    Floor (const model::StringItem&);

    virtual void
    UnitNumber (const model::StringItem&);

    virtual void
    StreetDirectionPrefix (const model::StringItem&);

    virtual void
    StreetNumber (const model::StringItem&);

    virtual void
    StreetName (const model::StringItem&);

    virtual void
    StreetType (const model::StringItem&);

    virtual void
    StreetDirectionSuffix (const model::StringItem&);

    virtual void
    City (const model::StringItem&);

    virtual void
    ProvinceState (const model::StringItem&);

    virtual void
    Country (const model::StringItem&);

    virtual void
    PostalZip (const model::StringItem&);

    virtual void
    FreeformAddress (const model::StringItem&);

    virtual void
    Compartment (const model::StringItem&);

    virtual void
    DeliveryInstallationType (const model::StringItem&);

    virtual void
    DeliveryInstallationTypeValue (const model::StringItem&);

    virtual void
    ModeOfDelivery (const model::StringItem&);

    virtual void
    ModeOfDeliveryValue (const model::StringItem&);

    virtual void
    Site (const model::StringItem&);

    virtual void
    BulkMailCode (const model::StringItem&);

    virtual void
    ID (const QString&);

    virtual std::unique_ptr<model::MailingAddress>
    post_MailingAddress () = 0;

    // Parser construction API.
    //
    void
    Attention_parser (::dataadvice::FolioString255Item_pskel&);

    void
    CareOf_parser (::dataadvice::FolioString255Item_pskel&);

    void
    Floor_parser (::dataadvice::FolioString255Item_pskel&);

    void
    UnitNumber_parser (::dataadvice::FolioString255Item_pskel&);

    void
    StreetDirectionPrefix_parser (::dataadvice::FolioString255Item_pskel&);

    void
    StreetNumber_parser (::dataadvice::FolioString255Item_pskel&);

    void
    StreetName_parser (::dataadvice::FolioString255Item_pskel&);

    void
    StreetType_parser (::dataadvice::FolioString255Item_pskel&);

    void
    StreetDirectionSuffix_parser (::dataadvice::FolioString255Item_pskel&);

    void
    City_parser (::dataadvice::FolioString255Item_pskel&);

    void
    ProvinceState_parser (::dataadvice::FolioString255Item_pskel&);

    void
    Country_parser (::dataadvice::FolioString255Item_pskel&);

    void
    PostalZip_parser (::dataadvice::FolioString255Item_pskel&);

    void
    FreeformAddress_parser (::dataadvice::FolioString255Item_pskel&);

    void
    Compartment_parser (::dataadvice::FolioString255Item_pskel&);

    void
    DeliveryInstallationType_parser (::dataadvice::FolioString255Item_pskel&);

    void
    DeliveryInstallationTypeValue_parser (::dataadvice::FolioString255Item_pskel&);

    void
    ModeOfDelivery_parser (::dataadvice::FolioString255Item_pskel&);

    void
    ModeOfDeliveryValue_parser (::dataadvice::FolioString255Item_pskel&);

    void
    Site_parser (::dataadvice::FolioString255Item_pskel&);

    void
    BulkMailCode_parser (::dataadvice::FolioString255Item_pskel&);

    void
    ID_parser (::dataadvice::UniqueID_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::FolioString255Item_pskel& /* Attention */,
             ::dataadvice::FolioString255Item_pskel& /* CareOf */,
             ::dataadvice::FolioString255Item_pskel& /* Floor */,
             ::dataadvice::FolioString255Item_pskel& /* UnitNumber */,
             ::dataadvice::FolioString255Item_pskel& /* StreetDirectionPrefix */,
             ::dataadvice::FolioString255Item_pskel& /* StreetNumber */,
             ::dataadvice::FolioString255Item_pskel& /* StreetName */,
             ::dataadvice::FolioString255Item_pskel& /* StreetType */,
             ::dataadvice::FolioString255Item_pskel& /* StreetDirectionSuffix */,
             ::dataadvice::FolioString255Item_pskel& /* City */,
             ::dataadvice::FolioString255Item_pskel& /* ProvinceState */,
             ::dataadvice::FolioString255Item_pskel& /* Country */,
             ::dataadvice::FolioString255Item_pskel& /* PostalZip */,
             ::dataadvice::FolioString255Item_pskel& /* FreeformAddress */,
             ::dataadvice::FolioString255Item_pskel& /* Compartment */,
             ::dataadvice::FolioString255Item_pskel& /* DeliveryInstallationType */,
             ::dataadvice::FolioString255Item_pskel& /* DeliveryInstallationTypeValue */,
             ::dataadvice::FolioString255Item_pskel& /* ModeOfDelivery */,
             ::dataadvice::FolioString255Item_pskel& /* ModeOfDeliveryValue */,
             ::dataadvice::FolioString255Item_pskel& /* Site */,
             ::dataadvice::FolioString255Item_pskel& /* BulkMailCode */,
             ::dataadvice::UniqueID_pskel& /* ID */);

    // Constructor.
    //
    MailingAddress_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::FolioString255Item_pskel* Attention_parser_;
    ::dataadvice::FolioString255Item_pskel* CareOf_parser_;
    ::dataadvice::FolioString255Item_pskel* Floor_parser_;
    ::dataadvice::FolioString255Item_pskel* UnitNumber_parser_;
    ::dataadvice::FolioString255Item_pskel* StreetDirectionPrefix_parser_;
    ::dataadvice::FolioString255Item_pskel* StreetNumber_parser_;
    ::dataadvice::FolioString255Item_pskel* StreetName_parser_;
    ::dataadvice::FolioString255Item_pskel* StreetType_parser_;
    ::dataadvice::FolioString255Item_pskel* StreetDirectionSuffix_parser_;
    ::dataadvice::FolioString255Item_pskel* City_parser_;
    ::dataadvice::FolioString255Item_pskel* ProvinceState_parser_;
    ::dataadvice::FolioString255Item_pskel* Country_parser_;
    ::dataadvice::FolioString255Item_pskel* PostalZip_parser_;
    ::dataadvice::FolioString255Item_pskel* FreeformAddress_parser_;
    ::dataadvice::FolioString255Item_pskel* Compartment_parser_;
    ::dataadvice::FolioString255Item_pskel* DeliveryInstallationType_parser_;
    ::dataadvice::FolioString255Item_pskel* DeliveryInstallationTypeValue_parser_;
    ::dataadvice::FolioString255Item_pskel* ModeOfDelivery_parser_;
    ::dataadvice::FolioString255Item_pskel* ModeOfDeliveryValue_parser_;
    ::dataadvice::FolioString255Item_pskel* Site_parser_;
    ::dataadvice::FolioString255Item_pskel* BulkMailCode_parser_;
    ::dataadvice::UniqueID_pskel* ID_parser_;
  };

  class FormattedMailingAddress_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Line1 (const model::StringItem&);

    virtual void
    Line2 (const model::StringItem&);

    virtual void
    Line3 (const model::StringItem&);

    virtual void
    Line4 (const model::StringItem&);

    virtual void
    Line5 (const model::StringItem&);

    virtual void
    Line6 (const model::StringItem&);

    virtual void
    ID (const QString&);

    virtual std::unique_ptr<model::FormattedMailingAddress>
    post_FormattedMailingAddress () = 0;

    // Parser construction API.
    //
    void
    Line1_parser (::dataadvice::FormattedMailingAddressLine_pskel&);

    void
    Line2_parser (::dataadvice::FormattedMailingAddressLine_pskel&);

    void
    Line3_parser (::dataadvice::FormattedMailingAddressLine_pskel&);

    void
    Line4_parser (::dataadvice::FormattedMailingAddressLine_pskel&);

    void
    Line5_parser (::dataadvice::FormattedMailingAddressLine_pskel&);

    void
    Line6_parser (::dataadvice::FormattedMailingAddressLine_pskel&);

    void
    ID_parser (::dataadvice::UniqueID_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::FormattedMailingAddressLine_pskel& /* Line1 */,
             ::dataadvice::FormattedMailingAddressLine_pskel& /* Line2 */,
             ::dataadvice::FormattedMailingAddressLine_pskel& /* Line3 */,
             ::dataadvice::FormattedMailingAddressLine_pskel& /* Line4 */,
             ::dataadvice::FormattedMailingAddressLine_pskel& /* Line5 */,
             ::dataadvice::FormattedMailingAddressLine_pskel& /* Line6 */,
             ::dataadvice::UniqueID_pskel& /* ID */);

    // Constructor.
    //
    FormattedMailingAddress_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::FormattedMailingAddressLine_pskel* Line1_parser_;
    ::dataadvice::FormattedMailingAddressLine_pskel* Line2_parser_;
    ::dataadvice::FormattedMailingAddressLine_pskel* Line3_parser_;
    ::dataadvice::FormattedMailingAddressLine_pskel* Line4_parser_;
    ::dataadvice::FormattedMailingAddressLine_pskel* Line5_parser_;
    ::dataadvice::FormattedMailingAddressLine_pskel* Line6_parser_;
    ::dataadvice::UniqueID_pskel* ID_parser_;
  };

  class String40_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual QString
    post_String40 () = 0;
  };

  class FormattedMailingAddressLine_pskel: public virtual ::dataadvice::String40_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Action (const model::ActionCode::Code&);

    virtual void
    OldValue (const QString&);

    virtual model::StringItem
    post_FormattedMailingAddressLine () = 0;

    // Parser construction API.
    //
    void
    Action_parser (::dataadvice::ActionCode_pskel&);

    void
    OldValue_parser (::dataadvice::String40_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::String40_pskel& /* OldValue */);

    // Constructor.
    //
    FormattedMailingAddressLine_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::ActionCode_pskel* Action_parser_;
    ::dataadvice::String40_pskel* OldValue_parser_;
  };

  class LegalDescriptionCollection_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    LegalDescription (std::unique_ptr<model::LegalDescription>&);

    virtual std::vector<std::unique_ptr<model::LegalDescription>>
    post_LegalDescriptionCollection () = 0;

    // Parser construction API.
    //
    void
    LegalDescription_parser (::dataadvice::LegalDescription_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::LegalDescription_pskel& /* LegalDescription */);

    // Constructor.
    //
    LegalDescriptionCollection_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::LegalDescription_pskel* LegalDescription_parser_;
  };

  class LegalDescription_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    FormattedLegalDescription (const model::StringItem&);

    virtual void
    PID (const model::StringItem&);

    virtual void
    Lot (const model::StringItem&);

    virtual void
    StrataLot (const model::StringItem&);

    virtual void
    Parcel (const model::StringItem&);

    virtual void
    Block (const model::StringItem&);

    virtual void
    SubBlock (const model::StringItem&);

    virtual void
    Plan (const model::StringItem&);

    virtual void
    SubLot (const model::StringItem&);

    virtual void
    Part1 (const model::StringItem&);

    virtual void
    Part2 (const model::StringItem&);

    virtual void
    Part3 (const model::StringItem&);

    virtual void
    Part4 (const model::StringItem&);

    virtual void
    DistrictLot (const model::StringItem&);

    virtual void
    LegalSubdivision (const model::StringItem&);

    virtual void
    Section (const model::StringItem&);

    virtual void
    Township (const model::StringItem&);

    virtual void
    Range (const model::StringItem&);

    virtual void
    Meridian (const model::StringItem&);

    virtual void
    MeridianShort (const model::StringItem&);

    virtual void
    BCAGroup (const model::StringItem&);

    virtual void
    LandDistrict (const model::StringItem&);

    virtual void
    LandDistrictDescription (const model::StringItem&);

    virtual void
    Portion (const model::StringItem&);

    virtual void
    ExceptPlan (const model::StringItem&);

    virtual void
    FirstNationReserveNumber (const model::StringItem&);

    virtual void
    FirstNationReserveDescription (const model::StringItem&);

    virtual void
    LeaseLicenceNumber (const model::StringItem&);

    virtual void
    LandBranchFileNumber (const model::StringItem&);

    virtual void
    AirSpaceParcelNumber (const model::StringItem&);

    virtual void
    NtsLocation (const model::StringItem&);

    virtual void
    LegalText (const model::StringItem&);

    virtual void
    ID (const QString&);

    virtual std::unique_ptr<model::LegalDescription>
    post_LegalDescription () = 0;

    // Parser construction API.
    //
    void
    FormattedLegalDescription_parser (::dataadvice::FolioString1024Item_pskel&);

    void
    PID_parser (::dataadvice::FolioString255Item_pskel&);

    void
    Lot_parser (::dataadvice::FolioString255Item_pskel&);

    void
    StrataLot_parser (::dataadvice::FolioString255Item_pskel&);

    void
    Parcel_parser (::dataadvice::FolioString255Item_pskel&);

    void
    Block_parser (::dataadvice::FolioString255Item_pskel&);

    void
    SubBlock_parser (::dataadvice::FolioString255Item_pskel&);

    void
    Plan_parser (::dataadvice::FolioString255Item_pskel&);

    void
    SubLot_parser (::dataadvice::FolioString255Item_pskel&);

    void
    Part1_parser (::dataadvice::FolioString255Item_pskel&);

    void
    Part2_parser (::dataadvice::FolioString255Item_pskel&);

    void
    Part3_parser (::dataadvice::FolioString255Item_pskel&);

    void
    Part4_parser (::dataadvice::FolioString255Item_pskel&);

    void
    DistrictLot_parser (::dataadvice::FolioString255Item_pskel&);

    void
    LegalSubdivision_parser (::dataadvice::FolioString255Item_pskel&);

    void
    Section_parser (::dataadvice::FolioString255Item_pskel&);

    void
    Township_parser (::dataadvice::FolioString255Item_pskel&);

    void
    Range_parser (::dataadvice::FolioString255Item_pskel&);

    void
    Meridian_parser (::dataadvice::FolioString255Item_pskel&);

    void
    MeridianShort_parser (::dataadvice::FolioString255Item_pskel&);

    void
    BCAGroup_parser (::dataadvice::FolioString255Item_pskel&);

    void
    LandDistrict_parser (::dataadvice::FolioString255Item_pskel&);

    void
    LandDistrictDescription_parser (::dataadvice::FolioString255Item_pskel&);

    void
    Portion_parser (::dataadvice::FolioString255Item_pskel&);

    void
    ExceptPlan_parser (::dataadvice::FolioString255Item_pskel&);

    void
    FirstNationReserveNumber_parser (::dataadvice::FolioString255Item_pskel&);

    void
    FirstNationReserveDescription_parser (::dataadvice::FolioString255Item_pskel&);

    void
    LeaseLicenceNumber_parser (::dataadvice::FolioString255Item_pskel&);

    void
    LandBranchFileNumber_parser (::dataadvice::FolioString255Item_pskel&);

    void
    AirSpaceParcelNumber_parser (::dataadvice::FolioString255Item_pskel&);

    void
    NtsLocation_parser (::dataadvice::FolioString255Item_pskel&);

    void
    LegalText_parser (::dataadvice::FolioString1024Item_pskel&);

    void
    ID_parser (::dataadvice::UniqueID_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::FolioString1024Item_pskel& /* FormattedLegalDescription */,
             ::dataadvice::FolioString255Item_pskel& /* PID */,
             ::dataadvice::FolioString255Item_pskel& /* Lot */,
             ::dataadvice::FolioString255Item_pskel& /* StrataLot */,
             ::dataadvice::FolioString255Item_pskel& /* Parcel */,
             ::dataadvice::FolioString255Item_pskel& /* Block */,
             ::dataadvice::FolioString255Item_pskel& /* SubBlock */,
             ::dataadvice::FolioString255Item_pskel& /* Plan */,
             ::dataadvice::FolioString255Item_pskel& /* SubLot */,
             ::dataadvice::FolioString255Item_pskel& /* Part1 */,
             ::dataadvice::FolioString255Item_pskel& /* Part2 */,
             ::dataadvice::FolioString255Item_pskel& /* Part3 */,
             ::dataadvice::FolioString255Item_pskel& /* Part4 */,
             ::dataadvice::FolioString255Item_pskel& /* DistrictLot */,
             ::dataadvice::FolioString255Item_pskel& /* LegalSubdivision */,
             ::dataadvice::FolioString255Item_pskel& /* Section */,
             ::dataadvice::FolioString255Item_pskel& /* Township */,
             ::dataadvice::FolioString255Item_pskel& /* Range */,
             ::dataadvice::FolioString255Item_pskel& /* Meridian */,
             ::dataadvice::FolioString255Item_pskel& /* MeridianShort */,
             ::dataadvice::FolioString255Item_pskel& /* BCAGroup */,
             ::dataadvice::FolioString255Item_pskel& /* LandDistrict */,
             ::dataadvice::FolioString255Item_pskel& /* LandDistrictDescription */,
             ::dataadvice::FolioString255Item_pskel& /* Portion */,
             ::dataadvice::FolioString255Item_pskel& /* ExceptPlan */,
             ::dataadvice::FolioString255Item_pskel& /* FirstNationReserveNumber */,
             ::dataadvice::FolioString255Item_pskel& /* FirstNationReserveDescription */,
             ::dataadvice::FolioString255Item_pskel& /* LeaseLicenceNumber */,
             ::dataadvice::FolioString255Item_pskel& /* LandBranchFileNumber */,
             ::dataadvice::FolioString255Item_pskel& /* AirSpaceParcelNumber */,
             ::dataadvice::FolioString255Item_pskel& /* NtsLocation */,
             ::dataadvice::FolioString1024Item_pskel& /* LegalText */,
             ::dataadvice::UniqueID_pskel& /* ID */);

    // Constructor.
    //
    LegalDescription_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::FolioString1024Item_pskel* FormattedLegalDescription_parser_;
    ::dataadvice::FolioString255Item_pskel* PID_parser_;
    ::dataadvice::FolioString255Item_pskel* Lot_parser_;
    ::dataadvice::FolioString255Item_pskel* StrataLot_parser_;
    ::dataadvice::FolioString255Item_pskel* Parcel_parser_;
    ::dataadvice::FolioString255Item_pskel* Block_parser_;
    ::dataadvice::FolioString255Item_pskel* SubBlock_parser_;
    ::dataadvice::FolioString255Item_pskel* Plan_parser_;
    ::dataadvice::FolioString255Item_pskel* SubLot_parser_;
    ::dataadvice::FolioString255Item_pskel* Part1_parser_;
    ::dataadvice::FolioString255Item_pskel* Part2_parser_;
    ::dataadvice::FolioString255Item_pskel* Part3_parser_;
    ::dataadvice::FolioString255Item_pskel* Part4_parser_;
    ::dataadvice::FolioString255Item_pskel* DistrictLot_parser_;
    ::dataadvice::FolioString255Item_pskel* LegalSubdivision_parser_;
    ::dataadvice::FolioString255Item_pskel* Section_parser_;
    ::dataadvice::FolioString255Item_pskel* Township_parser_;
    ::dataadvice::FolioString255Item_pskel* Range_parser_;
    ::dataadvice::FolioString255Item_pskel* Meridian_parser_;
    ::dataadvice::FolioString255Item_pskel* MeridianShort_parser_;
    ::dataadvice::FolioString255Item_pskel* BCAGroup_parser_;
    ::dataadvice::FolioString255Item_pskel* LandDistrict_parser_;
    ::dataadvice::FolioString255Item_pskel* LandDistrictDescription_parser_;
    ::dataadvice::FolioString255Item_pskel* Portion_parser_;
    ::dataadvice::FolioString255Item_pskel* ExceptPlan_parser_;
    ::dataadvice::FolioString255Item_pskel* FirstNationReserveNumber_parser_;
    ::dataadvice::FolioString255Item_pskel* FirstNationReserveDescription_parser_;
    ::dataadvice::FolioString255Item_pskel* LeaseLicenceNumber_parser_;
    ::dataadvice::FolioString255Item_pskel* LandBranchFileNumber_parser_;
    ::dataadvice::FolioString255Item_pskel* AirSpaceParcelNumber_parser_;
    ::dataadvice::FolioString255Item_pskel* NtsLocation_parser_;
    ::dataadvice::FolioString1024Item_pskel* LegalText_parser_;
    ::dataadvice::UniqueID_pskel* ID_parser_;
  };

  class LandCharacteristic_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    LandCharacteristicCode (const model::StringItem&);

    virtual void
    LandCharacteristicDescription (const model::StringItem&);

    virtual std::unique_ptr<model::LandCharacteristic>
    post_LandCharacteristic () = 0;

    // Parser construction API.
    //
    void
    LandCharacteristicCode_parser (::dataadvice::FolioLookupCodeItem_pskel&);

    void
    LandCharacteristicDescription_parser (::dataadvice::FolioString255Item_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::FolioLookupCodeItem_pskel& /* LandCharacteristicCode */,
             ::dataadvice::FolioString255Item_pskel& /* LandCharacteristicDescription */);

    // Constructor.
    //
    LandCharacteristic_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::FolioLookupCodeItem_pskel* LandCharacteristicCode_parser_;
    ::dataadvice::FolioString255Item_pskel* LandCharacteristicDescription_parser_;
  };

  class LandCharacteristicCollection_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    LandCharacteristic (std::unique_ptr<model::LandCharacteristic>&);

    virtual std::vector<std::unique_ptr<model::LandCharacteristic>>
    post_LandCharacteristicCollection () = 0;

    // Parser construction API.
    //
    void
    LandCharacteristic_parser (::dataadvice::LandCharacteristic_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::LandCharacteristic_pskel& /* LandCharacteristic */);

    // Constructor.
    //
    LandCharacteristicCollection_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::LandCharacteristic_pskel* LandCharacteristic_parser_;
  };

  class ManufacturedHomeCollection_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ManufacturedHome (std::unique_ptr<model::ManufacturedHome>&);

    virtual std::vector<std::unique_ptr<model::ManufacturedHome>>
    post_ManufacturedHomeCollection () = 0;

    // Parser construction API.
    //
    void
    ManufacturedHome_parser (::dataadvice::ManufacturedHome_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::ManufacturedHome_pskel& /* ManufacturedHome */);

    // Constructor.
    //
    ManufacturedHomeCollection_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::ManufacturedHome_pskel* ManufacturedHome_parser_;
  };

  class ManufacturedHome_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    MHRegistryNumber (const model::StringItem&);

    virtual void
    MHBayNumber (const model::StringItem&);

    virtual void
    MHPark (const model::StringItem&);

    virtual void
    MHParkRollNumber (const model::StringItem&);

    virtual void
    ID (const QString&);

    virtual std::unique_ptr<model::ManufacturedHome>
    post_ManufacturedHome () = 0;

    // Parser construction API.
    //
    void
    MHRegistryNumber_parser (::dataadvice::FolioString255Item_pskel&);

    void
    MHBayNumber_parser (::dataadvice::FolioString255Item_pskel&);

    void
    MHPark_parser (::dataadvice::FolioString255Item_pskel&);

    void
    MHParkRollNumber_parser (::dataadvice::FolioString255Item_pskel&);

    void
    ID_parser (::dataadvice::UniqueID_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::FolioString255Item_pskel& /* MHRegistryNumber */,
             ::dataadvice::FolioString255Item_pskel& /* MHBayNumber */,
             ::dataadvice::FolioString255Item_pskel& /* MHPark */,
             ::dataadvice::FolioString255Item_pskel& /* MHParkRollNumber */,
             ::dataadvice::UniqueID_pskel& /* ID */);

    // Constructor.
    //
    ManufacturedHome_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::FolioString255Item_pskel* MHRegistryNumber_parser_;
    ::dataadvice::FolioString255Item_pskel* MHBayNumber_parser_;
    ::dataadvice::FolioString255Item_pskel* MHPark_parser_;
    ::dataadvice::FolioString255Item_pskel* MHParkRollNumber_parser_;
    ::dataadvice::UniqueID_pskel* ID_parser_;
  };

  class FarmCollection_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Farm (std::unique_ptr<model::Farm>&);

    virtual std::vector<std::unique_ptr<model::Farm>>
    post_FarmCollection () = 0;

    // Parser construction API.
    //
    void
    Farm_parser (::dataadvice::Farm_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::Farm_pskel& /* Farm */);

    // Constructor.
    //
    FarmCollection_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::Farm_pskel* Farm_parser_;
  };

  class Farm_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    FarmNumber (const model::StringItem&);

    virtual void
    ID (const QString&);

    virtual std::unique_ptr<model::Farm>
    post_Farm () = 0;

    // Parser construction API.
    //
    void
    FarmNumber_parser (::dataadvice::FolioString255Item_pskel&);

    void
    ID_parser (::dataadvice::UniqueID_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::FolioString255Item_pskel& /* FarmNumber */,
             ::dataadvice::UniqueID_pskel& /* ID */);

    // Constructor.
    //
    Farm_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::FolioString255Item_pskel* FarmNumber_parser_;
    ::dataadvice::UniqueID_pskel* ID_parser_;
  };

  class OilAndGasCollection_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    OilAndGas (std::unique_ptr<model::OilAndGas>&);

    virtual std::vector<std::unique_ptr<model::OilAndGas>>
    post_OilAndGasCollection () = 0;

    // Parser construction API.
    //
    void
    OilAndGas_parser (::dataadvice::OilAndGas_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::OilAndGas_pskel& /* OilAndGas */);

    // Constructor.
    //
    OilAndGasCollection_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::OilAndGas_pskel* OilAndGas_parser_;
  };

  class OilAndGas_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    PipelineProjectNumber (const model::StringItem&);

    virtual void
    ID (const QString&);

    virtual std::unique_ptr<model::OilAndGas>
    post_OilAndGas () = 0;

    // Parser construction API.
    //
    void
    PipelineProjectNumber_parser (::dataadvice::FolioString255Item_pskel&);

    void
    ID_parser (::dataadvice::UniqueID_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::FolioString255Item_pskel& /* PipelineProjectNumber */,
             ::dataadvice::UniqueID_pskel& /* ID */);

    // Constructor.
    //
    OilAndGas_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::FolioString255Item_pskel* PipelineProjectNumber_parser_;
    ::dataadvice::UniqueID_pskel* ID_parser_;
  };

  class ManagedForestCollection_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ManagedForest (std::unique_ptr<model::ManagedForest>&);

    virtual std::vector<std::unique_ptr<model::ManagedForest>>
    post_ManagedForestCollection () = 0;

    // Parser construction API.
    //
    void
    ManagedForest_parser (::dataadvice::ManagedForest_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::ManagedForest_pskel& /* ManagedForest */);

    // Constructor.
    //
    ManagedForestCollection_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::ManagedForest_pskel* ManagedForest_parser_;
  };

  class ManagedForest_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ManagedForestNumber (const model::StringItem&);

    virtual void
    ID (const QString&);

    virtual std::unique_ptr<model::ManagedForest>
    post_ManagedForest () = 0;

    // Parser construction API.
    //
    void
    ManagedForestNumber_parser (::dataadvice::FolioString255Item_pskel&);

    void
    ID_parser (::dataadvice::UniqueID_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::FolioString255Item_pskel& /* ManagedForestNumber */,
             ::dataadvice::UniqueID_pskel& /* ID */);

    // Constructor.
    //
    ManagedForest_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::FolioString255Item_pskel* ManagedForestNumber_parser_;
    ::dataadvice::UniqueID_pskel* ID_parser_;
  };

  class FolioAmendmentCollection_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Amendment ();

    virtual void
    post_FolioAmendmentCollection ();

    // Parser construction API.
    //
    void
    Amendment_parser (::dataadvice::FolioAmendment_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::FolioAmendment_pskel& /* Amendment */);

    // Constructor.
    //
    FolioAmendmentCollection_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::FolioAmendment_pskel* Amendment_parser_;
  };

  class FolioAmendment_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    AmendmentType (const model::StringItem&);

    virtual void
    AmendmentTypeDescription (const model::StringItem&);

    virtual void
    AmendmentReasonCode (const model::StringItem&);

    virtual void
    AmendmentReasonDescription (const model::StringItem&);

    virtual void
    SuppOccupancyDate (const model::DateItem&);

    virtual void
    SuppOccupancyCode (const model::StringItem&);

    virtual void
    ID (const QString&);

    virtual void
    post_FolioAmendment ();

    // Parser construction API.
    //
    void
    AmendmentType_parser (::dataadvice::FolioLookupCodeItem_pskel&);

    void
    AmendmentTypeDescription_parser (::dataadvice::FolioString255Item_pskel&);

    void
    AmendmentReasonCode_parser (::dataadvice::FolioLookupCodeItem_pskel&);

    void
    AmendmentReasonDescription_parser (::dataadvice::FolioString255Item_pskel&);

    void
    SuppOccupancyDate_parser (::dataadvice::FolioDateItem_pskel&);

    void
    SuppOccupancyCode_parser (::dataadvice::FolioString1Item_pskel&);

    void
    ID_parser (::dataadvice::UniqueID_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::FolioLookupCodeItem_pskel& /* AmendmentType */,
             ::dataadvice::FolioString255Item_pskel& /* AmendmentTypeDescription */,
             ::dataadvice::FolioLookupCodeItem_pskel& /* AmendmentReasonCode */,
             ::dataadvice::FolioString255Item_pskel& /* AmendmentReasonDescription */,
             ::dataadvice::FolioDateItem_pskel& /* SuppOccupancyDate */,
             ::dataadvice::FolioString1Item_pskel& /* SuppOccupancyCode */,
             ::dataadvice::UniqueID_pskel& /* ID */);

    // Constructor.
    //
    FolioAmendment_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::FolioLookupCodeItem_pskel* AmendmentType_parser_;
    ::dataadvice::FolioString255Item_pskel* AmendmentTypeDescription_parser_;
    ::dataadvice::FolioLookupCodeItem_pskel* AmendmentReasonCode_parser_;
    ::dataadvice::FolioString255Item_pskel* AmendmentReasonDescription_parser_;
    ::dataadvice::FolioDateItem_pskel* SuppOccupancyDate_parser_;
    ::dataadvice::FolioString1Item_pskel* SuppOccupancyCode_parser_;
    ::dataadvice::UniqueID_pskel* ID_parser_;
  };

  class SaleCollection_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Sale (std::unique_ptr<model::Sale>&);

    virtual std::vector<std::unique_ptr<model::Sale>>
    post_SaleCollection () = 0;

    // Parser construction API.
    //
    void
    Sale_parser (::dataadvice::Sale_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::Sale_pskel& /* Sale */);

    // Constructor.
    //
    SaleCollection_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::Sale_pskel* Sale_parser_;
  };

  class Sale_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    DocumentNumber (const model::StringItem&);

    virtual void
    SaleDate (const model::DateItem&);

    virtual void
    SalePrice (const model::DecimalItem&);

    virtual void
    SaleStatusCode (const model::StringItem&);

    virtual void
    SaleStatusDescription (const model::StringItem&);

    virtual void
    ConveyanceDate (const model::DateItem&);

    virtual void
    ConveyancePrice (const model::DecimalItem&);

    virtual void
    ConveyanceType (const model::StringItem&);

    virtual void
    ConveyanceTypeDescription (const model::StringItem&);

    virtual void
    RejectReasonCode (const model::StringItem&);

    virtual void
    RejectReasonDescription (const model::StringItem&);

    virtual void
    ID (const QString&);

    virtual std::unique_ptr<model::Sale>
    post_Sale () = 0;

    // Parser construction API.
    //
    void
    DocumentNumber_parser (::dataadvice::FolioString255Item_pskel&);

    void
    SaleDate_parser (::dataadvice::FolioDateItem_pskel&);

    void
    SalePrice_parser (::dataadvice::FolioDecimalItem_pskel&);

    void
    SaleStatusCode_parser (::dataadvice::FolioLookupCodeItem_pskel&);

    void
    SaleStatusDescription_parser (::dataadvice::FolioString255Item_pskel&);

    void
    ConveyanceDate_parser (::dataadvice::FolioDateItem_pskel&);

    void
    ConveyancePrice_parser (::dataadvice::FolioDecimalItem_pskel&);

    void
    ConveyanceType_parser (::dataadvice::FolioLookupCodeItem_pskel&);

    void
    ConveyanceTypeDescription_parser (::dataadvice::FolioString255Item_pskel&);

    void
    RejectReasonCode_parser (::dataadvice::FolioLookupCodeItem_pskel&);

    void
    RejectReasonDescription_parser (::dataadvice::FolioString255Item_pskel&);

    void
    ID_parser (::dataadvice::UniqueID_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::FolioString255Item_pskel& /* DocumentNumber */,
             ::dataadvice::FolioDateItem_pskel& /* SaleDate */,
             ::dataadvice::FolioDecimalItem_pskel& /* SalePrice */,
             ::dataadvice::FolioLookupCodeItem_pskel& /* SaleStatusCode */,
             ::dataadvice::FolioString255Item_pskel& /* SaleStatusDescription */,
             ::dataadvice::FolioDateItem_pskel& /* ConveyanceDate */,
             ::dataadvice::FolioDecimalItem_pskel& /* ConveyancePrice */,
             ::dataadvice::FolioLookupCodeItem_pskel& /* ConveyanceType */,
             ::dataadvice::FolioString255Item_pskel& /* ConveyanceTypeDescription */,
             ::dataadvice::FolioLookupCodeItem_pskel& /* RejectReasonCode */,
             ::dataadvice::FolioString255Item_pskel& /* RejectReasonDescription */,
             ::dataadvice::UniqueID_pskel& /* ID */);

    // Constructor.
    //
    Sale_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::FolioString255Item_pskel* DocumentNumber_parser_;
    ::dataadvice::FolioDateItem_pskel* SaleDate_parser_;
    ::dataadvice::FolioDecimalItem_pskel* SalePrice_parser_;
    ::dataadvice::FolioLookupCodeItem_pskel* SaleStatusCode_parser_;
    ::dataadvice::FolioString255Item_pskel* SaleStatusDescription_parser_;
    ::dataadvice::FolioDateItem_pskel* ConveyanceDate_parser_;
    ::dataadvice::FolioDecimalItem_pskel* ConveyancePrice_parser_;
    ::dataadvice::FolioLookupCodeItem_pskel* ConveyanceType_parser_;
    ::dataadvice::FolioString255Item_pskel* ConveyanceTypeDescription_parser_;
    ::dataadvice::FolioLookupCodeItem_pskel* RejectReasonCode_parser_;
    ::dataadvice::FolioString255Item_pskel* RejectReasonDescription_parser_;
    ::dataadvice::UniqueID_pskel* ID_parser_;
  };

  class FolioDescription_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Neighbourhood (std::unique_ptr<model::Neighbourhood>&);

    virtual void
    ActualUseCode (const model::StringItem&);

    virtual void
    ActualUseDescription (const model::StringItem&);

    virtual void
    VacantFlag (const model::BooleanItem&);

    virtual void
    BCTransitFlag (bool);

    virtual void
    PoliceTaxFlag (bool);

    virtual void
    AddSchoolTax3Mto4MFlag (bool);

    virtual void
    AddSchoolTaxGreater4MFlag (bool);

    virtual void
    CandidateforSpecTaxFlag (bool);

    virtual void
    ALRCode (const model::StringItem&);

    virtual void
    ALRDescription (const model::StringItem&);

    virtual void
    TenureCode (const model::StringItem&);

    virtual void
    TenureDescription (const model::StringItem&);

    virtual void
    ParkingArea (const model::StringItem&);

    virtual void
    LandMeasurement (std::unique_ptr<model::LandMeasurement>&);

    virtual void
    SchoolDistrict (std::unique_ptr<model::SpecialDistrict>&);

    virtual void
    RegionalDistrict (std::unique_ptr<model::SpecialDistrict>&);

    virtual void
    RegionalHospitalDistrict (std::unique_ptr<model::SpecialDistrict>&);

    virtual void
    PredominantManualClass (std::unique_ptr<model::ManualClass>&);

    virtual std::unique_ptr<model::FolioDescription>
    post_FolioDescription () = 0;

    // Parser construction API.
    //
    void
    Neighbourhood_parser (::dataadvice::Neighbourhood_pskel&);

    void
    ActualUseCode_parser (::dataadvice::FolioLookupCodeItem_pskel&);

    void
    ActualUseDescription_parser (::dataadvice::FolioString255Item_pskel&);

    void
    VacantFlag_parser (::dataadvice::FolioBooleanItem_pskel&);

    void
    BCTransitFlag_parser (::xml_schema::boolean_pskel&);

    void
    PoliceTaxFlag_parser (::xml_schema::boolean_pskel&);

    void
    AddSchoolTax3Mto4MFlag_parser (::xml_schema::boolean_pskel&);

    void
    AddSchoolTaxGreater4MFlag_parser (::xml_schema::boolean_pskel&);

    void
    CandidateforSpecTaxFlag_parser (::xml_schema::boolean_pskel&);

    void
    ALRCode_parser (::dataadvice::FolioLookupCodeItem_pskel&);

    void
    ALRDescription_parser (::dataadvice::FolioString255Item_pskel&);

    void
    TenureCode_parser (::dataadvice::FolioLookupCodeItem_pskel&);

    void
    TenureDescription_parser (::dataadvice::FolioString255Item_pskel&);

    void
    ParkingArea_parser (::dataadvice::FolioString255Item_pskel&);

    void
    LandMeasurement_parser (::dataadvice::LandMeasurement_pskel&);

    void
    SchoolDistrict_parser (::dataadvice::SpecialDistrict_pskel&);

    void
    RegionalDistrict_parser (::dataadvice::SpecialDistrict_pskel&);

    void
    RegionalHospitalDistrict_parser (::dataadvice::SpecialDistrict_pskel&);

    void
    PredominantManualClass_parser (::dataadvice::ManualClass_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::Neighbourhood_pskel& /* Neighbourhood */,
             ::dataadvice::FolioLookupCodeItem_pskel& /* ActualUseCode */,
             ::dataadvice::FolioString255Item_pskel& /* ActualUseDescription */,
             ::dataadvice::FolioBooleanItem_pskel& /* VacantFlag */,
             ::xml_schema::boolean_pskel& /* BCTransitFlag */,
             ::xml_schema::boolean_pskel& /* PoliceTaxFlag */,
             ::xml_schema::boolean_pskel& /* AddSchoolTax3Mto4MFlag */,
             ::xml_schema::boolean_pskel& /* AddSchoolTaxGreater4MFlag */,
             ::xml_schema::boolean_pskel& /* CandidateforSpecTaxFlag */,
             ::dataadvice::FolioLookupCodeItem_pskel& /* ALRCode */,
             ::dataadvice::FolioString255Item_pskel& /* ALRDescription */,
             ::dataadvice::FolioLookupCodeItem_pskel& /* TenureCode */,
             ::dataadvice::FolioString255Item_pskel& /* TenureDescription */,
             ::dataadvice::FolioString255Item_pskel& /* ParkingArea */,
             ::dataadvice::LandMeasurement_pskel& /* LandMeasurement */,
             ::dataadvice::SpecialDistrict_pskel& /* SchoolDistrict */,
             ::dataadvice::SpecialDistrict_pskel& /* RegionalDistrict */,
             ::dataadvice::SpecialDistrict_pskel& /* RegionalHospitalDistrict */,
             ::dataadvice::ManualClass_pskel& /* PredominantManualClass */);

    // Constructor.
    //
    FolioDescription_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::Neighbourhood_pskel* Neighbourhood_parser_;
    ::dataadvice::FolioLookupCodeItem_pskel* ActualUseCode_parser_;
    ::dataadvice::FolioString255Item_pskel* ActualUseDescription_parser_;
    ::dataadvice::FolioBooleanItem_pskel* VacantFlag_parser_;
    ::xml_schema::boolean_pskel* BCTransitFlag_parser_;
    ::xml_schema::boolean_pskel* PoliceTaxFlag_parser_;
    ::xml_schema::boolean_pskel* AddSchoolTax3Mto4MFlag_parser_;
    ::xml_schema::boolean_pskel* AddSchoolTaxGreater4MFlag_parser_;
    ::xml_schema::boolean_pskel* CandidateforSpecTaxFlag_parser_;
    ::dataadvice::FolioLookupCodeItem_pskel* ALRCode_parser_;
    ::dataadvice::FolioString255Item_pskel* ALRDescription_parser_;
    ::dataadvice::FolioLookupCodeItem_pskel* TenureCode_parser_;
    ::dataadvice::FolioString255Item_pskel* TenureDescription_parser_;
    ::dataadvice::FolioString255Item_pskel* ParkingArea_parser_;
    ::dataadvice::LandMeasurement_pskel* LandMeasurement_parser_;
    ::dataadvice::SpecialDistrict_pskel* SchoolDistrict_parser_;
    ::dataadvice::SpecialDistrict_pskel* RegionalDistrict_parser_;
    ::dataadvice::SpecialDistrict_pskel* RegionalHospitalDistrict_parser_;
    ::dataadvice::ManualClass_pskel* PredominantManualClass_parser_;
  };

  class LandMeasurement_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    LandDimensionType (const model::StringItem&);

    virtual void
    LandDimensionTypeDescription (const model::StringItem&);

    virtual void
    LandDimension (const model::StringItem&);

    virtual void
    LandWidth (const model::StringItem&);

    virtual void
    LandDepth (const model::StringItem&);

    virtual std::unique_ptr<model::LandMeasurement>
    post_LandMeasurement () = 0;

    // Parser construction API.
    //
    void
    LandDimensionType_parser (::dataadvice::FolioString255Item_pskel&);

    void
    LandDimensionTypeDescription_parser (::dataadvice::FolioString255Item_pskel&);

    void
    LandDimension_parser (::dataadvice::FolioString255Item_pskel&);

    void
    LandWidth_parser (::dataadvice::FolioString255Item_pskel&);

    void
    LandDepth_parser (::dataadvice::FolioString255Item_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::FolioString255Item_pskel& /* LandDimensionType */,
             ::dataadvice::FolioString255Item_pskel& /* LandDimensionTypeDescription */,
             ::dataadvice::FolioString255Item_pskel& /* LandDimension */,
             ::dataadvice::FolioString255Item_pskel& /* LandWidth */,
             ::dataadvice::FolioString255Item_pskel& /* LandDepth */);

    // Constructor.
    //
    LandMeasurement_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::FolioString255Item_pskel* LandDimensionType_parser_;
    ::dataadvice::FolioString255Item_pskel* LandDimensionTypeDescription_parser_;
    ::dataadvice::FolioString255Item_pskel* LandDimension_parser_;
    ::dataadvice::FolioString255Item_pskel* LandWidth_parser_;
    ::dataadvice::FolioString255Item_pskel* LandDepth_parser_;
  };

  class Neighbourhood_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    NeighbourhoodCode (const model::StringItem&);

    virtual void
    NeighbourhoodDescription (const model::StringItem&);

    virtual std::unique_ptr<model::Neighbourhood>
    post_Neighbourhood () = 0;

    // Parser construction API.
    //
    void
    NeighbourhoodCode_parser (::dataadvice::FolioLookupCodeItem_pskel&);

    void
    NeighbourhoodDescription_parser (::dataadvice::FolioString255Item_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::FolioLookupCodeItem_pskel& /* NeighbourhoodCode */,
             ::dataadvice::FolioString255Item_pskel& /* NeighbourhoodDescription */);

    // Constructor.
    //
    Neighbourhood_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::FolioLookupCodeItem_pskel* NeighbourhoodCode_parser_;
    ::dataadvice::FolioString255Item_pskel* NeighbourhoodDescription_parser_;
  };

  class SpecialDistrict_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    DistrictCode (const model::StringItem&);

    virtual void
    DistrictDescription (const model::StringItem&);

    virtual std::unique_ptr<model::SpecialDistrict>
    post_SpecialDistrict () = 0;

    // Parser construction API.
    //
    void
    DistrictCode_parser (::dataadvice::FolioLookupCodeItem_pskel&);

    void
    DistrictDescription_parser (::dataadvice::FolioString255Item_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::FolioLookupCodeItem_pskel& /* DistrictCode */,
             ::dataadvice::FolioString255Item_pskel& /* DistrictDescription */);

    // Constructor.
    //
    SpecialDistrict_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::FolioLookupCodeItem_pskel* DistrictCode_parser_;
    ::dataadvice::FolioString255Item_pskel* DistrictDescription_parser_;
  };

  class ManualClass_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ManualClassCode (const model::StringItem&);

    virtual void
    ManualClassDescription (const model::StringItem&);

    virtual void
    PercentDeviation (const model::DecimalItem&);

    virtual std::unique_ptr<model::ManualClass>
    post_ManualClass () = 0;

    // Parser construction API.
    //
    void
    ManualClassCode_parser (::dataadvice::FolioLookupCodeItem_pskel&);

    void
    ManualClassDescription_parser (::dataadvice::FolioString255Item_pskel&);

    void
    PercentDeviation_parser (::dataadvice::FolioDecimalItem_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::FolioLookupCodeItem_pskel& /* ManualClassCode */,
             ::dataadvice::FolioString255Item_pskel& /* ManualClassDescription */,
             ::dataadvice::FolioDecimalItem_pskel& /* PercentDeviation */);

    // Constructor.
    //
    ManualClass_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::FolioLookupCodeItem_pskel* ManualClassCode_parser_;
    ::dataadvice::FolioString255Item_pskel* ManualClassDescription_parser_;
    ::dataadvice::FolioDecimalItem_pskel* PercentDeviation_parser_;
  };

  class MinorTaxing_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ElectoralAreas (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&);

    virtual void
    ServiceAreas (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&);

    virtual void
    Defined (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&);

    virtual void
    SpecifiedRegional (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&);

    virtual void
    SpecifiedMunicipal (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&);

    virtual void
    LocalAreas (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&);

    virtual void
    GeneralServices (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&);

    virtual void
    ImprovementDistricts (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&);

    virtual void
    IslandsTrusts (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&);

    virtual std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>
    post_MinorTaxing () = 0;

    // Parser construction API.
    //
    void
    ElectoralAreas_parser (::dataadvice::MinorTaxingJurisdictionCollection_pskel&);

    void
    ServiceAreas_parser (::dataadvice::MinorTaxingJurisdictionCollection_pskel&);

    void
    Defined_parser (::dataadvice::MinorTaxingJurisdictionCollection_pskel&);

    void
    SpecifiedRegional_parser (::dataadvice::MinorTaxingJurisdictionCollection_pskel&);

    void
    SpecifiedMunicipal_parser (::dataadvice::MinorTaxingJurisdictionCollection_pskel&);

    void
    LocalAreas_parser (::dataadvice::MinorTaxingJurisdictionCollection_pskel&);

    void
    GeneralServices_parser (::dataadvice::MinorTaxingJurisdictionCollection_pskel&);

    void
    ImprovementDistricts_parser (::dataadvice::MinorTaxingJurisdictionCollection_pskel&);

    void
    IslandsTrusts_parser (::dataadvice::MinorTaxingJurisdictionCollection_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::MinorTaxingJurisdictionCollection_pskel& /* ElectoralAreas */,
             ::dataadvice::MinorTaxingJurisdictionCollection_pskel& /* ServiceAreas */,
             ::dataadvice::MinorTaxingJurisdictionCollection_pskel& /* Defined */,
             ::dataadvice::MinorTaxingJurisdictionCollection_pskel& /* SpecifiedRegional */,
             ::dataadvice::MinorTaxingJurisdictionCollection_pskel& /* SpecifiedMunicipal */,
             ::dataadvice::MinorTaxingJurisdictionCollection_pskel& /* LocalAreas */,
             ::dataadvice::MinorTaxingJurisdictionCollection_pskel& /* GeneralServices */,
             ::dataadvice::MinorTaxingJurisdictionCollection_pskel& /* ImprovementDistricts */,
             ::dataadvice::MinorTaxingJurisdictionCollection_pskel& /* IslandsTrusts */);

    // Constructor.
    //
    MinorTaxing_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::MinorTaxingJurisdictionCollection_pskel* ElectoralAreas_parser_;
    ::dataadvice::MinorTaxingJurisdictionCollection_pskel* ServiceAreas_parser_;
    ::dataadvice::MinorTaxingJurisdictionCollection_pskel* Defined_parser_;
    ::dataadvice::MinorTaxingJurisdictionCollection_pskel* SpecifiedRegional_parser_;
    ::dataadvice::MinorTaxingJurisdictionCollection_pskel* SpecifiedMunicipal_parser_;
    ::dataadvice::MinorTaxingJurisdictionCollection_pskel* LocalAreas_parser_;
    ::dataadvice::MinorTaxingJurisdictionCollection_pskel* GeneralServices_parser_;
    ::dataadvice::MinorTaxingJurisdictionCollection_pskel* ImprovementDistricts_parser_;
    ::dataadvice::MinorTaxingJurisdictionCollection_pskel* IslandsTrusts_parser_;
  };

  class MinorTaxingJurisdictionCollection_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    MinorTaxingJurisdiction (std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>&);

    virtual std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>
    post_MinorTaxingJurisdictionCollection () = 0;

    // Parser construction API.
    //
    void
    MinorTaxingJurisdiction_parser (::dataadvice::MinorTaxingJurisdiction_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::MinorTaxingJurisdiction_pskel& /* MinorTaxingJurisdiction */);

    // Constructor.
    //
    MinorTaxingJurisdictionCollection_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::MinorTaxingJurisdiction_pskel* MinorTaxingJurisdiction_parser_;
  };

  class MinorTaxingJurisdiction_pskel: public virtual ::dataadvice::FolioItemGroup_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    MinorTaxingCode (const model::StringItem&);

    virtual void
    MinorTaxingCodeShort (const model::StringItem&);

    virtual void
    MinorTaxingDescription (const model::StringItem&);

    virtual void
    ID (const QString&);

    virtual std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>
    post_MinorTaxingJurisdiction () = 0;

    // Parser construction API.
    //
    void
    MinorTaxingCode_parser (::dataadvice::FolioLookupCodeItem_pskel&);

    void
    MinorTaxingCodeShort_parser (::dataadvice::FolioString1Item_pskel&);

    void
    MinorTaxingDescription_parser (::dataadvice::FolioString255Item_pskel&);

    void
    ID_parser (::dataadvice::UniqueID_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::FolioLookupCodeItem_pskel& /* MinorTaxingCode */,
             ::dataadvice::FolioString1Item_pskel& /* MinorTaxingCodeShort */,
             ::dataadvice::FolioString255Item_pskel& /* MinorTaxingDescription */,
             ::dataadvice::UniqueID_pskel& /* ID */);

    // Constructor.
    //
    MinorTaxingJurisdiction_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::FolioLookupCodeItem_pskel* MinorTaxingCode_parser_;
    ::dataadvice::FolioString1Item_pskel* MinorTaxingCodeShort_parser_;
    ::dataadvice::FolioString255Item_pskel* MinorTaxingDescription_parser_;
    ::dataadvice::UniqueID_pskel* ID_parser_;
  };

  class PropertyValues_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    GeneralValues (std::vector<std::unique_ptr<model::PropertyClassValue>>&);

    virtual void
    BCTransitValues (std::vector<std::unique_ptr<model::PropertyClassValue>>&);

    virtual void
    SchoolValues (std::vector<std::unique_ptr<model::PropertyClassValue>>&);

    virtual void
    Valuation (std::vector<std::unique_ptr<model::ValuesByETC>>&);

    virtual std::unique_ptr<model::PropertyValues>
    post_PropertyValues () = 0;

    // Parser construction API.
    //
    void
    GeneralValues_parser (::dataadvice::PropertyClassValuesCollection_pskel&);

    void
    BCTransitValues_parser (::dataadvice::PropertyClassValuesCollection_pskel&);

    void
    SchoolValues_parser (::dataadvice::PropertyClassValuesCollection_pskel&);

    void
    Valuation_parser (::dataadvice::ValuationCollection_pskel&);

    void
    parsers (::dataadvice::PropertyClassValuesCollection_pskel& /* GeneralValues */,
             ::dataadvice::PropertyClassValuesCollection_pskel& /* BCTransitValues */,
             ::dataadvice::PropertyClassValuesCollection_pskel& /* SchoolValues */,
             ::dataadvice::ValuationCollection_pskel& /* Valuation */);

    // Constructor.
    //
    PropertyValues_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::PropertyClassValuesCollection_pskel* GeneralValues_parser_;
    ::dataadvice::PropertyClassValuesCollection_pskel* BCTransitValues_parser_;
    ::dataadvice::PropertyClassValuesCollection_pskel* SchoolValues_parser_;
    ::dataadvice::ValuationCollection_pskel* Valuation_parser_;
  };

  class ValuationCollection_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ValuesByETC (std::unique_ptr<model::ValuesByETC>&);

    virtual std::vector<std::unique_ptr<model::ValuesByETC>>
    post_ValuationCollection () = 0;

    // Parser construction API.
    //
    void
    ValuesByETC_parser (::dataadvice::ValuesByETC_pskel&);

    void
    parsers (::dataadvice::ValuesByETC_pskel& /* ValuesByETC */);

    // Constructor.
    //
    ValuationCollection_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::ValuesByETC_pskel* ValuesByETC_parser_;
  };

  class ValuesByETC_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    TaxExemptCode (const QString&);

    virtual void
    TaxExemptDescription (const QString&);

    virtual void
    PropertyClassCode (const QString&);

    virtual void
    PropertyClassDescription (const QString&);

    virtual void
    LandValue (double);

    virtual void
    ImprovementValue (double);

    virtual std::unique_ptr<model::ValuesByETC>
    post_ValuesByETC () = 0;

    // Parser construction API.
    //
    void
    TaxExemptCode_parser (::dataadvice::LookupCode_pskel&);

    void
    TaxExemptDescription_parser (::dataadvice::String255_pskel&);

    void
    PropertyClassCode_parser (::dataadvice::PropertyClassCode_pskel&);

    void
    PropertyClassDescription_parser (::dataadvice::String255_pskel&);

    void
    LandValue_parser (::xml_schema::decimal_pskel&);

    void
    ImprovementValue_parser (::xml_schema::decimal_pskel&);

    void
    parsers (::dataadvice::LookupCode_pskel& /* TaxExemptCode */,
             ::dataadvice::String255_pskel& /* TaxExemptDescription */,
             ::dataadvice::PropertyClassCode_pskel& /* PropertyClassCode */,
             ::dataadvice::String255_pskel& /* PropertyClassDescription */,
             ::xml_schema::decimal_pskel& /* LandValue */,
             ::xml_schema::decimal_pskel& /* ImprovementValue */);

    // Constructor.
    //
    ValuesByETC_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::LookupCode_pskel* TaxExemptCode_parser_;
    ::dataadvice::String255_pskel* TaxExemptDescription_parser_;
    ::dataadvice::PropertyClassCode_pskel* PropertyClassCode_parser_;
    ::dataadvice::String255_pskel* PropertyClassDescription_parser_;
    ::xml_schema::decimal_pskel* LandValue_parser_;
    ::xml_schema::decimal_pskel* ImprovementValue_parser_;
  };

  class PropertyClassValuesCollection_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    PropertyClassValues (std::unique_ptr<model::PropertyClassValue>&);

    virtual std::vector<std::unique_ptr<model::PropertyClassValue>>
    post_PropertyClassValuesCollection () = 0;

    // Parser construction API.
    //
    void
    PropertyClassValues_parser (::dataadvice::PropertyClassValues_pskel&);

    void
    parsers (::dataadvice::PropertyClassValues_pskel& /* PropertyClassValues */);

    // Constructor.
    //
    PropertyClassValuesCollection_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::PropertyClassValues_pskel* PropertyClassValues_parser_;
  };

  class PropertyClassValues_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    PropertyClassCode (const QString&);

    virtual void
    PropertyClassDescription (const QString&);

    virtual void
    PropertySubClassCode (const QString&);

    virtual void
    PropertySubClassDescription (const QString&);

    virtual void
    GrossValues (std::unique_ptr<model::Valuation>&);

    virtual void
    TaxExemptValues (std::unique_ptr<model::Valuation>&);

    virtual void
    NetValues (std::unique_ptr<model::Valuation>&);

    virtual std::unique_ptr<model::PropertyClassValue>
    post_PropertyClassValues () = 0;

    // Parser construction API.
    //
    void
    PropertyClassCode_parser (::dataadvice::PropertyClassCode_pskel&);

    void
    PropertyClassDescription_parser (::dataadvice::String255_pskel&);

    void
    PropertySubClassCode_parser (::dataadvice::PropertySubClassCode_pskel&);

    void
    PropertySubClassDescription_parser (::dataadvice::String255_pskel&);

    void
    GrossValues_parser (::dataadvice::Valuation_pskel&);

    void
    TaxExemptValues_parser (::dataadvice::Valuation_pskel&);

    void
    NetValues_parser (::dataadvice::Valuation_pskel&);

    void
    parsers (::dataadvice::PropertyClassCode_pskel& /* PropertyClassCode */,
             ::dataadvice::String255_pskel& /* PropertyClassDescription */,
             ::dataadvice::PropertySubClassCode_pskel& /* PropertySubClassCode */,
             ::dataadvice::String255_pskel& /* PropertySubClassDescription */,
             ::dataadvice::Valuation_pskel& /* GrossValues */,
             ::dataadvice::Valuation_pskel& /* TaxExemptValues */,
             ::dataadvice::Valuation_pskel& /* NetValues */);

    // Constructor.
    //
    PropertyClassValues_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::PropertyClassCode_pskel* PropertyClassCode_parser_;
    ::dataadvice::String255_pskel* PropertyClassDescription_parser_;
    ::dataadvice::PropertySubClassCode_pskel* PropertySubClassCode_parser_;
    ::dataadvice::String255_pskel* PropertySubClassDescription_parser_;
    ::dataadvice::Valuation_pskel* GrossValues_parser_;
    ::dataadvice::Valuation_pskel* TaxExemptValues_parser_;
    ::dataadvice::Valuation_pskel* NetValues_parser_;
  };

  class PropertyClassCode_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual QString
    post_PropertyClassCode () = 0;
  };

  class PropertySubClassCode_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual QString
    post_PropertySubClassCode () = 0;
  };

  class Valuation_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    LandValue (double);

    virtual void
    ImprovementValue (double);

    virtual std::unique_ptr<model::Valuation>
    post_Valuation () = 0;

    // Parser construction API.
    //
    void
    LandValue_parser (::xml_schema::decimal_pskel&);

    void
    ImprovementValue_parser (::xml_schema::decimal_pskel&);

    void
    parsers (::xml_schema::decimal_pskel& /* LandValue */,
             ::xml_schema::decimal_pskel& /* ImprovementValue */);

    // Constructor.
    //
    Valuation_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::decimal_pskel* LandValue_parser_;
    ::xml_schema::decimal_pskel* ImprovementValue_parser_;
  };

  class FolioIntegerItem_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Action (const model::ActionCode::Code&);

    virtual void
    OldValue (long long);

    virtual model::IntegerItem
    post_FolioIntegerItem () = 0;

    // Parser construction API.
    //
    void
    Action_parser (::dataadvice::ActionCode_pskel&);

    void
    OldValue_parser (::xml_schema::integer_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::xml_schema::integer_pskel& /* OldValue */);

    // Constructor.
    //
    FolioIntegerItem_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::ActionCode_pskel* Action_parser_;
    ::xml_schema::integer_pskel* OldValue_parser_;
  };

  class FolioBooleanItem_pskel: public virtual ::xml_schema::boolean_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Action (const model::ActionCode::Code&);

    virtual void
    OldValue (bool);

    virtual model::BooleanItem
    post_FolioBooleanItem () = 0;

    // Parser construction API.
    //
    void
    Action_parser (::dataadvice::ActionCode_pskel&);

    void
    OldValue_parser (::xml_schema::boolean_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::xml_schema::boolean_pskel& /* OldValue */);

    // Constructor.
    //
    FolioBooleanItem_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::ActionCode_pskel* Action_parser_;
    ::xml_schema::boolean_pskel* OldValue_parser_;
  };

  class FolioDecimalItem_pskel: public virtual ::xml_schema::decimal_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Action (const model::ActionCode::Code&);

    virtual void
    OldValue (double);

    virtual model::DecimalItem
    post_FolioDecimalItem () = 0;

    // Parser construction API.
    //
    void
    Action_parser (::dataadvice::ActionCode_pskel&);

    void
    OldValue_parser (::xml_schema::decimal_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::xml_schema::decimal_pskel& /* OldValue */);

    // Constructor.
    //
    FolioDecimalItem_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::ActionCode_pskel* Action_parser_;
    ::xml_schema::decimal_pskel* OldValue_parser_;
  };

  class FolioDateItem_pskel: public virtual ::xml_schema::date_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Action (const model::ActionCode::Code&);

    virtual void
    OldValue (const ::xml_schema::date&);

    virtual model::DateItem
    post_FolioDateItem () = 0;

    // Parser construction API.
    //
    void
    Action_parser (::dataadvice::ActionCode_pskel&);

    void
    OldValue_parser (::xml_schema::date_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::xml_schema::date_pskel& /* OldValue */);

    // Constructor.
    //
    FolioDateItem_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::ActionCode_pskel* Action_parser_;
    ::xml_schema::date_pskel* OldValue_parser_;
  };

  class UniqueID_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual QString
    post_UniqueID () = 0;
  };

  class FolioUniqueIDItem_pskel: public virtual ::dataadvice::UniqueID_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Action (const model::ActionCode::Code&);

    virtual void
    OldValue (const QString&);

    virtual model::StringItem
    post_FolioUniqueIDItem () = 0;

    // Parser construction API.
    //
    void
    Action_parser (::dataadvice::ActionCode_pskel&);

    void
    OldValue_parser (::dataadvice::UniqueID_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::UniqueID_pskel& /* OldValue */);

    // Constructor.
    //
    FolioUniqueIDItem_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::ActionCode_pskel* Action_parser_;
    ::dataadvice::UniqueID_pskel* OldValue_parser_;
  };

  class LookupCode_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual QString
    post_LookupCode () = 0;
  };

  class FolioLookupCodeItem_pskel: public virtual ::dataadvice::LookupCode_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Action (const model::ActionCode::Code&);

    virtual void
    OldValue (const QString&);

    virtual model::StringItem
    post_FolioLookupCodeItem () = 0;

    // Parser construction API.
    //
    void
    Action_parser (::dataadvice::ActionCode_pskel&);

    void
    OldValue_parser (::dataadvice::LookupCode_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::LookupCode_pskel& /* OldValue */);

    // Constructor.
    //
    FolioLookupCodeItem_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::ActionCode_pskel* Action_parser_;
    ::dataadvice::LookupCode_pskel* OldValue_parser_;
  };

  class String1_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual QString
    post_String1 () = 0;
  };

  class FolioString1Item_pskel: public virtual ::dataadvice::String1_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Action (const model::ActionCode::Code&);

    virtual void
    OldValue (const QString&);

    virtual model::StringItem
    post_FolioString1Item () = 0;

    // Parser construction API.
    //
    void
    Action_parser (::dataadvice::ActionCode_pskel&);

    void
    OldValue_parser (::dataadvice::String1_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::String1_pskel& /* OldValue */);

    // Constructor.
    //
    FolioString1Item_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::ActionCode_pskel* Action_parser_;
    ::dataadvice::String1_pskel* OldValue_parser_;
  };

  class String255_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual QString
    post_String255 () = 0;
  };

  class FolioString255Item_pskel: public virtual ::dataadvice::String255_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Action (const model::ActionCode::Code&);

    virtual void
    OldValue (const QString&);

    virtual model::StringItem
    post_FolioString255Item () = 0;

    // Parser construction API.
    //
    void
    Action_parser (::dataadvice::ActionCode_pskel&);

    void
    OldValue_parser (::dataadvice::String255_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::String255_pskel& /* OldValue */);

    // Constructor.
    //
    FolioString255Item_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::ActionCode_pskel* Action_parser_;
    ::dataadvice::String255_pskel* OldValue_parser_;
  };

  class String1024_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual QString
    post_String1024 () = 0;
  };

  class FolioString1024Item_pskel: public virtual ::dataadvice::String1024_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Action (const model::ActionCode::Code&);

    virtual void
    OldValue (const QString&);

    virtual model::StringItem
    post_FolioString1024Item () = 0;

    // Parser construction API.
    //
    void
    Action_parser (::dataadvice::ActionCode_pskel&);

    void
    OldValue_parser (::dataadvice::String1024_pskel&);

    void
    parsers (::dataadvice::ActionCode_pskel& /* Action */,
             ::dataadvice::String1024_pskel& /* OldValue */);

    // Constructor.
    //
    FolioString1024Item_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::dataadvice::ActionCode_pskel* Action_parser_;
    ::dataadvice::String1024_pskel* OldValue_parser_;
  };

  class ActionCode_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual model::ActionCode::Code
    post_ActionCode () = 0;
  };
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___DATA_ADVICE_PSKEL_H
