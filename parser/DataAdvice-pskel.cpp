// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "DataAdvice-pskel.h"

namespace dataadvice
{
  // DataAdvice_pskel
  //

  void DataAdvice_pskel::
  RollYear_parser (::xml_schema::integer_pskel& p)
  {
    this->RollYear_parser_ = &p;
  }

  void DataAdvice_pskel::
  OwnershipYear_parser (::xml_schema::integer_pskel& p)
  {
    this->OwnershipYear_parser_ = &p;
  }

  void DataAdvice_pskel::
  RunType_parser (::dataadvice::RunType_pskel& p)
  {
    this->RunType_parser_ = &p;
  }

  void DataAdvice_pskel::
  StartDate_parser (::xml_schema::date_pskel& p)
  {
    this->StartDate_parser_ = &p;
  }

  void DataAdvice_pskel::
  EndDate_parser (::xml_schema::date_pskel& p)
  {
    this->EndDate_parser_ = &p;
  }

  void DataAdvice_pskel::
  AssessmentAreas_parser (::dataadvice::AssessmentAreaCollection_pskel& p)
  {
    this->AssessmentAreas_parser_ = &p;
  }

  void DataAdvice_pskel::
  ReportSummary_parser (::dataadvice::DeliverySummary_pskel& p)
  {
    this->ReportSummary_parser_ = &p;
  }

  void DataAdvice_pskel::
  Version_parser (::dataadvice::Version_pskel& p)
  {
    this->Version_parser_ = &p;
  }

  void DataAdvice_pskel::
  RequestID_parser (::dataadvice::UniqueID_pskel& p)
  {
    this->RequestID_parser_ = &p;
  }

  void DataAdvice_pskel::
  OrderID_parser (::dataadvice::UniqueID_pskel& p)
  {
    this->OrderID_parser_ = &p;
  }

  void DataAdvice_pskel::
  RunDate_parser (::xml_schema::date_pskel& p)
  {
    this->RunDate_parser_ = &p;
  }

  void DataAdvice_pskel::
  parsers (::xml_schema::integer_pskel& RollYear,
           ::xml_schema::integer_pskel& OwnershipYear,
           ::dataadvice::RunType_pskel& RunType,
           ::xml_schema::date_pskel& StartDate,
           ::xml_schema::date_pskel& EndDate,
           ::dataadvice::AssessmentAreaCollection_pskel& AssessmentAreas,
           ::dataadvice::DeliverySummary_pskel& ReportSummary,
           ::dataadvice::Version_pskel& Version,
           ::dataadvice::UniqueID_pskel& RequestID,
           ::dataadvice::UniqueID_pskel& OrderID,
           ::xml_schema::date_pskel& RunDate)
  {
    this->RollYear_parser_ = &RollYear;
    this->OwnershipYear_parser_ = &OwnershipYear;
    this->RunType_parser_ = &RunType;
    this->StartDate_parser_ = &StartDate;
    this->EndDate_parser_ = &EndDate;
    this->AssessmentAreas_parser_ = &AssessmentAreas;
    this->ReportSummary_parser_ = &ReportSummary;
    this->Version_parser_ = &Version;
    this->RequestID_parser_ = &RequestID;
    this->OrderID_parser_ = &OrderID;
    this->RunDate_parser_ = &RunDate;
  }

  DataAdvice_pskel::
  DataAdvice_pskel ()
  : RollYear_parser_ (0),
    OwnershipYear_parser_ (0),
    RunType_parser_ (0),
    StartDate_parser_ (0),
    EndDate_parser_ (0),
    AssessmentAreas_parser_ (0),
    ReportSummary_parser_ (0),
    Version_parser_ (0),
    RequestID_parser_ (0),
    OrderID_parser_ (0),
    RunDate_parser_ (0)
  {
  }

  // DeliverySummary_pskel
  //

  void DeliverySummary_pskel::
  TotalFolioCount_parser (::xml_schema::integer_pskel& p)
  {
    this->TotalFolioCount_parser_ = &p;
  }

  void DeliverySummary_pskel::
  TaxableFolioCount_parser (::xml_schema::integer_pskel& p)
  {
    this->TaxableFolioCount_parser_ = &p;
  }

  void DeliverySummary_pskel::
  TaxExemptFolioCount_parser (::xml_schema::integer_pskel& p)
  {
    this->TaxExemptFolioCount_parser_ = &p;
  }

  void DeliverySummary_pskel::
  TotalGrossValues_parser (::dataadvice::FolioGroupValues_pskel& p)
  {
    this->TotalGrossValues_parser_ = &p;
  }

  void DeliverySummary_pskel::
  TotalTaxExemptValues_parser (::dataadvice::FolioGroupValues_pskel& p)
  {
    this->TotalTaxExemptValues_parser_ = &p;
  }

  void DeliverySummary_pskel::
  TotalNetValues_parser (::dataadvice::FolioGroupValues_pskel& p)
  {
    this->TotalNetValues_parser_ = &p;
  }

  void DeliverySummary_pskel::
  GeneralValues_parser (::dataadvice::PropertyClassValuesCollection_pskel& p)
  {
    this->GeneralValues_parser_ = &p;
  }

  void DeliverySummary_pskel::
  BCTransitValues_parser (::dataadvice::PropertyClassValuesCollection_pskel& p)
  {
    this->BCTransitValues_parser_ = &p;
  }

  void DeliverySummary_pskel::
  SchoolValues_parser (::dataadvice::PropertyClassValuesCollection_pskel& p)
  {
    this->SchoolValues_parser_ = &p;
  }

  void DeliverySummary_pskel::
  AmendmentReasonCounts_parser (::dataadvice::AmendmentReasonCountCollection_pskel& p)
  {
    this->AmendmentReasonCounts_parser_ = &p;
  }

  void DeliverySummary_pskel::
  DeleteReasonCounts_parser (::dataadvice::DeleteReasonCountCollection_pskel& p)
  {
    this->DeleteReasonCounts_parser_ = &p;
  }

  void DeliverySummary_pskel::
  parsers (::xml_schema::integer_pskel& TotalFolioCount,
           ::xml_schema::integer_pskel& TaxableFolioCount,
           ::xml_schema::integer_pskel& TaxExemptFolioCount,
           ::dataadvice::FolioGroupValues_pskel& TotalGrossValues,
           ::dataadvice::FolioGroupValues_pskel& TotalTaxExemptValues,
           ::dataadvice::FolioGroupValues_pskel& TotalNetValues,
           ::dataadvice::PropertyClassValuesCollection_pskel& GeneralValues,
           ::dataadvice::PropertyClassValuesCollection_pskel& BCTransitValues,
           ::dataadvice::PropertyClassValuesCollection_pskel& SchoolValues,
           ::dataadvice::AmendmentReasonCountCollection_pskel& AmendmentReasonCounts,
           ::dataadvice::DeleteReasonCountCollection_pskel& DeleteReasonCounts)
  {
    this->TotalFolioCount_parser_ = &TotalFolioCount;
    this->TaxableFolioCount_parser_ = &TaxableFolioCount;
    this->TaxExemptFolioCount_parser_ = &TaxExemptFolioCount;
    this->TotalGrossValues_parser_ = &TotalGrossValues;
    this->TotalTaxExemptValues_parser_ = &TotalTaxExemptValues;
    this->TotalNetValues_parser_ = &TotalNetValues;
    this->GeneralValues_parser_ = &GeneralValues;
    this->BCTransitValues_parser_ = &BCTransitValues;
    this->SchoolValues_parser_ = &SchoolValues;
    this->AmendmentReasonCounts_parser_ = &AmendmentReasonCounts;
    this->DeleteReasonCounts_parser_ = &DeleteReasonCounts;
  }

  DeliverySummary_pskel::
  DeliverySummary_pskel ()
  : TotalFolioCount_parser_ (0),
    TaxableFolioCount_parser_ (0),
    TaxExemptFolioCount_parser_ (0),
    TotalGrossValues_parser_ (0),
    TotalTaxExemptValues_parser_ (0),
    TotalNetValues_parser_ (0),
    GeneralValues_parser_ (0),
    BCTransitValues_parser_ (0),
    SchoolValues_parser_ (0),
    AmendmentReasonCounts_parser_ (0),
    DeleteReasonCounts_parser_ (0)
  {
  }

  // AmendmentReasonCountCollection_pskel
  //

  void AmendmentReasonCountCollection_pskel::
  AmendmentReasonCount_parser (::dataadvice::AmendmentReasonCount_pskel& p)
  {
    this->AmendmentReasonCount_parser_ = &p;
  }

  void AmendmentReasonCountCollection_pskel::
  parsers (::dataadvice::AmendmentReasonCount_pskel& AmendmentReasonCount)
  {
    this->AmendmentReasonCount_parser_ = &AmendmentReasonCount;
  }

  AmendmentReasonCountCollection_pskel::
  AmendmentReasonCountCollection_pskel ()
  : AmendmentReasonCount_parser_ (0)
  {
  }

  // AmendmentReasonCount_pskel
  //

  void AmendmentReasonCount_pskel::
  AmendmentReasonCode_parser (::dataadvice::LookupCode_pskel& p)
  {
    this->AmendmentReasonCode_parser_ = &p;
  }

  void AmendmentReasonCount_pskel::
  AmendmentReasonDescription_parser (::dataadvice::String255_pskel& p)
  {
    this->AmendmentReasonDescription_parser_ = &p;
  }

  void AmendmentReasonCount_pskel::
  FolioCount_parser (::xml_schema::integer_pskel& p)
  {
    this->FolioCount_parser_ = &p;
  }

  void AmendmentReasonCount_pskel::
  parsers (::dataadvice::LookupCode_pskel& AmendmentReasonCode,
           ::dataadvice::String255_pskel& AmendmentReasonDescription,
           ::xml_schema::integer_pskel& FolioCount)
  {
    this->AmendmentReasonCode_parser_ = &AmendmentReasonCode;
    this->AmendmentReasonDescription_parser_ = &AmendmentReasonDescription;
    this->FolioCount_parser_ = &FolioCount;
  }

  AmendmentReasonCount_pskel::
  AmendmentReasonCount_pskel ()
  : AmendmentReasonCode_parser_ (0),
    AmendmentReasonDescription_parser_ (0),
    FolioCount_parser_ (0)
  {
  }

  // DeleteReasonCountCollection_pskel
  //

  void DeleteReasonCountCollection_pskel::
  DeleteReasonCount_parser (::dataadvice::DeleteReasonCount_pskel& p)
  {
    this->DeleteReasonCount_parser_ = &p;
  }

  void DeleteReasonCountCollection_pskel::
  parsers (::dataadvice::DeleteReasonCount_pskel& DeleteReasonCount)
  {
    this->DeleteReasonCount_parser_ = &DeleteReasonCount;
  }

  DeleteReasonCountCollection_pskel::
  DeleteReasonCountCollection_pskel ()
  : DeleteReasonCount_parser_ (0)
  {
  }

  // DeleteReasonCount_pskel
  //

  void DeleteReasonCount_pskel::
  DeleteReasonCode_parser (::dataadvice::LookupCode_pskel& p)
  {
    this->DeleteReasonCode_parser_ = &p;
  }

  void DeleteReasonCount_pskel::
  DeleteReasonDescription_parser (::dataadvice::String255_pskel& p)
  {
    this->DeleteReasonDescription_parser_ = &p;
  }

  void DeleteReasonCount_pskel::
  FolioCount_parser (::xml_schema::integer_pskel& p)
  {
    this->FolioCount_parser_ = &p;
  }

  void DeleteReasonCount_pskel::
  parsers (::dataadvice::LookupCode_pskel& DeleteReasonCode,
           ::dataadvice::String255_pskel& DeleteReasonDescription,
           ::xml_schema::integer_pskel& FolioCount)
  {
    this->DeleteReasonCode_parser_ = &DeleteReasonCode;
    this->DeleteReasonDescription_parser_ = &DeleteReasonDescription;
    this->FolioCount_parser_ = &FolioCount;
  }

  DeleteReasonCount_pskel::
  DeleteReasonCount_pskel ()
  : DeleteReasonCode_parser_ (0),
    DeleteReasonDescription_parser_ (0),
    FolioCount_parser_ (0)
  {
  }

  // AssessmentAreaCollection_pskel
  //

  void AssessmentAreaCollection_pskel::
  AssessmentArea_parser (::dataadvice::AssessmentArea_pskel& p)
  {
    this->AssessmentArea_parser_ = &p;
  }

  void AssessmentAreaCollection_pskel::
  parsers (::dataadvice::AssessmentArea_pskel& AssessmentArea)
  {
    this->AssessmentArea_parser_ = &AssessmentArea;
  }

  AssessmentAreaCollection_pskel::
  AssessmentAreaCollection_pskel ()
  : AssessmentArea_parser_ (0)
  {
  }

  // AssessmentArea_pskel
  //

  void AssessmentArea_pskel::
  AssessmentAreaCode_parser (::dataadvice::AssessmentAreaCode_pskel& p)
  {
    this->AssessmentAreaCode_parser_ = &p;
  }

  void AssessmentArea_pskel::
  AssessmentAreaDescription_parser (::dataadvice::String255_pskel& p)
  {
    this->AssessmentAreaDescription_parser_ = &p;
  }

  void AssessmentArea_pskel::
  Jurisdictions_parser (::dataadvice::JurisdictionCollection_pskel& p)
  {
    this->Jurisdictions_parser_ = &p;
  }

  void AssessmentArea_pskel::
  AreaSummary_parser (::dataadvice::DeliverySummary_pskel& p)
  {
    this->AreaSummary_parser_ = &p;
  }

  void AssessmentArea_pskel::
  parsers (::dataadvice::AssessmentAreaCode_pskel& AssessmentAreaCode,
           ::dataadvice::String255_pskel& AssessmentAreaDescription,
           ::dataadvice::JurisdictionCollection_pskel& Jurisdictions,
           ::dataadvice::DeliverySummary_pskel& AreaSummary)
  {
    this->AssessmentAreaCode_parser_ = &AssessmentAreaCode;
    this->AssessmentAreaDescription_parser_ = &AssessmentAreaDescription;
    this->Jurisdictions_parser_ = &Jurisdictions;
    this->AreaSummary_parser_ = &AreaSummary;
  }

  AssessmentArea_pskel::
  AssessmentArea_pskel ()
  : AssessmentAreaCode_parser_ (0),
    AssessmentAreaDescription_parser_ (0),
    Jurisdictions_parser_ (0),
    AreaSummary_parser_ (0)
  {
  }

  // JurisdictionCollection_pskel
  //

  void JurisdictionCollection_pskel::
  Jurisdiction_parser (::dataadvice::Jurisdiction_pskel& p)
  {
    this->Jurisdiction_parser_ = &p;
  }

  void JurisdictionCollection_pskel::
  parsers (::dataadvice::Jurisdiction_pskel& Jurisdiction)
  {
    this->Jurisdiction_parser_ = &Jurisdiction;
  }

  JurisdictionCollection_pskel::
  JurisdictionCollection_pskel ()
  : Jurisdiction_parser_ (0)
  {
  }

  // Jurisdiction_pskel
  //

  void Jurisdiction_pskel::
  JurisdictionCode_parser (::dataadvice::JurisdictionCode_pskel& p)
  {
    this->JurisdictionCode_parser_ = &p;
  }

  void Jurisdiction_pskel::
  JurisdictionDescription_parser (::dataadvice::String255_pskel& p)
  {
    this->JurisdictionDescription_parser_ = &p;
  }

  void Jurisdiction_pskel::
  FolioRecords_parser (::dataadvice::FolioRecordCollection_pskel& p)
  {
    this->FolioRecords_parser_ = &p;
  }

  void Jurisdiction_pskel::
  JurisdictionSummary_parser (::dataadvice::DeliverySummary_pskel& p)
  {
    this->JurisdictionSummary_parser_ = &p;
  }

  void Jurisdiction_pskel::
  parsers (::dataadvice::JurisdictionCode_pskel& JurisdictionCode,
           ::dataadvice::String255_pskel& JurisdictionDescription,
           ::dataadvice::FolioRecordCollection_pskel& FolioRecords,
           ::dataadvice::DeliverySummary_pskel& JurisdictionSummary)
  {
    this->JurisdictionCode_parser_ = &JurisdictionCode;
    this->JurisdictionDescription_parser_ = &JurisdictionDescription;
    this->FolioRecords_parser_ = &FolioRecords;
    this->JurisdictionSummary_parser_ = &JurisdictionSummary;
  }

  Jurisdiction_pskel::
  Jurisdiction_pskel ()
  : JurisdictionCode_parser_ (0),
    JurisdictionDescription_parser_ (0),
    FolioRecords_parser_ (0),
    JurisdictionSummary_parser_ (0)
  {
  }

  // FolioGroupValues_pskel
  //

  void FolioGroupValues_pskel::
  LandValue_parser (::xml_schema::decimal_pskel& p)
  {
    this->LandValue_parser_ = &p;
  }

  void FolioGroupValues_pskel::
  ImprovementValue_parser (::xml_schema::decimal_pskel& p)
  {
    this->ImprovementValue_parser_ = &p;
  }

  void FolioGroupValues_pskel::
  parsers (::xml_schema::decimal_pskel& LandValue,
           ::xml_schema::decimal_pskel& ImprovementValue)
  {
    this->LandValue_parser_ = &LandValue;
    this->ImprovementValue_parser_ = &ImprovementValue;
  }

  FolioGroupValues_pskel::
  FolioGroupValues_pskel ()
  : LandValue_parser_ (0),
    ImprovementValue_parser_ (0)
  {
  }

  // FolioRecordCollection_pskel
  //

  void FolioRecordCollection_pskel::
  FolioRecord_parser (::dataadvice::FolioRecord_pskel& p)
  {
    this->FolioRecord_parser_ = &p;
  }

  void FolioRecordCollection_pskel::
  parsers (::dataadvice::FolioRecord_pskel& FolioRecord)
  {
    this->FolioRecord_parser_ = &FolioRecord;
  }

  FolioRecordCollection_pskel::
  FolioRecordCollection_pskel ()
  : FolioRecord_parser_ (0)
  {
  }

  // FolioRecord_pskel
  //

  void FolioRecord_pskel::
  RollNumber_parser (::dataadvice::FolioRollNumber_pskel& p)
  {
    this->RollNumber_parser_ = &p;
  }

  void FolioRecord_pskel::
  FolioStatus_parser (::dataadvice::FolioLookupCodeItem_pskel& p)
  {
    this->FolioStatus_parser_ = &p;
  }

  void FolioRecord_pskel::
  FolioStatusDescription_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->FolioStatusDescription_parser_ = &p;
  }

  void FolioRecord_pskel::
  FolioAction_parser (::dataadvice::FolioAction_pskel& p)
  {
    this->FolioAction_parser_ = &p;
  }

  void FolioRecord_pskel::
  FolioAddresses_parser (::dataadvice::FolioAddressCollection_pskel& p)
  {
    this->FolioAddresses_parser_ = &p;
  }

  void FolioRecord_pskel::
  OwnershipGroups_parser (::dataadvice::OwnershipGroupCollection_pskel& p)
  {
    this->OwnershipGroups_parser_ = &p;
  }

  void FolioRecord_pskel::
  LegalDescriptions_parser (::dataadvice::LegalDescriptionCollection_pskel& p)
  {
    this->LegalDescriptions_parser_ = &p;
  }

  void FolioRecord_pskel::
  FolioDescription_parser (::dataadvice::FolioDescription_pskel& p)
  {
    this->FolioDescription_parser_ = &p;
  }

  void FolioRecord_pskel::
  Sales_parser (::dataadvice::SaleCollection_pskel& p)
  {
    this->Sales_parser_ = &p;
  }

  void FolioRecord_pskel::
  Values_parser (::dataadvice::PropertyValues_pskel& p)
  {
    this->Values_parser_ = &p;
  }

  void FolioRecord_pskel::
  Amendments_parser (::dataadvice::FolioAmendmentCollection_pskel& p)
  {
    this->Amendments_parser_ = &p;
  }

  void FolioRecord_pskel::
  MinorTaxing_parser (::dataadvice::MinorTaxing_pskel& p)
  {
    this->MinorTaxing_parser_ = &p;
  }

  void FolioRecord_pskel::
  Farms_parser (::dataadvice::FarmCollection_pskel& p)
  {
    this->Farms_parser_ = &p;
  }

  void FolioRecord_pskel::
  ManufacturedHomes_parser (::dataadvice::ManufacturedHomeCollection_pskel& p)
  {
    this->ManufacturedHomes_parser_ = &p;
  }

  void FolioRecord_pskel::
  ManagedForests_parser (::dataadvice::ManagedForestCollection_pskel& p)
  {
    this->ManagedForests_parser_ = &p;
  }

  void FolioRecord_pskel::
  OilAndGas_parser (::dataadvice::OilAndGasCollection_pskel& p)
  {
    this->OilAndGas_parser_ = &p;
  }

  void FolioRecord_pskel::
  LandCharacteristics_parser (::dataadvice::LandCharacteristicCollection_pskel& p)
  {
    this->LandCharacteristics_parser_ = &p;
  }

  void FolioRecord_pskel::
  ID_parser (::dataadvice::UniqueID_pskel& p)
  {
    this->ID_parser_ = &p;
  }

  void FolioRecord_pskel::
  parsers (::dataadvice::FolioRollNumber_pskel& RollNumber,
           ::dataadvice::FolioLookupCodeItem_pskel& FolioStatus,
           ::dataadvice::FolioString255Item_pskel& FolioStatusDescription,
           ::dataadvice::FolioAction_pskel& FolioAction,
           ::dataadvice::FolioAddressCollection_pskel& FolioAddresses,
           ::dataadvice::OwnershipGroupCollection_pskel& OwnershipGroups,
           ::dataadvice::LegalDescriptionCollection_pskel& LegalDescriptions,
           ::dataadvice::FolioDescription_pskel& FolioDescription,
           ::dataadvice::SaleCollection_pskel& Sales,
           ::dataadvice::PropertyValues_pskel& Values,
           ::dataadvice::FolioAmendmentCollection_pskel& Amendments,
           ::dataadvice::MinorTaxing_pskel& MinorTaxing,
           ::dataadvice::FarmCollection_pskel& Farms,
           ::dataadvice::ManufacturedHomeCollection_pskel& ManufacturedHomes,
           ::dataadvice::ManagedForestCollection_pskel& ManagedForests,
           ::dataadvice::OilAndGasCollection_pskel& OilAndGas,
           ::dataadvice::LandCharacteristicCollection_pskel& LandCharacteristics,
           ::dataadvice::UniqueID_pskel& ID)
  {
    this->RollNumber_parser_ = &RollNumber;
    this->FolioStatus_parser_ = &FolioStatus;
    this->FolioStatusDescription_parser_ = &FolioStatusDescription;
    this->FolioAction_parser_ = &FolioAction;
    this->FolioAddresses_parser_ = &FolioAddresses;
    this->OwnershipGroups_parser_ = &OwnershipGroups;
    this->LegalDescriptions_parser_ = &LegalDescriptions;
    this->FolioDescription_parser_ = &FolioDescription;
    this->Sales_parser_ = &Sales;
    this->Values_parser_ = &Values;
    this->Amendments_parser_ = &Amendments;
    this->MinorTaxing_parser_ = &MinorTaxing;
    this->Farms_parser_ = &Farms;
    this->ManufacturedHomes_parser_ = &ManufacturedHomes;
    this->ManagedForests_parser_ = &ManagedForests;
    this->OilAndGas_parser_ = &OilAndGas;
    this->LandCharacteristics_parser_ = &LandCharacteristics;
    this->ID_parser_ = &ID;
  }

  FolioRecord_pskel::
  FolioRecord_pskel ()
  : RollNumber_parser_ (0),
    FolioStatus_parser_ (0),
    FolioStatusDescription_parser_ (0),
    FolioAction_parser_ (0),
    FolioAddresses_parser_ (0),
    OwnershipGroups_parser_ (0),
    LegalDescriptions_parser_ (0),
    FolioDescription_parser_ (0),
    Sales_parser_ (0),
    Values_parser_ (0),
    Amendments_parser_ (0),
    MinorTaxing_parser_ (0),
    Farms_parser_ (0),
    ManufacturedHomes_parser_ (0),
    ManagedForests_parser_ (0),
    OilAndGas_parser_ (0),
    LandCharacteristics_parser_ (0),
    ID_parser_ (0)
  {
  }

  // FolioRollNumber_pskel
  //

  void FolioRollNumber_pskel::
  Action_parser (::dataadvice::ActionCode_pskel& p)
  {
    this->Action_parser_ = &p;
  }

  void FolioRollNumber_pskel::
  OldValue_parser (::dataadvice::String32_pskel& p)
  {
    this->OldValue_parser_ = &p;
  }

  void FolioRollNumber_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::String32_pskel& OldValue)
  {
    this->Action_parser_ = &Action;
    this->OldValue_parser_ = &OldValue;
  }

  FolioRollNumber_pskel::
  FolioRollNumber_pskel ()
  : Action_parser_ (0),
    OldValue_parser_ (0)
  {
  }

  // FolioAction_pskel
  //

  void FolioAction_pskel::
  FolioAdd_parser (::dataadvice::FolioAdd_pskel& p)
  {
    this->FolioAdd_parser_ = &p;
  }

  void FolioAction_pskel::
  FolioDelete_parser (::dataadvice::FolioDelete_pskel& p)
  {
    this->FolioDelete_parser_ = &p;
  }

  void FolioAction_pskel::
  parsers (::dataadvice::FolioAdd_pskel& FolioAdd,
           ::dataadvice::FolioDelete_pskel& FolioDelete)
  {
    this->FolioAdd_parser_ = &FolioAdd;
    this->FolioDelete_parser_ = &FolioDelete;
  }

  FolioAction_pskel::
  FolioAction_pskel ()
  : FolioAdd_parser_ (0),
    FolioDelete_parser_ (0)
  {
  }

  // FolioAdd_pskel
  //

  void FolioAdd_pskel::
  FolioRenumber_parser (::dataadvice::FolioRenumber_pskel& p)
  {
    this->FolioRenumber_parser_ = &p;
  }

  void FolioAdd_pskel::
  parsers (::dataadvice::FolioRenumber_pskel& FolioRenumber)
  {
    this->FolioRenumber_parser_ = &FolioRenumber;
  }

  FolioAdd_pskel::
  FolioAdd_pskel ()
  : FolioRenumber_parser_ (0)
  {
  }

  // FolioDelete_pskel
  //

  void FolioDelete_pskel::
  FolioRenumber_parser (::dataadvice::FolioRenumber_pskel& p)
  {
    this->FolioRenumber_parser_ = &p;
  }

  void FolioDelete_pskel::
  DeleteReasonCode_parser (::dataadvice::LookupCode_pskel& p)
  {
    this->DeleteReasonCode_parser_ = &p;
  }

  void FolioDelete_pskel::
  DeleteReasonDescription_parser (::dataadvice::String255_pskel& p)
  {
    this->DeleteReasonDescription_parser_ = &p;
  }

  void FolioDelete_pskel::
  parsers (::dataadvice::FolioRenumber_pskel& FolioRenumber,
           ::dataadvice::LookupCode_pskel& DeleteReasonCode,
           ::dataadvice::String255_pskel& DeleteReasonDescription)
  {
    this->FolioRenumber_parser_ = &FolioRenumber;
    this->DeleteReasonCode_parser_ = &DeleteReasonCode;
    this->DeleteReasonDescription_parser_ = &DeleteReasonDescription;
  }

  FolioDelete_pskel::
  FolioDelete_pskel ()
  : FolioRenumber_parser_ (0),
    DeleteReasonCode_parser_ (0),
    DeleteReasonDescription_parser_ (0)
  {
  }

  // FolioRenumber_pskel
  //

  void FolioRenumber_pskel::
  AssessmentAreaCode_parser (::dataadvice::AssessmentAreaCode_pskel& p)
  {
    this->AssessmentAreaCode_parser_ = &p;
  }

  void FolioRenumber_pskel::
  AssessmentAreaDescription_parser (::dataadvice::String255_pskel& p)
  {
    this->AssessmentAreaDescription_parser_ = &p;
  }

  void FolioRenumber_pskel::
  JurisdictionCode_parser (::dataadvice::JurisdictionCode_pskel& p)
  {
    this->JurisdictionCode_parser_ = &p;
  }

  void FolioRenumber_pskel::
  JurisdictionDescription_parser (::dataadvice::String255_pskel& p)
  {
    this->JurisdictionDescription_parser_ = &p;
  }

  void FolioRenumber_pskel::
  RollNumber_parser (::dataadvice::String32_pskel& p)
  {
    this->RollNumber_parser_ = &p;
  }

  void FolioRenumber_pskel::
  parsers (::dataadvice::AssessmentAreaCode_pskel& AssessmentAreaCode,
           ::dataadvice::String255_pskel& AssessmentAreaDescription,
           ::dataadvice::JurisdictionCode_pskel& JurisdictionCode,
           ::dataadvice::String255_pskel& JurisdictionDescription,
           ::dataadvice::String32_pskel& RollNumber)
  {
    this->AssessmentAreaCode_parser_ = &AssessmentAreaCode;
    this->AssessmentAreaDescription_parser_ = &AssessmentAreaDescription;
    this->JurisdictionCode_parser_ = &JurisdictionCode;
    this->JurisdictionDescription_parser_ = &JurisdictionDescription;
    this->RollNumber_parser_ = &RollNumber;
  }

  FolioRenumber_pskel::
  FolioRenumber_pskel ()
  : AssessmentAreaCode_parser_ (0),
    AssessmentAreaDescription_parser_ (0),
    JurisdictionCode_parser_ (0),
    JurisdictionDescription_parser_ (0),
    RollNumber_parser_ (0)
  {
  }

  // FolioItemGroup_pskel
  //

  void FolioItemGroup_pskel::
  Action_parser (::dataadvice::ActionCode_pskel& p)
  {
    this->Action_parser_ = &p;
  }

  void FolioItemGroup_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action)
  {
    this->Action_parser_ = &Action;
  }

  FolioItemGroup_pskel::
  FolioItemGroup_pskel ()
  : Action_parser_ (0)
  {
  }

  // FolioAddressCollection_pskel
  //

  void FolioAddressCollection_pskel::
  FolioAddress_parser (::dataadvice::FolioAddress_pskel& p)
  {
    this->FolioAddress_parser_ = &p;
  }

  void FolioAddressCollection_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::FolioAddress_pskel& FolioAddress)
  {
    this->Action_parser_ = &Action;
    this->FolioAddress_parser_ = &FolioAddress;
  }

  FolioAddressCollection_pskel::
  FolioAddressCollection_pskel ()
  : FolioAddress_parser_ (0)
  {
  }

  // FolioAddress_pskel
  //

  void FolioAddress_pskel::
  PrimaryFlag_parser (::dataadvice::FolioBooleanItem_pskel& p)
  {
    this->PrimaryFlag_parser_ = &p;
  }

  void FolioAddress_pskel::
  UnitNumber_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->UnitNumber_parser_ = &p;
  }

  void FolioAddress_pskel::
  StreetNumber_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->StreetNumber_parser_ = &p;
  }

  void FolioAddress_pskel::
  StreetDirectionPrefix_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->StreetDirectionPrefix_parser_ = &p;
  }

  void FolioAddress_pskel::
  StreetName_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->StreetName_parser_ = &p;
  }

  void FolioAddress_pskel::
  StreetType_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->StreetType_parser_ = &p;
  }

  void FolioAddress_pskel::
  StreetDirectionSuffix_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->StreetDirectionSuffix_parser_ = &p;
  }

  void FolioAddress_pskel::
  City_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->City_parser_ = &p;
  }

  void FolioAddress_pskel::
  ProvinceState_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->ProvinceState_parser_ = &p;
  }

  void FolioAddress_pskel::
  PostalZip_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->PostalZip_parser_ = &p;
  }

  void FolioAddress_pskel::
  MapReferenceNumber_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->MapReferenceNumber_parser_ = &p;
  }

  void FolioAddress_pskel::
  ID_parser (::dataadvice::UniqueID_pskel& p)
  {
    this->ID_parser_ = &p;
  }

  void FolioAddress_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::FolioBooleanItem_pskel& PrimaryFlag,
           ::dataadvice::FolioString255Item_pskel& UnitNumber,
           ::dataadvice::FolioString255Item_pskel& StreetNumber,
           ::dataadvice::FolioString255Item_pskel& StreetDirectionPrefix,
           ::dataadvice::FolioString255Item_pskel& StreetName,
           ::dataadvice::FolioString255Item_pskel& StreetType,
           ::dataadvice::FolioString255Item_pskel& StreetDirectionSuffix,
           ::dataadvice::FolioString255Item_pskel& City,
           ::dataadvice::FolioString255Item_pskel& ProvinceState,
           ::dataadvice::FolioString255Item_pskel& PostalZip,
           ::dataadvice::FolioString255Item_pskel& MapReferenceNumber,
           ::dataadvice::UniqueID_pskel& ID)
  {
    this->Action_parser_ = &Action;
    this->PrimaryFlag_parser_ = &PrimaryFlag;
    this->UnitNumber_parser_ = &UnitNumber;
    this->StreetNumber_parser_ = &StreetNumber;
    this->StreetDirectionPrefix_parser_ = &StreetDirectionPrefix;
    this->StreetName_parser_ = &StreetName;
    this->StreetType_parser_ = &StreetType;
    this->StreetDirectionSuffix_parser_ = &StreetDirectionSuffix;
    this->City_parser_ = &City;
    this->ProvinceState_parser_ = &ProvinceState;
    this->PostalZip_parser_ = &PostalZip;
    this->MapReferenceNumber_parser_ = &MapReferenceNumber;
    this->ID_parser_ = &ID;
  }

  FolioAddress_pskel::
  FolioAddress_pskel ()
  : PrimaryFlag_parser_ (0),
    UnitNumber_parser_ (0),
    StreetNumber_parser_ (0),
    StreetDirectionPrefix_parser_ (0),
    StreetName_parser_ (0),
    StreetType_parser_ (0),
    StreetDirectionSuffix_parser_ (0),
    City_parser_ (0),
    ProvinceState_parser_ (0),
    PostalZip_parser_ (0),
    MapReferenceNumber_parser_ (0),
    ID_parser_ (0)
  {
  }

  // OwnershipGroupCollection_pskel
  //

  void OwnershipGroupCollection_pskel::
  OwnershipGroup_parser (::dataadvice::OwnershipGroup_pskel& p)
  {
    this->OwnershipGroup_parser_ = &p;
  }

  void OwnershipGroupCollection_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::OwnershipGroup_pskel& OwnershipGroup)
  {
    this->Action_parser_ = &Action;
    this->OwnershipGroup_parser_ = &OwnershipGroup;
  }

  OwnershipGroupCollection_pskel::
  OwnershipGroupCollection_pskel ()
  : OwnershipGroup_parser_ (0)
  {
  }

  // OwnershipGroup_pskel
  //

  void OwnershipGroup_pskel::
  OwnershipGroupID_parser (::dataadvice::FolioUniqueIDItem_pskel& p)
  {
    this->OwnershipGroupID_parser_ = &p;
  }

  void OwnershipGroup_pskel::
  AssessmentNoticeReturned_parser (::dataadvice::FolioBooleanItem_pskel& p)
  {
    this->AssessmentNoticeReturned_parser_ = &p;
  }

  void OwnershipGroup_pskel::
  AssessmentNoticeSuppressed_parser (::dataadvice::FolioBooleanItem_pskel& p)
  {
    this->AssessmentNoticeSuppressed_parser_ = &p;
  }

  void OwnershipGroup_pskel::
  ChangeType_parser (::dataadvice::FolioLookupCodeItem_pskel& p)
  {
    this->ChangeType_parser_ = &p;
  }

  void OwnershipGroup_pskel::
  ChangeTypeDescription_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->ChangeTypeDescription_parser_ = &p;
  }

  void OwnershipGroup_pskel::
  ChangeDate_parser (::dataadvice::FolioDateItem_pskel& p)
  {
    this->ChangeDate_parser_ = &p;
  }

  void OwnershipGroup_pskel::
  ChangeSource_parser (::dataadvice::FolioLookupCodeItem_pskel& p)
  {
    this->ChangeSource_parser_ = &p;
  }

  void OwnershipGroup_pskel::
  ChangeSourceDescription_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->ChangeSourceDescription_parser_ = &p;
  }

  void OwnershipGroup_pskel::
  Owners_parser (::dataadvice::OwnerCollection_pskel& p)
  {
    this->Owners_parser_ = &p;
  }

  void OwnershipGroup_pskel::
  FormattedMailingAddress_parser (::dataadvice::FormattedMailingAddress_pskel& p)
  {
    this->FormattedMailingAddress_parser_ = &p;
  }

  void OwnershipGroup_pskel::
  MailingAddress_parser (::dataadvice::MailingAddress_pskel& p)
  {
    this->MailingAddress_parser_ = &p;
  }

  void OwnershipGroup_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::FolioUniqueIDItem_pskel& OwnershipGroupID,
           ::dataadvice::FolioBooleanItem_pskel& AssessmentNoticeReturned,
           ::dataadvice::FolioBooleanItem_pskel& AssessmentNoticeSuppressed,
           ::dataadvice::FolioLookupCodeItem_pskel& ChangeType,
           ::dataadvice::FolioString255Item_pskel& ChangeTypeDescription,
           ::dataadvice::FolioDateItem_pskel& ChangeDate,
           ::dataadvice::FolioLookupCodeItem_pskel& ChangeSource,
           ::dataadvice::FolioString255Item_pskel& ChangeSourceDescription,
           ::dataadvice::OwnerCollection_pskel& Owners,
           ::dataadvice::FormattedMailingAddress_pskel& FormattedMailingAddress,
           ::dataadvice::MailingAddress_pskel& MailingAddress)
  {
    this->Action_parser_ = &Action;
    this->OwnershipGroupID_parser_ = &OwnershipGroupID;
    this->AssessmentNoticeReturned_parser_ = &AssessmentNoticeReturned;
    this->AssessmentNoticeSuppressed_parser_ = &AssessmentNoticeSuppressed;
    this->ChangeType_parser_ = &ChangeType;
    this->ChangeTypeDescription_parser_ = &ChangeTypeDescription;
    this->ChangeDate_parser_ = &ChangeDate;
    this->ChangeSource_parser_ = &ChangeSource;
    this->ChangeSourceDescription_parser_ = &ChangeSourceDescription;
    this->Owners_parser_ = &Owners;
    this->FormattedMailingAddress_parser_ = &FormattedMailingAddress;
    this->MailingAddress_parser_ = &MailingAddress;
  }

  OwnershipGroup_pskel::
  OwnershipGroup_pskel ()
  : OwnershipGroupID_parser_ (0),
    AssessmentNoticeReturned_parser_ (0),
    AssessmentNoticeSuppressed_parser_ (0),
    ChangeType_parser_ (0),
    ChangeTypeDescription_parser_ (0),
    ChangeDate_parser_ (0),
    ChangeSource_parser_ (0),
    ChangeSourceDescription_parser_ (0),
    Owners_parser_ (0),
    FormattedMailingAddress_parser_ (0),
    MailingAddress_parser_ (0)
  {
  }

  // OwnerCollection_pskel
  //

  void OwnerCollection_pskel::
  Owner_parser (::dataadvice::Owner_pskel& p)
  {
    this->Owner_parser_ = &p;
  }

  void OwnerCollection_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::Owner_pskel& Owner)
  {
    this->Action_parser_ = &Action;
    this->Owner_parser_ = &Owner;
  }

  OwnerCollection_pskel::
  OwnerCollection_pskel ()
  : Owner_parser_ (0)
  {
  }

  // Owner_pskel
  //

  void Owner_pskel::
  FirstName_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->FirstName_parser_ = &p;
  }

  void Owner_pskel::
  MiddleName_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->MiddleName_parser_ = &p;
  }

  void Owner_pskel::
  MiddleInitial_parser (::dataadvice::FolioString1Item_pskel& p)
  {
    this->MiddleInitial_parser_ = &p;
  }

  void Owner_pskel::
  CompanyOrLastName_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->CompanyOrLastName_parser_ = &p;
  }

  void Owner_pskel::
  OwnerSequenceID_parser (::dataadvice::FolioUniqueIDItem_pskel& p)
  {
    this->OwnerSequenceID_parser_ = &p;
  }

  void Owner_pskel::
  EquityType_parser (::dataadvice::FolioLookupCodeItem_pskel& p)
  {
    this->EquityType_parser_ = &p;
  }

  void Owner_pskel::
  EquityTypeDescription_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->EquityTypeDescription_parser_ = &p;
  }

  void Owner_pskel::
  ID_parser (::dataadvice::UniqueID_pskel& p)
  {
    this->ID_parser_ = &p;
  }

  void Owner_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::FolioString255Item_pskel& FirstName,
           ::dataadvice::FolioString255Item_pskel& MiddleName,
           ::dataadvice::FolioString1Item_pskel& MiddleInitial,
           ::dataadvice::FolioString255Item_pskel& CompanyOrLastName,
           ::dataadvice::FolioUniqueIDItem_pskel& OwnerSequenceID,
           ::dataadvice::FolioLookupCodeItem_pskel& EquityType,
           ::dataadvice::FolioString255Item_pskel& EquityTypeDescription,
           ::dataadvice::UniqueID_pskel& ID)
  {
    this->Action_parser_ = &Action;
    this->FirstName_parser_ = &FirstName;
    this->MiddleName_parser_ = &MiddleName;
    this->MiddleInitial_parser_ = &MiddleInitial;
    this->CompanyOrLastName_parser_ = &CompanyOrLastName;
    this->OwnerSequenceID_parser_ = &OwnerSequenceID;
    this->EquityType_parser_ = &EquityType;
    this->EquityTypeDescription_parser_ = &EquityTypeDescription;
    this->ID_parser_ = &ID;
  }

  Owner_pskel::
  Owner_pskel ()
  : FirstName_parser_ (0),
    MiddleName_parser_ (0),
    MiddleInitial_parser_ (0),
    CompanyOrLastName_parser_ (0),
    OwnerSequenceID_parser_ (0),
    EquityType_parser_ (0),
    EquityTypeDescription_parser_ (0),
    ID_parser_ (0)
  {
  }

  // MailingAddress_pskel
  //

  void MailingAddress_pskel::
  Attention_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->Attention_parser_ = &p;
  }

  void MailingAddress_pskel::
  CareOf_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->CareOf_parser_ = &p;
  }

  void MailingAddress_pskel::
  Floor_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->Floor_parser_ = &p;
  }

  void MailingAddress_pskel::
  UnitNumber_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->UnitNumber_parser_ = &p;
  }

  void MailingAddress_pskel::
  StreetDirectionPrefix_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->StreetDirectionPrefix_parser_ = &p;
  }

  void MailingAddress_pskel::
  StreetNumber_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->StreetNumber_parser_ = &p;
  }

  void MailingAddress_pskel::
  StreetName_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->StreetName_parser_ = &p;
  }

  void MailingAddress_pskel::
  StreetType_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->StreetType_parser_ = &p;
  }

  void MailingAddress_pskel::
  StreetDirectionSuffix_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->StreetDirectionSuffix_parser_ = &p;
  }

  void MailingAddress_pskel::
  City_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->City_parser_ = &p;
  }

  void MailingAddress_pskel::
  ProvinceState_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->ProvinceState_parser_ = &p;
  }

  void MailingAddress_pskel::
  Country_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->Country_parser_ = &p;
  }

  void MailingAddress_pskel::
  PostalZip_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->PostalZip_parser_ = &p;
  }

  void MailingAddress_pskel::
  FreeformAddress_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->FreeformAddress_parser_ = &p;
  }

  void MailingAddress_pskel::
  Compartment_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->Compartment_parser_ = &p;
  }

  void MailingAddress_pskel::
  DeliveryInstallationType_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->DeliveryInstallationType_parser_ = &p;
  }

  void MailingAddress_pskel::
  DeliveryInstallationTypeValue_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->DeliveryInstallationTypeValue_parser_ = &p;
  }

  void MailingAddress_pskel::
  ModeOfDelivery_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->ModeOfDelivery_parser_ = &p;
  }

  void MailingAddress_pskel::
  ModeOfDeliveryValue_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->ModeOfDeliveryValue_parser_ = &p;
  }

  void MailingAddress_pskel::
  Site_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->Site_parser_ = &p;
  }

  void MailingAddress_pskel::
  BulkMailCode_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->BulkMailCode_parser_ = &p;
  }

  void MailingAddress_pskel::
  ID_parser (::dataadvice::UniqueID_pskel& p)
  {
    this->ID_parser_ = &p;
  }

  void MailingAddress_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::FolioString255Item_pskel& Attention,
           ::dataadvice::FolioString255Item_pskel& CareOf,
           ::dataadvice::FolioString255Item_pskel& Floor,
           ::dataadvice::FolioString255Item_pskel& UnitNumber,
           ::dataadvice::FolioString255Item_pskel& StreetDirectionPrefix,
           ::dataadvice::FolioString255Item_pskel& StreetNumber,
           ::dataadvice::FolioString255Item_pskel& StreetName,
           ::dataadvice::FolioString255Item_pskel& StreetType,
           ::dataadvice::FolioString255Item_pskel& StreetDirectionSuffix,
           ::dataadvice::FolioString255Item_pskel& City,
           ::dataadvice::FolioString255Item_pskel& ProvinceState,
           ::dataadvice::FolioString255Item_pskel& Country,
           ::dataadvice::FolioString255Item_pskel& PostalZip,
           ::dataadvice::FolioString255Item_pskel& FreeformAddress,
           ::dataadvice::FolioString255Item_pskel& Compartment,
           ::dataadvice::FolioString255Item_pskel& DeliveryInstallationType,
           ::dataadvice::FolioString255Item_pskel& DeliveryInstallationTypeValue,
           ::dataadvice::FolioString255Item_pskel& ModeOfDelivery,
           ::dataadvice::FolioString255Item_pskel& ModeOfDeliveryValue,
           ::dataadvice::FolioString255Item_pskel& Site,
           ::dataadvice::FolioString255Item_pskel& BulkMailCode,
           ::dataadvice::UniqueID_pskel& ID)
  {
    this->Action_parser_ = &Action;
    this->Attention_parser_ = &Attention;
    this->CareOf_parser_ = &CareOf;
    this->Floor_parser_ = &Floor;
    this->UnitNumber_parser_ = &UnitNumber;
    this->StreetDirectionPrefix_parser_ = &StreetDirectionPrefix;
    this->StreetNumber_parser_ = &StreetNumber;
    this->StreetName_parser_ = &StreetName;
    this->StreetType_parser_ = &StreetType;
    this->StreetDirectionSuffix_parser_ = &StreetDirectionSuffix;
    this->City_parser_ = &City;
    this->ProvinceState_parser_ = &ProvinceState;
    this->Country_parser_ = &Country;
    this->PostalZip_parser_ = &PostalZip;
    this->FreeformAddress_parser_ = &FreeformAddress;
    this->Compartment_parser_ = &Compartment;
    this->DeliveryInstallationType_parser_ = &DeliveryInstallationType;
    this->DeliveryInstallationTypeValue_parser_ = &DeliveryInstallationTypeValue;
    this->ModeOfDelivery_parser_ = &ModeOfDelivery;
    this->ModeOfDeliveryValue_parser_ = &ModeOfDeliveryValue;
    this->Site_parser_ = &Site;
    this->BulkMailCode_parser_ = &BulkMailCode;
    this->ID_parser_ = &ID;
  }

  MailingAddress_pskel::
  MailingAddress_pskel ()
  : Attention_parser_ (0),
    CareOf_parser_ (0),
    Floor_parser_ (0),
    UnitNumber_parser_ (0),
    StreetDirectionPrefix_parser_ (0),
    StreetNumber_parser_ (0),
    StreetName_parser_ (0),
    StreetType_parser_ (0),
    StreetDirectionSuffix_parser_ (0),
    City_parser_ (0),
    ProvinceState_parser_ (0),
    Country_parser_ (0),
    PostalZip_parser_ (0),
    FreeformAddress_parser_ (0),
    Compartment_parser_ (0),
    DeliveryInstallationType_parser_ (0),
    DeliveryInstallationTypeValue_parser_ (0),
    ModeOfDelivery_parser_ (0),
    ModeOfDeliveryValue_parser_ (0),
    Site_parser_ (0),
    BulkMailCode_parser_ (0),
    ID_parser_ (0)
  {
  }

  // FormattedMailingAddress_pskel
  //

  void FormattedMailingAddress_pskel::
  Line1_parser (::dataadvice::FormattedMailingAddressLine_pskel& p)
  {
    this->Line1_parser_ = &p;
  }

  void FormattedMailingAddress_pskel::
  Line2_parser (::dataadvice::FormattedMailingAddressLine_pskel& p)
  {
    this->Line2_parser_ = &p;
  }

  void FormattedMailingAddress_pskel::
  Line3_parser (::dataadvice::FormattedMailingAddressLine_pskel& p)
  {
    this->Line3_parser_ = &p;
  }

  void FormattedMailingAddress_pskel::
  Line4_parser (::dataadvice::FormattedMailingAddressLine_pskel& p)
  {
    this->Line4_parser_ = &p;
  }

  void FormattedMailingAddress_pskel::
  Line5_parser (::dataadvice::FormattedMailingAddressLine_pskel& p)
  {
    this->Line5_parser_ = &p;
  }

  void FormattedMailingAddress_pskel::
  Line6_parser (::dataadvice::FormattedMailingAddressLine_pskel& p)
  {
    this->Line6_parser_ = &p;
  }

  void FormattedMailingAddress_pskel::
  ID_parser (::dataadvice::UniqueID_pskel& p)
  {
    this->ID_parser_ = &p;
  }

  void FormattedMailingAddress_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::FormattedMailingAddressLine_pskel& Line1,
           ::dataadvice::FormattedMailingAddressLine_pskel& Line2,
           ::dataadvice::FormattedMailingAddressLine_pskel& Line3,
           ::dataadvice::FormattedMailingAddressLine_pskel& Line4,
           ::dataadvice::FormattedMailingAddressLine_pskel& Line5,
           ::dataadvice::FormattedMailingAddressLine_pskel& Line6,
           ::dataadvice::UniqueID_pskel& ID)
  {
    this->Action_parser_ = &Action;
    this->Line1_parser_ = &Line1;
    this->Line2_parser_ = &Line2;
    this->Line3_parser_ = &Line3;
    this->Line4_parser_ = &Line4;
    this->Line5_parser_ = &Line5;
    this->Line6_parser_ = &Line6;
    this->ID_parser_ = &ID;
  }

  FormattedMailingAddress_pskel::
  FormattedMailingAddress_pskel ()
  : Line1_parser_ (0),
    Line2_parser_ (0),
    Line3_parser_ (0),
    Line4_parser_ (0),
    Line5_parser_ (0),
    Line6_parser_ (0),
    ID_parser_ (0)
  {
  }

  // FormattedMailingAddressLine_pskel
  //

  void FormattedMailingAddressLine_pskel::
  Action_parser (::dataadvice::ActionCode_pskel& p)
  {
    this->Action_parser_ = &p;
  }

  void FormattedMailingAddressLine_pskel::
  OldValue_parser (::dataadvice::String40_pskel& p)
  {
    this->OldValue_parser_ = &p;
  }

  void FormattedMailingAddressLine_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::String40_pskel& OldValue)
  {
    this->Action_parser_ = &Action;
    this->OldValue_parser_ = &OldValue;
  }

  FormattedMailingAddressLine_pskel::
  FormattedMailingAddressLine_pskel ()
  : Action_parser_ (0),
    OldValue_parser_ (0)
  {
  }

  // LegalDescriptionCollection_pskel
  //

  void LegalDescriptionCollection_pskel::
  LegalDescription_parser (::dataadvice::LegalDescription_pskel& p)
  {
    this->LegalDescription_parser_ = &p;
  }

  void LegalDescriptionCollection_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::LegalDescription_pskel& LegalDescription)
  {
    this->Action_parser_ = &Action;
    this->LegalDescription_parser_ = &LegalDescription;
  }

  LegalDescriptionCollection_pskel::
  LegalDescriptionCollection_pskel ()
  : LegalDescription_parser_ (0)
  {
  }

  // LegalDescription_pskel
  //

  void LegalDescription_pskel::
  FormattedLegalDescription_parser (::dataadvice::FolioString1024Item_pskel& p)
  {
    this->FormattedLegalDescription_parser_ = &p;
  }

  void LegalDescription_pskel::
  PID_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->PID_parser_ = &p;
  }

  void LegalDescription_pskel::
  Lot_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->Lot_parser_ = &p;
  }

  void LegalDescription_pskel::
  StrataLot_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->StrataLot_parser_ = &p;
  }

  void LegalDescription_pskel::
  Parcel_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->Parcel_parser_ = &p;
  }

  void LegalDescription_pskel::
  Block_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->Block_parser_ = &p;
  }

  void LegalDescription_pskel::
  SubBlock_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->SubBlock_parser_ = &p;
  }

  void LegalDescription_pskel::
  Plan_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->Plan_parser_ = &p;
  }

  void LegalDescription_pskel::
  SubLot_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->SubLot_parser_ = &p;
  }

  void LegalDescription_pskel::
  Part1_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->Part1_parser_ = &p;
  }

  void LegalDescription_pskel::
  Part2_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->Part2_parser_ = &p;
  }

  void LegalDescription_pskel::
  Part3_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->Part3_parser_ = &p;
  }

  void LegalDescription_pskel::
  Part4_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->Part4_parser_ = &p;
  }

  void LegalDescription_pskel::
  DistrictLot_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->DistrictLot_parser_ = &p;
  }

  void LegalDescription_pskel::
  LegalSubdivision_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->LegalSubdivision_parser_ = &p;
  }

  void LegalDescription_pskel::
  Section_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->Section_parser_ = &p;
  }

  void LegalDescription_pskel::
  Township_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->Township_parser_ = &p;
  }

  void LegalDescription_pskel::
  Range_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->Range_parser_ = &p;
  }

  void LegalDescription_pskel::
  Meridian_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->Meridian_parser_ = &p;
  }

  void LegalDescription_pskel::
  MeridianShort_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->MeridianShort_parser_ = &p;
  }

  void LegalDescription_pskel::
  BCAGroup_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->BCAGroup_parser_ = &p;
  }

  void LegalDescription_pskel::
  LandDistrict_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->LandDistrict_parser_ = &p;
  }

  void LegalDescription_pskel::
  LandDistrictDescription_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->LandDistrictDescription_parser_ = &p;
  }

  void LegalDescription_pskel::
  Portion_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->Portion_parser_ = &p;
  }

  void LegalDescription_pskel::
  ExceptPlan_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->ExceptPlan_parser_ = &p;
  }

  void LegalDescription_pskel::
  FirstNationReserveNumber_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->FirstNationReserveNumber_parser_ = &p;
  }

  void LegalDescription_pskel::
  FirstNationReserveDescription_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->FirstNationReserveDescription_parser_ = &p;
  }

  void LegalDescription_pskel::
  LeaseLicenceNumber_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->LeaseLicenceNumber_parser_ = &p;
  }

  void LegalDescription_pskel::
  LandBranchFileNumber_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->LandBranchFileNumber_parser_ = &p;
  }

  void LegalDescription_pskel::
  AirSpaceParcelNumber_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->AirSpaceParcelNumber_parser_ = &p;
  }

  void LegalDescription_pskel::
  NtsLocation_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->NtsLocation_parser_ = &p;
  }

  void LegalDescription_pskel::
  LegalText_parser (::dataadvice::FolioString1024Item_pskel& p)
  {
    this->LegalText_parser_ = &p;
  }

  void LegalDescription_pskel::
  ID_parser (::dataadvice::UniqueID_pskel& p)
  {
    this->ID_parser_ = &p;
  }

  void LegalDescription_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::FolioString1024Item_pskel& FormattedLegalDescription,
           ::dataadvice::FolioString255Item_pskel& PID,
           ::dataadvice::FolioString255Item_pskel& Lot,
           ::dataadvice::FolioString255Item_pskel& StrataLot,
           ::dataadvice::FolioString255Item_pskel& Parcel,
           ::dataadvice::FolioString255Item_pskel& Block,
           ::dataadvice::FolioString255Item_pskel& SubBlock,
           ::dataadvice::FolioString255Item_pskel& Plan,
           ::dataadvice::FolioString255Item_pskel& SubLot,
           ::dataadvice::FolioString255Item_pskel& Part1,
           ::dataadvice::FolioString255Item_pskel& Part2,
           ::dataadvice::FolioString255Item_pskel& Part3,
           ::dataadvice::FolioString255Item_pskel& Part4,
           ::dataadvice::FolioString255Item_pskel& DistrictLot,
           ::dataadvice::FolioString255Item_pskel& LegalSubdivision,
           ::dataadvice::FolioString255Item_pskel& Section,
           ::dataadvice::FolioString255Item_pskel& Township,
           ::dataadvice::FolioString255Item_pskel& Range,
           ::dataadvice::FolioString255Item_pskel& Meridian,
           ::dataadvice::FolioString255Item_pskel& MeridianShort,
           ::dataadvice::FolioString255Item_pskel& BCAGroup,
           ::dataadvice::FolioString255Item_pskel& LandDistrict,
           ::dataadvice::FolioString255Item_pskel& LandDistrictDescription,
           ::dataadvice::FolioString255Item_pskel& Portion,
           ::dataadvice::FolioString255Item_pskel& ExceptPlan,
           ::dataadvice::FolioString255Item_pskel& FirstNationReserveNumber,
           ::dataadvice::FolioString255Item_pskel& FirstNationReserveDescription,
           ::dataadvice::FolioString255Item_pskel& LeaseLicenceNumber,
           ::dataadvice::FolioString255Item_pskel& LandBranchFileNumber,
           ::dataadvice::FolioString255Item_pskel& AirSpaceParcelNumber,
           ::dataadvice::FolioString255Item_pskel& NtsLocation,
           ::dataadvice::FolioString1024Item_pskel& LegalText,
           ::dataadvice::UniqueID_pskel& ID)
  {
    this->Action_parser_ = &Action;
    this->FormattedLegalDescription_parser_ = &FormattedLegalDescription;
    this->PID_parser_ = &PID;
    this->Lot_parser_ = &Lot;
    this->StrataLot_parser_ = &StrataLot;
    this->Parcel_parser_ = &Parcel;
    this->Block_parser_ = &Block;
    this->SubBlock_parser_ = &SubBlock;
    this->Plan_parser_ = &Plan;
    this->SubLot_parser_ = &SubLot;
    this->Part1_parser_ = &Part1;
    this->Part2_parser_ = &Part2;
    this->Part3_parser_ = &Part3;
    this->Part4_parser_ = &Part4;
    this->DistrictLot_parser_ = &DistrictLot;
    this->LegalSubdivision_parser_ = &LegalSubdivision;
    this->Section_parser_ = &Section;
    this->Township_parser_ = &Township;
    this->Range_parser_ = &Range;
    this->Meridian_parser_ = &Meridian;
    this->MeridianShort_parser_ = &MeridianShort;
    this->BCAGroup_parser_ = &BCAGroup;
    this->LandDistrict_parser_ = &LandDistrict;
    this->LandDistrictDescription_parser_ = &LandDistrictDescription;
    this->Portion_parser_ = &Portion;
    this->ExceptPlan_parser_ = &ExceptPlan;
    this->FirstNationReserveNumber_parser_ = &FirstNationReserveNumber;
    this->FirstNationReserveDescription_parser_ = &FirstNationReserveDescription;
    this->LeaseLicenceNumber_parser_ = &LeaseLicenceNumber;
    this->LandBranchFileNumber_parser_ = &LandBranchFileNumber;
    this->AirSpaceParcelNumber_parser_ = &AirSpaceParcelNumber;
    this->NtsLocation_parser_ = &NtsLocation;
    this->LegalText_parser_ = &LegalText;
    this->ID_parser_ = &ID;
  }

  LegalDescription_pskel::
  LegalDescription_pskel ()
  : FormattedLegalDescription_parser_ (0),
    PID_parser_ (0),
    Lot_parser_ (0),
    StrataLot_parser_ (0),
    Parcel_parser_ (0),
    Block_parser_ (0),
    SubBlock_parser_ (0),
    Plan_parser_ (0),
    SubLot_parser_ (0),
    Part1_parser_ (0),
    Part2_parser_ (0),
    Part3_parser_ (0),
    Part4_parser_ (0),
    DistrictLot_parser_ (0),
    LegalSubdivision_parser_ (0),
    Section_parser_ (0),
    Township_parser_ (0),
    Range_parser_ (0),
    Meridian_parser_ (0),
    MeridianShort_parser_ (0),
    BCAGroup_parser_ (0),
    LandDistrict_parser_ (0),
    LandDistrictDescription_parser_ (0),
    Portion_parser_ (0),
    ExceptPlan_parser_ (0),
    FirstNationReserveNumber_parser_ (0),
    FirstNationReserveDescription_parser_ (0),
    LeaseLicenceNumber_parser_ (0),
    LandBranchFileNumber_parser_ (0),
    AirSpaceParcelNumber_parser_ (0),
    NtsLocation_parser_ (0),
    LegalText_parser_ (0),
    ID_parser_ (0)
  {
  }

  // LandCharacteristic_pskel
  //

  void LandCharacteristic_pskel::
  LandCharacteristicCode_parser (::dataadvice::FolioLookupCodeItem_pskel& p)
  {
    this->LandCharacteristicCode_parser_ = &p;
  }

  void LandCharacteristic_pskel::
  LandCharacteristicDescription_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->LandCharacteristicDescription_parser_ = &p;
  }

  void LandCharacteristic_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::FolioLookupCodeItem_pskel& LandCharacteristicCode,
           ::dataadvice::FolioString255Item_pskel& LandCharacteristicDescription)
  {
    this->Action_parser_ = &Action;
    this->LandCharacteristicCode_parser_ = &LandCharacteristicCode;
    this->LandCharacteristicDescription_parser_ = &LandCharacteristicDescription;
  }

  LandCharacteristic_pskel::
  LandCharacteristic_pskel ()
  : LandCharacteristicCode_parser_ (0),
    LandCharacteristicDescription_parser_ (0)
  {
  }

  // LandCharacteristicCollection_pskel
  //

  void LandCharacteristicCollection_pskel::
  LandCharacteristic_parser (::dataadvice::LandCharacteristic_pskel& p)
  {
    this->LandCharacteristic_parser_ = &p;
  }

  void LandCharacteristicCollection_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::LandCharacteristic_pskel& LandCharacteristic)
  {
    this->Action_parser_ = &Action;
    this->LandCharacteristic_parser_ = &LandCharacteristic;
  }

  LandCharacteristicCollection_pskel::
  LandCharacteristicCollection_pskel ()
  : LandCharacteristic_parser_ (0)
  {
  }

  // ManufacturedHomeCollection_pskel
  //

  void ManufacturedHomeCollection_pskel::
  ManufacturedHome_parser (::dataadvice::ManufacturedHome_pskel& p)
  {
    this->ManufacturedHome_parser_ = &p;
  }

  void ManufacturedHomeCollection_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::ManufacturedHome_pskel& ManufacturedHome)
  {
    this->Action_parser_ = &Action;
    this->ManufacturedHome_parser_ = &ManufacturedHome;
  }

  ManufacturedHomeCollection_pskel::
  ManufacturedHomeCollection_pskel ()
  : ManufacturedHome_parser_ (0)
  {
  }

  // ManufacturedHome_pskel
  //

  void ManufacturedHome_pskel::
  MHRegistryNumber_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->MHRegistryNumber_parser_ = &p;
  }

  void ManufacturedHome_pskel::
  MHBayNumber_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->MHBayNumber_parser_ = &p;
  }

  void ManufacturedHome_pskel::
  MHPark_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->MHPark_parser_ = &p;
  }

  void ManufacturedHome_pskel::
  MHParkRollNumber_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->MHParkRollNumber_parser_ = &p;
  }

  void ManufacturedHome_pskel::
  ID_parser (::dataadvice::UniqueID_pskel& p)
  {
    this->ID_parser_ = &p;
  }

  void ManufacturedHome_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::FolioString255Item_pskel& MHRegistryNumber,
           ::dataadvice::FolioString255Item_pskel& MHBayNumber,
           ::dataadvice::FolioString255Item_pskel& MHPark,
           ::dataadvice::FolioString255Item_pskel& MHParkRollNumber,
           ::dataadvice::UniqueID_pskel& ID)
  {
    this->Action_parser_ = &Action;
    this->MHRegistryNumber_parser_ = &MHRegistryNumber;
    this->MHBayNumber_parser_ = &MHBayNumber;
    this->MHPark_parser_ = &MHPark;
    this->MHParkRollNumber_parser_ = &MHParkRollNumber;
    this->ID_parser_ = &ID;
  }

  ManufacturedHome_pskel::
  ManufacturedHome_pskel ()
  : MHRegistryNumber_parser_ (0),
    MHBayNumber_parser_ (0),
    MHPark_parser_ (0),
    MHParkRollNumber_parser_ (0),
    ID_parser_ (0)
  {
  }

  // FarmCollection_pskel
  //

  void FarmCollection_pskel::
  Farm_parser (::dataadvice::Farm_pskel& p)
  {
    this->Farm_parser_ = &p;
  }

  void FarmCollection_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::Farm_pskel& Farm)
  {
    this->Action_parser_ = &Action;
    this->Farm_parser_ = &Farm;
  }

  FarmCollection_pskel::
  FarmCollection_pskel ()
  : Farm_parser_ (0)
  {
  }

  // Farm_pskel
  //

  void Farm_pskel::
  FarmNumber_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->FarmNumber_parser_ = &p;
  }

  void Farm_pskel::
  ID_parser (::dataadvice::UniqueID_pskel& p)
  {
    this->ID_parser_ = &p;
  }

  void Farm_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::FolioString255Item_pskel& FarmNumber,
           ::dataadvice::UniqueID_pskel& ID)
  {
    this->Action_parser_ = &Action;
    this->FarmNumber_parser_ = &FarmNumber;
    this->ID_parser_ = &ID;
  }

  Farm_pskel::
  Farm_pskel ()
  : FarmNumber_parser_ (0),
    ID_parser_ (0)
  {
  }

  // OilAndGasCollection_pskel
  //

  void OilAndGasCollection_pskel::
  OilAndGas_parser (::dataadvice::OilAndGas_pskel& p)
  {
    this->OilAndGas_parser_ = &p;
  }

  void OilAndGasCollection_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::OilAndGas_pskel& OilAndGas)
  {
    this->Action_parser_ = &Action;
    this->OilAndGas_parser_ = &OilAndGas;
  }

  OilAndGasCollection_pskel::
  OilAndGasCollection_pskel ()
  : OilAndGas_parser_ (0)
  {
  }

  // OilAndGas_pskel
  //

  void OilAndGas_pskel::
  PipelineProjectNumber_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->PipelineProjectNumber_parser_ = &p;
  }

  void OilAndGas_pskel::
  ID_parser (::dataadvice::UniqueID_pskel& p)
  {
    this->ID_parser_ = &p;
  }

  void OilAndGas_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::FolioString255Item_pskel& PipelineProjectNumber,
           ::dataadvice::UniqueID_pskel& ID)
  {
    this->Action_parser_ = &Action;
    this->PipelineProjectNumber_parser_ = &PipelineProjectNumber;
    this->ID_parser_ = &ID;
  }

  OilAndGas_pskel::
  OilAndGas_pskel ()
  : PipelineProjectNumber_parser_ (0),
    ID_parser_ (0)
  {
  }

  // ManagedForestCollection_pskel
  //

  void ManagedForestCollection_pskel::
  ManagedForest_parser (::dataadvice::ManagedForest_pskel& p)
  {
    this->ManagedForest_parser_ = &p;
  }

  void ManagedForestCollection_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::ManagedForest_pskel& ManagedForest)
  {
    this->Action_parser_ = &Action;
    this->ManagedForest_parser_ = &ManagedForest;
  }

  ManagedForestCollection_pskel::
  ManagedForestCollection_pskel ()
  : ManagedForest_parser_ (0)
  {
  }

  // ManagedForest_pskel
  //

  void ManagedForest_pskel::
  ManagedForestNumber_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->ManagedForestNumber_parser_ = &p;
  }

  void ManagedForest_pskel::
  ID_parser (::dataadvice::UniqueID_pskel& p)
  {
    this->ID_parser_ = &p;
  }

  void ManagedForest_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::FolioString255Item_pskel& ManagedForestNumber,
           ::dataadvice::UniqueID_pskel& ID)
  {
    this->Action_parser_ = &Action;
    this->ManagedForestNumber_parser_ = &ManagedForestNumber;
    this->ID_parser_ = &ID;
  }

  ManagedForest_pskel::
  ManagedForest_pskel ()
  : ManagedForestNumber_parser_ (0),
    ID_parser_ (0)
  {
  }

  // FolioAmendmentCollection_pskel
  //

  void FolioAmendmentCollection_pskel::
  Amendment_parser (::dataadvice::FolioAmendment_pskel& p)
  {
    this->Amendment_parser_ = &p;
  }

  void FolioAmendmentCollection_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::FolioAmendment_pskel& Amendment)
  {
    this->Action_parser_ = &Action;
    this->Amendment_parser_ = &Amendment;
  }

  FolioAmendmentCollection_pskel::
  FolioAmendmentCollection_pskel ()
  : Amendment_parser_ (0)
  {
  }

  // FolioAmendment_pskel
  //

  void FolioAmendment_pskel::
  AmendmentType_parser (::dataadvice::FolioLookupCodeItem_pskel& p)
  {
    this->AmendmentType_parser_ = &p;
  }

  void FolioAmendment_pskel::
  AmendmentTypeDescription_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->AmendmentTypeDescription_parser_ = &p;
  }

  void FolioAmendment_pskel::
  AmendmentReasonCode_parser (::dataadvice::FolioLookupCodeItem_pskel& p)
  {
    this->AmendmentReasonCode_parser_ = &p;
  }

  void FolioAmendment_pskel::
  AmendmentReasonDescription_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->AmendmentReasonDescription_parser_ = &p;
  }

  void FolioAmendment_pskel::
  SuppOccupancyDate_parser (::dataadvice::FolioDateItem_pskel& p)
  {
    this->SuppOccupancyDate_parser_ = &p;
  }

  void FolioAmendment_pskel::
  SuppOccupancyCode_parser (::dataadvice::FolioString1Item_pskel& p)
  {
    this->SuppOccupancyCode_parser_ = &p;
  }

  void FolioAmendment_pskel::
  ID_parser (::dataadvice::UniqueID_pskel& p)
  {
    this->ID_parser_ = &p;
  }

  void FolioAmendment_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::FolioLookupCodeItem_pskel& AmendmentType,
           ::dataadvice::FolioString255Item_pskel& AmendmentTypeDescription,
           ::dataadvice::FolioLookupCodeItem_pskel& AmendmentReasonCode,
           ::dataadvice::FolioString255Item_pskel& AmendmentReasonDescription,
           ::dataadvice::FolioDateItem_pskel& SuppOccupancyDate,
           ::dataadvice::FolioString1Item_pskel& SuppOccupancyCode,
           ::dataadvice::UniqueID_pskel& ID)
  {
    this->Action_parser_ = &Action;
    this->AmendmentType_parser_ = &AmendmentType;
    this->AmendmentTypeDescription_parser_ = &AmendmentTypeDescription;
    this->AmendmentReasonCode_parser_ = &AmendmentReasonCode;
    this->AmendmentReasonDescription_parser_ = &AmendmentReasonDescription;
    this->SuppOccupancyDate_parser_ = &SuppOccupancyDate;
    this->SuppOccupancyCode_parser_ = &SuppOccupancyCode;
    this->ID_parser_ = &ID;
  }

  FolioAmendment_pskel::
  FolioAmendment_pskel ()
  : AmendmentType_parser_ (0),
    AmendmentTypeDescription_parser_ (0),
    AmendmentReasonCode_parser_ (0),
    AmendmentReasonDescription_parser_ (0),
    SuppOccupancyDate_parser_ (0),
    SuppOccupancyCode_parser_ (0),
    ID_parser_ (0)
  {
  }

  // SaleCollection_pskel
  //

  void SaleCollection_pskel::
  Sale_parser (::dataadvice::Sale_pskel& p)
  {
    this->Sale_parser_ = &p;
  }

  void SaleCollection_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::Sale_pskel& Sale)
  {
    this->Action_parser_ = &Action;
    this->Sale_parser_ = &Sale;
  }

  SaleCollection_pskel::
  SaleCollection_pskel ()
  : Sale_parser_ (0)
  {
  }

  // Sale_pskel
  //

  void Sale_pskel::
  DocumentNumber_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->DocumentNumber_parser_ = &p;
  }

  void Sale_pskel::
  ConveyanceDate_parser (::dataadvice::FolioDateItem_pskel& p)
  {
    this->ConveyanceDate_parser_ = &p;
  }

  void Sale_pskel::
  ConveyancePrice_parser (::dataadvice::FolioDecimalItem_pskel& p)
  {
    this->ConveyancePrice_parser_ = &p;
  }

  void Sale_pskel::
  ConveyanceType_parser (::dataadvice::FolioLookupCodeItem_pskel& p)
  {
    this->ConveyanceType_parser_ = &p;
  }

  void Sale_pskel::
  ConveyanceTypeDescription_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->ConveyanceTypeDescription_parser_ = &p;
  }

  void Sale_pskel::
  RejectReasonCode_parser (::dataadvice::FolioLookupCodeItem_pskel& p)
  {
    this->RejectReasonCode_parser_ = &p;
  }

  void Sale_pskel::
  RejectReasonDescription_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->RejectReasonDescription_parser_ = &p;
  }

  void Sale_pskel::
  ID_parser (::dataadvice::UniqueID_pskel& p)
  {
    this->ID_parser_ = &p;
  }

  void Sale_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::FolioString255Item_pskel& DocumentNumber,
           ::dataadvice::FolioDateItem_pskel& ConveyanceDate,
           ::dataadvice::FolioDecimalItem_pskel& ConveyancePrice,
           ::dataadvice::FolioLookupCodeItem_pskel& ConveyanceType,
           ::dataadvice::FolioString255Item_pskel& ConveyanceTypeDescription,
           ::dataadvice::FolioLookupCodeItem_pskel& RejectReasonCode,
           ::dataadvice::FolioString255Item_pskel& RejectReasonDescription,
           ::dataadvice::UniqueID_pskel& ID)
  {
    this->Action_parser_ = &Action;
    this->DocumentNumber_parser_ = &DocumentNumber;
    this->ConveyanceDate_parser_ = &ConveyanceDate;
    this->ConveyancePrice_parser_ = &ConveyancePrice;
    this->ConveyanceType_parser_ = &ConveyanceType;
    this->ConveyanceTypeDescription_parser_ = &ConveyanceTypeDescription;
    this->RejectReasonCode_parser_ = &RejectReasonCode;
    this->RejectReasonDescription_parser_ = &RejectReasonDescription;
    this->ID_parser_ = &ID;
  }

  Sale_pskel::
  Sale_pskel ()
  : DocumentNumber_parser_ (0),
    ConveyanceDate_parser_ (0),
    ConveyancePrice_parser_ (0),
    ConveyanceType_parser_ (0),
    ConveyanceTypeDescription_parser_ (0),
    RejectReasonCode_parser_ (0),
    RejectReasonDescription_parser_ (0),
    ID_parser_ (0)
  {
  }

  // FolioDescription_pskel
  //

  void FolioDescription_pskel::
  Neighbourhood_parser (::dataadvice::Neighbourhood_pskel& p)
  {
    this->Neighbourhood_parser_ = &p;
  }

  void FolioDescription_pskel::
  ActualUseCode_parser (::dataadvice::FolioLookupCodeItem_pskel& p)
  {
    this->ActualUseCode_parser_ = &p;
  }

  void FolioDescription_pskel::
  ActualUseDescription_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->ActualUseDescription_parser_ = &p;
  }

  void FolioDescription_pskel::
  VacantFlag_parser (::dataadvice::FolioBooleanItem_pskel& p)
  {
    this->VacantFlag_parser_ = &p;
  }

  void FolioDescription_pskel::
  BCTransitFlag_parser (::dataadvice::FolioBooleanItem_pskel& p)
  {
    this->BCTransitFlag_parser_ = &p;
  }

  void FolioDescription_pskel::
  PoliceTaxFlag_parser (::dataadvice::FolioBooleanItem_pskel& p)
  {
    this->PoliceTaxFlag_parser_ = &p;
  }

  void FolioDescription_pskel::
  ALRCode_parser (::dataadvice::FolioLookupCodeItem_pskel& p)
  {
    this->ALRCode_parser_ = &p;
  }

  void FolioDescription_pskel::
  ALRDescription_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->ALRDescription_parser_ = &p;
  }

  void FolioDescription_pskel::
  TenureCode_parser (::dataadvice::FolioLookupCodeItem_pskel& p)
  {
    this->TenureCode_parser_ = &p;
  }

  void FolioDescription_pskel::
  TenureDescription_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->TenureDescription_parser_ = &p;
  }

  void FolioDescription_pskel::
  ParkingArea_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->ParkingArea_parser_ = &p;
  }

  void FolioDescription_pskel::
  LandMeasurement_parser (::dataadvice::LandMeasurement_pskel& p)
  {
    this->LandMeasurement_parser_ = &p;
  }

  void FolioDescription_pskel::
  SchoolDistrict_parser (::dataadvice::SpecialDistrict_pskel& p)
  {
    this->SchoolDistrict_parser_ = &p;
  }

  void FolioDescription_pskel::
  RegionalDistrict_parser (::dataadvice::SpecialDistrict_pskel& p)
  {
    this->RegionalDistrict_parser_ = &p;
  }

  void FolioDescription_pskel::
  RegionalHospitalDistrict_parser (::dataadvice::SpecialDistrict_pskel& p)
  {
    this->RegionalHospitalDistrict_parser_ = &p;
  }

  void FolioDescription_pskel::
  PredominantManualClass_parser (::dataadvice::ManualClass_pskel& p)
  {
    this->PredominantManualClass_parser_ = &p;
  }

  void FolioDescription_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::Neighbourhood_pskel& Neighbourhood,
           ::dataadvice::FolioLookupCodeItem_pskel& ActualUseCode,
           ::dataadvice::FolioString255Item_pskel& ActualUseDescription,
           ::dataadvice::FolioBooleanItem_pskel& VacantFlag,
           ::dataadvice::FolioBooleanItem_pskel& BCTransitFlag,
           ::dataadvice::FolioBooleanItem_pskel& PoliceTaxFlag,
           ::dataadvice::FolioLookupCodeItem_pskel& ALRCode,
           ::dataadvice::FolioString255Item_pskel& ALRDescription,
           ::dataadvice::FolioLookupCodeItem_pskel& TenureCode,
           ::dataadvice::FolioString255Item_pskel& TenureDescription,
           ::dataadvice::FolioString255Item_pskel& ParkingArea,
           ::dataadvice::LandMeasurement_pskel& LandMeasurement,
           ::dataadvice::SpecialDistrict_pskel& SchoolDistrict,
           ::dataadvice::SpecialDistrict_pskel& RegionalDistrict,
           ::dataadvice::SpecialDistrict_pskel& RegionalHospitalDistrict,
           ::dataadvice::ManualClass_pskel& PredominantManualClass)
  {
    this->Action_parser_ = &Action;
    this->Neighbourhood_parser_ = &Neighbourhood;
    this->ActualUseCode_parser_ = &ActualUseCode;
    this->ActualUseDescription_parser_ = &ActualUseDescription;
    this->VacantFlag_parser_ = &VacantFlag;
    this->BCTransitFlag_parser_ = &BCTransitFlag;
    this->PoliceTaxFlag_parser_ = &PoliceTaxFlag;
    this->ALRCode_parser_ = &ALRCode;
    this->ALRDescription_parser_ = &ALRDescription;
    this->TenureCode_parser_ = &TenureCode;
    this->TenureDescription_parser_ = &TenureDescription;
    this->ParkingArea_parser_ = &ParkingArea;
    this->LandMeasurement_parser_ = &LandMeasurement;
    this->SchoolDistrict_parser_ = &SchoolDistrict;
    this->RegionalDistrict_parser_ = &RegionalDistrict;
    this->RegionalHospitalDistrict_parser_ = &RegionalHospitalDistrict;
    this->PredominantManualClass_parser_ = &PredominantManualClass;
  }

  FolioDescription_pskel::
  FolioDescription_pskel ()
  : Neighbourhood_parser_ (0),
    ActualUseCode_parser_ (0),
    ActualUseDescription_parser_ (0),
    VacantFlag_parser_ (0),
    BCTransitFlag_parser_ (0),
    PoliceTaxFlag_parser_ (0),
    ALRCode_parser_ (0),
    ALRDescription_parser_ (0),
    TenureCode_parser_ (0),
    TenureDescription_parser_ (0),
    ParkingArea_parser_ (0),
    LandMeasurement_parser_ (0),
    SchoolDistrict_parser_ (0),
    RegionalDistrict_parser_ (0),
    RegionalHospitalDistrict_parser_ (0),
    PredominantManualClass_parser_ (0)
  {
  }

  // LandMeasurement_pskel
  //

  void LandMeasurement_pskel::
  LandDimensionType_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->LandDimensionType_parser_ = &p;
  }

  void LandMeasurement_pskel::
  LandDimensionTypeDescription_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->LandDimensionTypeDescription_parser_ = &p;
  }

  void LandMeasurement_pskel::
  LandDimension_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->LandDimension_parser_ = &p;
  }

  void LandMeasurement_pskel::
  LandWidth_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->LandWidth_parser_ = &p;
  }

  void LandMeasurement_pskel::
  LandDepth_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->LandDepth_parser_ = &p;
  }

  void LandMeasurement_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::FolioString255Item_pskel& LandDimensionType,
           ::dataadvice::FolioString255Item_pskel& LandDimensionTypeDescription,
           ::dataadvice::FolioString255Item_pskel& LandDimension,
           ::dataadvice::FolioString255Item_pskel& LandWidth,
           ::dataadvice::FolioString255Item_pskel& LandDepth)
  {
    this->Action_parser_ = &Action;
    this->LandDimensionType_parser_ = &LandDimensionType;
    this->LandDimensionTypeDescription_parser_ = &LandDimensionTypeDescription;
    this->LandDimension_parser_ = &LandDimension;
    this->LandWidth_parser_ = &LandWidth;
    this->LandDepth_parser_ = &LandDepth;
  }

  LandMeasurement_pskel::
  LandMeasurement_pskel ()
  : LandDimensionType_parser_ (0),
    LandDimensionTypeDescription_parser_ (0),
    LandDimension_parser_ (0),
    LandWidth_parser_ (0),
    LandDepth_parser_ (0)
  {
  }

  // Neighbourhood_pskel
  //

  void Neighbourhood_pskel::
  NeighbourhoodCode_parser (::dataadvice::FolioLookupCodeItem_pskel& p)
  {
    this->NeighbourhoodCode_parser_ = &p;
  }

  void Neighbourhood_pskel::
  NeighbourhoodDescription_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->NeighbourhoodDescription_parser_ = &p;
  }

  void Neighbourhood_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::FolioLookupCodeItem_pskel& NeighbourhoodCode,
           ::dataadvice::FolioString255Item_pskel& NeighbourhoodDescription)
  {
    this->Action_parser_ = &Action;
    this->NeighbourhoodCode_parser_ = &NeighbourhoodCode;
    this->NeighbourhoodDescription_parser_ = &NeighbourhoodDescription;
  }

  Neighbourhood_pskel::
  Neighbourhood_pskel ()
  : NeighbourhoodCode_parser_ (0),
    NeighbourhoodDescription_parser_ (0)
  {
  }

  // SpecialDistrict_pskel
  //

  void SpecialDistrict_pskel::
  DistrictCode_parser (::dataadvice::FolioLookupCodeItem_pskel& p)
  {
    this->DistrictCode_parser_ = &p;
  }

  void SpecialDistrict_pskel::
  DistrictDescription_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->DistrictDescription_parser_ = &p;
  }

  void SpecialDistrict_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::FolioLookupCodeItem_pskel& DistrictCode,
           ::dataadvice::FolioString255Item_pskel& DistrictDescription)
  {
    this->Action_parser_ = &Action;
    this->DistrictCode_parser_ = &DistrictCode;
    this->DistrictDescription_parser_ = &DistrictDescription;
  }

  SpecialDistrict_pskel::
  SpecialDistrict_pskel ()
  : DistrictCode_parser_ (0),
    DistrictDescription_parser_ (0)
  {
  }

  // ManualClass_pskel
  //

  void ManualClass_pskel::
  ManualClassCode_parser (::dataadvice::FolioLookupCodeItem_pskel& p)
  {
    this->ManualClassCode_parser_ = &p;
  }

  void ManualClass_pskel::
  ManualClassDescription_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->ManualClassDescription_parser_ = &p;
  }

  void ManualClass_pskel::
  PercentDeviation_parser (::dataadvice::FolioDecimalItem_pskel& p)
  {
    this->PercentDeviation_parser_ = &p;
  }

  void ManualClass_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::FolioLookupCodeItem_pskel& ManualClassCode,
           ::dataadvice::FolioString255Item_pskel& ManualClassDescription,
           ::dataadvice::FolioDecimalItem_pskel& PercentDeviation)
  {
    this->Action_parser_ = &Action;
    this->ManualClassCode_parser_ = &ManualClassCode;
    this->ManualClassDescription_parser_ = &ManualClassDescription;
    this->PercentDeviation_parser_ = &PercentDeviation;
  }

  ManualClass_pskel::
  ManualClass_pskel ()
  : ManualClassCode_parser_ (0),
    ManualClassDescription_parser_ (0),
    PercentDeviation_parser_ (0)
  {
  }

  // MinorTaxing_pskel
  //

  void MinorTaxing_pskel::
  ElectoralAreas_parser (::dataadvice::MinorTaxingJurisdictionCollection_pskel& p)
  {
    this->ElectoralAreas_parser_ = &p;
  }

  void MinorTaxing_pskel::
  ServiceAreas_parser (::dataadvice::MinorTaxingJurisdictionCollection_pskel& p)
  {
    this->ServiceAreas_parser_ = &p;
  }

  void MinorTaxing_pskel::
  Defined_parser (::dataadvice::MinorTaxingJurisdictionCollection_pskel& p)
  {
    this->Defined_parser_ = &p;
  }

  void MinorTaxing_pskel::
  SpecifiedRegional_parser (::dataadvice::MinorTaxingJurisdictionCollection_pskel& p)
  {
    this->SpecifiedRegional_parser_ = &p;
  }

  void MinorTaxing_pskel::
  SpecifiedMunicipal_parser (::dataadvice::MinorTaxingJurisdictionCollection_pskel& p)
  {
    this->SpecifiedMunicipal_parser_ = &p;
  }

  void MinorTaxing_pskel::
  LocalAreas_parser (::dataadvice::MinorTaxingJurisdictionCollection_pskel& p)
  {
    this->LocalAreas_parser_ = &p;
  }

  void MinorTaxing_pskel::
  GeneralServices_parser (::dataadvice::MinorTaxingJurisdictionCollection_pskel& p)
  {
    this->GeneralServices_parser_ = &p;
  }

  void MinorTaxing_pskel::
  ImprovementDistricts_parser (::dataadvice::MinorTaxingJurisdictionCollection_pskel& p)
  {
    this->ImprovementDistricts_parser_ = &p;
  }

  void MinorTaxing_pskel::
  IslandsTrusts_parser (::dataadvice::MinorTaxingJurisdictionCollection_pskel& p)
  {
    this->IslandsTrusts_parser_ = &p;
  }

  void MinorTaxing_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::MinorTaxingJurisdictionCollection_pskel& ElectoralAreas,
           ::dataadvice::MinorTaxingJurisdictionCollection_pskel& ServiceAreas,
           ::dataadvice::MinorTaxingJurisdictionCollection_pskel& Defined,
           ::dataadvice::MinorTaxingJurisdictionCollection_pskel& SpecifiedRegional,
           ::dataadvice::MinorTaxingJurisdictionCollection_pskel& SpecifiedMunicipal,
           ::dataadvice::MinorTaxingJurisdictionCollection_pskel& LocalAreas,
           ::dataadvice::MinorTaxingJurisdictionCollection_pskel& GeneralServices,
           ::dataadvice::MinorTaxingJurisdictionCollection_pskel& ImprovementDistricts,
           ::dataadvice::MinorTaxingJurisdictionCollection_pskel& IslandsTrusts)
  {
    this->Action_parser_ = &Action;
    this->ElectoralAreas_parser_ = &ElectoralAreas;
    this->ServiceAreas_parser_ = &ServiceAreas;
    this->Defined_parser_ = &Defined;
    this->SpecifiedRegional_parser_ = &SpecifiedRegional;
    this->SpecifiedMunicipal_parser_ = &SpecifiedMunicipal;
    this->LocalAreas_parser_ = &LocalAreas;
    this->GeneralServices_parser_ = &GeneralServices;
    this->ImprovementDistricts_parser_ = &ImprovementDistricts;
    this->IslandsTrusts_parser_ = &IslandsTrusts;
  }

  MinorTaxing_pskel::
  MinorTaxing_pskel ()
  : ElectoralAreas_parser_ (0),
    ServiceAreas_parser_ (0),
    Defined_parser_ (0),
    SpecifiedRegional_parser_ (0),
    SpecifiedMunicipal_parser_ (0),
    LocalAreas_parser_ (0),
    GeneralServices_parser_ (0),
    ImprovementDistricts_parser_ (0),
    IslandsTrusts_parser_ (0)
  {
  }

  // MinorTaxingJurisdictionCollection_pskel
  //

  void MinorTaxingJurisdictionCollection_pskel::
  MinorTaxingJurisdiction_parser (::dataadvice::MinorTaxingJurisdiction_pskel& p)
  {
    this->MinorTaxingJurisdiction_parser_ = &p;
  }

  void MinorTaxingJurisdictionCollection_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::MinorTaxingJurisdiction_pskel& MinorTaxingJurisdiction)
  {
    this->Action_parser_ = &Action;
    this->MinorTaxingJurisdiction_parser_ = &MinorTaxingJurisdiction;
  }

  MinorTaxingJurisdictionCollection_pskel::
  MinorTaxingJurisdictionCollection_pskel ()
  : MinorTaxingJurisdiction_parser_ (0)
  {
  }

  // MinorTaxingJurisdiction_pskel
  //

  void MinorTaxingJurisdiction_pskel::
  MinorTaxingCode_parser (::dataadvice::FolioLookupCodeItem_pskel& p)
  {
    this->MinorTaxingCode_parser_ = &p;
  }

  void MinorTaxingJurisdiction_pskel::
  MinorTaxingCodeShort_parser (::dataadvice::FolioString1Item_pskel& p)
  {
    this->MinorTaxingCodeShort_parser_ = &p;
  }

  void MinorTaxingJurisdiction_pskel::
  MinorTaxingDescription_parser (::dataadvice::FolioString255Item_pskel& p)
  {
    this->MinorTaxingDescription_parser_ = &p;
  }

  void MinorTaxingJurisdiction_pskel::
  ID_parser (::dataadvice::UniqueID_pskel& p)
  {
    this->ID_parser_ = &p;
  }

  void MinorTaxingJurisdiction_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::FolioLookupCodeItem_pskel& MinorTaxingCode,
           ::dataadvice::FolioString1Item_pskel& MinorTaxingCodeShort,
           ::dataadvice::FolioString255Item_pskel& MinorTaxingDescription,
           ::dataadvice::UniqueID_pskel& ID)
  {
    this->Action_parser_ = &Action;
    this->MinorTaxingCode_parser_ = &MinorTaxingCode;
    this->MinorTaxingCodeShort_parser_ = &MinorTaxingCodeShort;
    this->MinorTaxingDescription_parser_ = &MinorTaxingDescription;
    this->ID_parser_ = &ID;
  }

  MinorTaxingJurisdiction_pskel::
  MinorTaxingJurisdiction_pskel ()
  : MinorTaxingCode_parser_ (0),
    MinorTaxingCodeShort_parser_ (0),
    MinorTaxingDescription_parser_ (0),
    ID_parser_ (0)
  {
  }

  // PropertyValues_pskel
  //

  void PropertyValues_pskel::
  GeneralValues_parser (::dataadvice::PropertyClassValuesCollection_pskel& p)
  {
    this->GeneralValues_parser_ = &p;
  }

  void PropertyValues_pskel::
  BCTransitValues_parser (::dataadvice::PropertyClassValuesCollection_pskel& p)
  {
    this->BCTransitValues_parser_ = &p;
  }

  void PropertyValues_pskel::
  SchoolValues_parser (::dataadvice::PropertyClassValuesCollection_pskel& p)
  {
    this->SchoolValues_parser_ = &p;
  }

  void PropertyValues_pskel::
  Valuation_parser (::dataadvice::ValuationCollection_pskel& p)
  {
    this->Valuation_parser_ = &p;
  }

  void PropertyValues_pskel::
  parsers (::dataadvice::PropertyClassValuesCollection_pskel& GeneralValues,
           ::dataadvice::PropertyClassValuesCollection_pskel& BCTransitValues,
           ::dataadvice::PropertyClassValuesCollection_pskel& SchoolValues,
           ::dataadvice::ValuationCollection_pskel& Valuation)
  {
    this->GeneralValues_parser_ = &GeneralValues;
    this->BCTransitValues_parser_ = &BCTransitValues;
    this->SchoolValues_parser_ = &SchoolValues;
    this->Valuation_parser_ = &Valuation;
  }

  PropertyValues_pskel::
  PropertyValues_pskel ()
  : GeneralValues_parser_ (0),
    BCTransitValues_parser_ (0),
    SchoolValues_parser_ (0),
    Valuation_parser_ (0)
  {
  }

  // ValuationCollection_pskel
  //

  void ValuationCollection_pskel::
  ValuesByETC_parser (::dataadvice::ValuesByETC_pskel& p)
  {
    this->ValuesByETC_parser_ = &p;
  }

  void ValuationCollection_pskel::
  parsers (::dataadvice::ValuesByETC_pskel& ValuesByETC)
  {
    this->ValuesByETC_parser_ = &ValuesByETC;
  }

  ValuationCollection_pskel::
  ValuationCollection_pskel ()
  : ValuesByETC_parser_ (0)
  {
  }

  // ValuesByETC_pskel
  //

  void ValuesByETC_pskel::
  TaxExemptCode_parser (::dataadvice::LookupCode_pskel& p)
  {
    this->TaxExemptCode_parser_ = &p;
  }

  void ValuesByETC_pskel::
  TaxExemptDescription_parser (::dataadvice::String255_pskel& p)
  {
    this->TaxExemptDescription_parser_ = &p;
  }

  void ValuesByETC_pskel::
  PropertyClassCode_parser (::dataadvice::PropertyClassCode_pskel& p)
  {
    this->PropertyClassCode_parser_ = &p;
  }

  void ValuesByETC_pskel::
  PropertyClassDescription_parser (::dataadvice::String255_pskel& p)
  {
    this->PropertyClassDescription_parser_ = &p;
  }

  void ValuesByETC_pskel::
  LandValue_parser (::xml_schema::decimal_pskel& p)
  {
    this->LandValue_parser_ = &p;
  }

  void ValuesByETC_pskel::
  ImprovementValue_parser (::xml_schema::decimal_pskel& p)
  {
    this->ImprovementValue_parser_ = &p;
  }

  void ValuesByETC_pskel::
  parsers (::dataadvice::LookupCode_pskel& TaxExemptCode,
           ::dataadvice::String255_pskel& TaxExemptDescription,
           ::dataadvice::PropertyClassCode_pskel& PropertyClassCode,
           ::dataadvice::String255_pskel& PropertyClassDescription,
           ::xml_schema::decimal_pskel& LandValue,
           ::xml_schema::decimal_pskel& ImprovementValue)
  {
    this->TaxExemptCode_parser_ = &TaxExemptCode;
    this->TaxExemptDescription_parser_ = &TaxExemptDescription;
    this->PropertyClassCode_parser_ = &PropertyClassCode;
    this->PropertyClassDescription_parser_ = &PropertyClassDescription;
    this->LandValue_parser_ = &LandValue;
    this->ImprovementValue_parser_ = &ImprovementValue;
  }

  ValuesByETC_pskel::
  ValuesByETC_pskel ()
  : TaxExemptCode_parser_ (0),
    TaxExemptDescription_parser_ (0),
    PropertyClassCode_parser_ (0),
    PropertyClassDescription_parser_ (0),
    LandValue_parser_ (0),
    ImprovementValue_parser_ (0)
  {
  }

  // PropertyClassValuesCollection_pskel
  //

  void PropertyClassValuesCollection_pskel::
  PropertyClassValues_parser (::dataadvice::PropertyClassValues_pskel& p)
  {
    this->PropertyClassValues_parser_ = &p;
  }

  void PropertyClassValuesCollection_pskel::
  parsers (::dataadvice::PropertyClassValues_pskel& PropertyClassValues)
  {
    this->PropertyClassValues_parser_ = &PropertyClassValues;
  }

  PropertyClassValuesCollection_pskel::
  PropertyClassValuesCollection_pskel ()
  : PropertyClassValues_parser_ (0)
  {
  }

  // PropertyClassValues_pskel
  //

  void PropertyClassValues_pskel::
  PropertyClassCode_parser (::dataadvice::PropertyClassCode_pskel& p)
  {
    this->PropertyClassCode_parser_ = &p;
  }

  void PropertyClassValues_pskel::
  PropertyClassDescription_parser (::dataadvice::String255_pskel& p)
  {
    this->PropertyClassDescription_parser_ = &p;
  }

  void PropertyClassValues_pskel::
  PropertySubClassCode_parser (::dataadvice::PropertySubClassCode_pskel& p)
  {
    this->PropertySubClassCode_parser_ = &p;
  }

  void PropertyClassValues_pskel::
  PropertySubClassDescription_parser (::dataadvice::String255_pskel& p)
  {
    this->PropertySubClassDescription_parser_ = &p;
  }

  void PropertyClassValues_pskel::
  GrossValues_parser (::dataadvice::Valuation_pskel& p)
  {
    this->GrossValues_parser_ = &p;
  }

  void PropertyClassValues_pskel::
  TaxExemptValues_parser (::dataadvice::Valuation_pskel& p)
  {
    this->TaxExemptValues_parser_ = &p;
  }

  void PropertyClassValues_pskel::
  NetValues_parser (::dataadvice::Valuation_pskel& p)
  {
    this->NetValues_parser_ = &p;
  }

  void PropertyClassValues_pskel::
  parsers (::dataadvice::PropertyClassCode_pskel& PropertyClassCode,
           ::dataadvice::String255_pskel& PropertyClassDescription,
           ::dataadvice::PropertySubClassCode_pskel& PropertySubClassCode,
           ::dataadvice::String255_pskel& PropertySubClassDescription,
           ::dataadvice::Valuation_pskel& GrossValues,
           ::dataadvice::Valuation_pskel& TaxExemptValues,
           ::dataadvice::Valuation_pskel& NetValues)
  {
    this->PropertyClassCode_parser_ = &PropertyClassCode;
    this->PropertyClassDescription_parser_ = &PropertyClassDescription;
    this->PropertySubClassCode_parser_ = &PropertySubClassCode;
    this->PropertySubClassDescription_parser_ = &PropertySubClassDescription;
    this->GrossValues_parser_ = &GrossValues;
    this->TaxExemptValues_parser_ = &TaxExemptValues;
    this->NetValues_parser_ = &NetValues;
  }

  PropertyClassValues_pskel::
  PropertyClassValues_pskel ()
  : PropertyClassCode_parser_ (0),
    PropertyClassDescription_parser_ (0),
    PropertySubClassCode_parser_ (0),
    PropertySubClassDescription_parser_ (0),
    GrossValues_parser_ (0),
    TaxExemptValues_parser_ (0),
    NetValues_parser_ (0)
  {
  }

  // Valuation_pskel
  //

  void Valuation_pskel::
  LandValue_parser (::xml_schema::decimal_pskel& p)
  {
    this->LandValue_parser_ = &p;
  }

  void Valuation_pskel::
  ImprovementValue_parser (::xml_schema::decimal_pskel& p)
  {
    this->ImprovementValue_parser_ = &p;
  }

  void Valuation_pskel::
  parsers (::xml_schema::decimal_pskel& LandValue,
           ::xml_schema::decimal_pskel& ImprovementValue)
  {
    this->LandValue_parser_ = &LandValue;
    this->ImprovementValue_parser_ = &ImprovementValue;
  }

  Valuation_pskel::
  Valuation_pskel ()
  : LandValue_parser_ (0),
    ImprovementValue_parser_ (0)
  {
  }

  // FolioIntegerItem_pskel
  //

  void FolioIntegerItem_pskel::
  Action_parser (::dataadvice::ActionCode_pskel& p)
  {
    this->Action_parser_ = &p;
  }

  void FolioIntegerItem_pskel::
  OldValue_parser (::xml_schema::integer_pskel& p)
  {
    this->OldValue_parser_ = &p;
  }

  void FolioIntegerItem_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::xml_schema::integer_pskel& OldValue)
  {
    this->Action_parser_ = &Action;
    this->OldValue_parser_ = &OldValue;
  }

  FolioIntegerItem_pskel::
  FolioIntegerItem_pskel ()
  : Action_parser_ (0),
    OldValue_parser_ (0)
  {
  }

  // FolioBooleanItem_pskel
  //

  void FolioBooleanItem_pskel::
  Action_parser (::dataadvice::ActionCode_pskel& p)
  {
    this->Action_parser_ = &p;
  }

  void FolioBooleanItem_pskel::
  OldValue_parser (::xml_schema::boolean_pskel& p)
  {
    this->OldValue_parser_ = &p;
  }

  void FolioBooleanItem_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::xml_schema::boolean_pskel& OldValue)
  {
    this->Action_parser_ = &Action;
    this->OldValue_parser_ = &OldValue;
  }

  FolioBooleanItem_pskel::
  FolioBooleanItem_pskel ()
  : Action_parser_ (0),
    OldValue_parser_ (0)
  {
  }

  // FolioDecimalItem_pskel
  //

  void FolioDecimalItem_pskel::
  Action_parser (::dataadvice::ActionCode_pskel& p)
  {
    this->Action_parser_ = &p;
  }

  void FolioDecimalItem_pskel::
  OldValue_parser (::xml_schema::decimal_pskel& p)
  {
    this->OldValue_parser_ = &p;
  }

  void FolioDecimalItem_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::xml_schema::decimal_pskel& OldValue)
  {
    this->Action_parser_ = &Action;
    this->OldValue_parser_ = &OldValue;
  }

  FolioDecimalItem_pskel::
  FolioDecimalItem_pskel ()
  : Action_parser_ (0),
    OldValue_parser_ (0)
  {
  }

  // FolioDateItem_pskel
  //

  void FolioDateItem_pskel::
  Action_parser (::dataadvice::ActionCode_pskel& p)
  {
    this->Action_parser_ = &p;
  }

  void FolioDateItem_pskel::
  OldValue_parser (::xml_schema::date_pskel& p)
  {
    this->OldValue_parser_ = &p;
  }

  void FolioDateItem_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::xml_schema::date_pskel& OldValue)
  {
    this->Action_parser_ = &Action;
    this->OldValue_parser_ = &OldValue;
  }

  FolioDateItem_pskel::
  FolioDateItem_pskel ()
  : Action_parser_ (0),
    OldValue_parser_ (0)
  {
  }

  // FolioUniqueIDItem_pskel
  //

  void FolioUniqueIDItem_pskel::
  Action_parser (::dataadvice::ActionCode_pskel& p)
  {
    this->Action_parser_ = &p;
  }

  void FolioUniqueIDItem_pskel::
  OldValue_parser (::dataadvice::UniqueID_pskel& p)
  {
    this->OldValue_parser_ = &p;
  }

  void FolioUniqueIDItem_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::UniqueID_pskel& OldValue)
  {
    this->Action_parser_ = &Action;
    this->OldValue_parser_ = &OldValue;
  }

  FolioUniqueIDItem_pskel::
  FolioUniqueIDItem_pskel ()
  : Action_parser_ (0),
    OldValue_parser_ (0)
  {
  }

  // FolioLookupCodeItem_pskel
  //

  void FolioLookupCodeItem_pskel::
  Action_parser (::dataadvice::ActionCode_pskel& p)
  {
    this->Action_parser_ = &p;
  }

  void FolioLookupCodeItem_pskel::
  OldValue_parser (::dataadvice::LookupCode_pskel& p)
  {
    this->OldValue_parser_ = &p;
  }

  void FolioLookupCodeItem_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::LookupCode_pskel& OldValue)
  {
    this->Action_parser_ = &Action;
    this->OldValue_parser_ = &OldValue;
  }

  FolioLookupCodeItem_pskel::
  FolioLookupCodeItem_pskel ()
  : Action_parser_ (0),
    OldValue_parser_ (0)
  {
  }

  // FolioString1Item_pskel
  //

  void FolioString1Item_pskel::
  Action_parser (::dataadvice::ActionCode_pskel& p)
  {
    this->Action_parser_ = &p;
  }

  void FolioString1Item_pskel::
  OldValue_parser (::dataadvice::String1_pskel& p)
  {
    this->OldValue_parser_ = &p;
  }

  void FolioString1Item_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::String1_pskel& OldValue)
  {
    this->Action_parser_ = &Action;
    this->OldValue_parser_ = &OldValue;
  }

  FolioString1Item_pskel::
  FolioString1Item_pskel ()
  : Action_parser_ (0),
    OldValue_parser_ (0)
  {
  }

  // FolioString255Item_pskel
  //

  void FolioString255Item_pskel::
  Action_parser (::dataadvice::ActionCode_pskel& p)
  {
    this->Action_parser_ = &p;
  }

  void FolioString255Item_pskel::
  OldValue_parser (::dataadvice::String255_pskel& p)
  {
    this->OldValue_parser_ = &p;
  }

  void FolioString255Item_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::String255_pskel& OldValue)
  {
    this->Action_parser_ = &Action;
    this->OldValue_parser_ = &OldValue;
  }

  FolioString255Item_pskel::
  FolioString255Item_pskel ()
  : Action_parser_ (0),
    OldValue_parser_ (0)
  {
  }

  // FolioString1024Item_pskel
  //

  void FolioString1024Item_pskel::
  Action_parser (::dataadvice::ActionCode_pskel& p)
  {
    this->Action_parser_ = &p;
  }

  void FolioString1024Item_pskel::
  OldValue_parser (::dataadvice::String1024_pskel& p)
  {
    this->OldValue_parser_ = &p;
  }

  void FolioString1024Item_pskel::
  parsers (::dataadvice::ActionCode_pskel& Action,
           ::dataadvice::String1024_pskel& OldValue)
  {
    this->Action_parser_ = &Action;
    this->OldValue_parser_ = &OldValue;
  }

  FolioString1024Item_pskel::
  FolioString1024Item_pskel ()
  : Action_parser_ (0),
    OldValue_parser_ (0)
  {
  }
}

namespace dataadvice
{
  // DataAdvice_pskel
  //

  void DataAdvice_pskel::
  RollYear (long long)
  {
  }

  void DataAdvice_pskel::
  OwnershipYear (long long)
  {
  }

  void DataAdvice_pskel::
  RunType (const QString&)
  {
  }

  void DataAdvice_pskel::
  StartDate (const ::xml_schema::date&)
  {
  }

  void DataAdvice_pskel::
  EndDate (const ::xml_schema::date&)
  {
  }

  void DataAdvice_pskel::
  AssessmentAreas ()
  {
  }

  void DataAdvice_pskel::
  ReportSummary (std::unique_ptr<model::DeliverySummary>&)
  {
  }

  void DataAdvice_pskel::
  Version (const QString&)
  {
  }

  void DataAdvice_pskel::
  RequestID (const QString&)
  {
  }

  void DataAdvice_pskel::
  OrderID (const QString&)
  {
  }

  void DataAdvice_pskel::
  RunDate (const ::xml_schema::date&)
  {
  }

  bool DataAdvice_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "RollYear" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->RollYear_parser_;

      if (this->RollYear_parser_)
        this->RollYear_parser_->pre ();

      return true;
    }

    if (n == "OwnershipYear" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->OwnershipYear_parser_;

      if (this->OwnershipYear_parser_)
        this->OwnershipYear_parser_->pre ();

      return true;
    }

    if (n == "RunType" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->RunType_parser_;

      if (this->RunType_parser_)
        this->RunType_parser_->pre ();

      return true;
    }

    if (n == "StartDate" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->StartDate_parser_;

      if (this->StartDate_parser_)
        this->StartDate_parser_->pre ();

      return true;
    }

    if (n == "EndDate" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->EndDate_parser_;

      if (this->EndDate_parser_)
        this->EndDate_parser_->pre ();

      return true;
    }

    if (n == "AssessmentAreas" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->AssessmentAreas_parser_;

      if (this->AssessmentAreas_parser_)
        this->AssessmentAreas_parser_->pre ();

      return true;
    }

    if (n == "ReportSummary" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ReportSummary_parser_;

      if (this->ReportSummary_parser_)
        this->ReportSummary_parser_->pre ();

      return true;
    }

    return false;
  }

  bool DataAdvice_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "RollYear" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->RollYear_parser_)
        this->RollYear (this->RollYear_parser_->post_integer ());

      return true;
    }

    if (n == "OwnershipYear" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->OwnershipYear_parser_)
        this->OwnershipYear (this->OwnershipYear_parser_->post_integer ());

      return true;
    }

    if (n == "RunType" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->RunType_parser_)
        this->RunType (this->RunType_parser_->post_RunType ());

      return true;
    }

    if (n == "StartDate" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->StartDate_parser_)
        this->StartDate (this->StartDate_parser_->post_date ());

      return true;
    }

    if (n == "EndDate" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->EndDate_parser_)
        this->EndDate (this->EndDate_parser_->post_date ());

      return true;
    }

    if (n == "AssessmentAreas" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->AssessmentAreas_parser_)
      {
        this->AssessmentAreas_parser_->post_AssessmentAreaCollection ();
        this->AssessmentAreas ();
      }

      return true;
    }

    if (n == "ReportSummary" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ReportSummary_parser_)
        this->ReportSummary (this->ReportSummary_parser_->post_DeliverySummary ());

      return true;
    }

    return false;
  }

  bool DataAdvice_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Version" && ns.empty ())
    {
      if (this->Version_parser_)
      {
        this->Version_parser_->pre ();
        this->Version_parser_->_pre_impl ();
        this->Version_parser_->_characters (v);
        this->Version_parser_->_post_impl ();
        this->Version (this->Version_parser_->post_Version ());
      }

      return true;
    }

    if (n == "RequestID" && ns.empty ())
    {
      if (this->RequestID_parser_)
      {
        this->RequestID_parser_->pre ();
        this->RequestID_parser_->_pre_impl ();
        this->RequestID_parser_->_characters (v);
        this->RequestID_parser_->_post_impl ();
        this->RequestID (this->RequestID_parser_->post_UniqueID ());
      }

      return true;
    }

    if (n == "OrderID" && ns.empty ())
    {
      if (this->OrderID_parser_)
      {
        this->OrderID_parser_->pre ();
        this->OrderID_parser_->_pre_impl ();
        this->OrderID_parser_->_characters (v);
        this->OrderID_parser_->_post_impl ();
        this->OrderID (this->OrderID_parser_->post_UniqueID ());
      }

      return true;
    }

    if (n == "RunDate" && ns.empty ())
    {
      if (this->RunDate_parser_)
      {
        this->RunDate_parser_->pre ();
        this->RunDate_parser_->_pre_impl ();
        this->RunDate_parser_->_characters (v);
        this->RunDate_parser_->_post_impl ();
        this->RunDate (this->RunDate_parser_->post_date ());
      }

      return true;
    }

    return false;
  }

  // DeliverySummary_pskel
  //

  void DeliverySummary_pskel::
  TotalFolioCount (long long)
  {
  }

  void DeliverySummary_pskel::
  TaxableFolioCount (long long)
  {
  }

  void DeliverySummary_pskel::
  TaxExemptFolioCount (long long)
  {
  }

  void DeliverySummary_pskel::
  TotalGrossValues ()
  {
  }

  void DeliverySummary_pskel::
  TotalTaxExemptValues ()
  {
  }

  void DeliverySummary_pskel::
  TotalNetValues ()
  {
  }

  void DeliverySummary_pskel::
  GeneralValues (std::vector<std::unique_ptr<model::PropertyClassValue>>&)
  {
  }

  void DeliverySummary_pskel::
  BCTransitValues (std::vector<std::unique_ptr<model::PropertyClassValue>>&)
  {
  }

  void DeliverySummary_pskel::
  SchoolValues (std::vector<std::unique_ptr<model::PropertyClassValue>>&)
  {
  }

  void DeliverySummary_pskel::
  AmendmentReasonCounts ()
  {
  }

  void DeliverySummary_pskel::
  DeleteReasonCounts ()
  {
  }

  bool DeliverySummary_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "TotalFolioCount" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->TotalFolioCount_parser_;

      if (this->TotalFolioCount_parser_)
        this->TotalFolioCount_parser_->pre ();

      return true;
    }

    if (n == "TaxableFolioCount" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->TaxableFolioCount_parser_;

      if (this->TaxableFolioCount_parser_)
        this->TaxableFolioCount_parser_->pre ();

      return true;
    }

    if (n == "TaxExemptFolioCount" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->TaxExemptFolioCount_parser_;

      if (this->TaxExemptFolioCount_parser_)
        this->TaxExemptFolioCount_parser_->pre ();

      return true;
    }

    if (n == "TotalGrossValues" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->TotalGrossValues_parser_;

      if (this->TotalGrossValues_parser_)
        this->TotalGrossValues_parser_->pre ();

      return true;
    }

    if (n == "TotalTaxExemptValues" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->TotalTaxExemptValues_parser_;

      if (this->TotalTaxExemptValues_parser_)
        this->TotalTaxExemptValues_parser_->pre ();

      return true;
    }

    if (n == "TotalNetValues" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->TotalNetValues_parser_;

      if (this->TotalNetValues_parser_)
        this->TotalNetValues_parser_->pre ();

      return true;
    }

    if (n == "GeneralValues" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->GeneralValues_parser_;

      if (this->GeneralValues_parser_)
        this->GeneralValues_parser_->pre ();

      return true;
    }

    if (n == "BCTransitValues" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->BCTransitValues_parser_;

      if (this->BCTransitValues_parser_)
        this->BCTransitValues_parser_->pre ();

      return true;
    }

    if (n == "SchoolValues" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->SchoolValues_parser_;

      if (this->SchoolValues_parser_)
        this->SchoolValues_parser_->pre ();

      return true;
    }

    if (n == "AmendmentReasonCounts" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->AmendmentReasonCounts_parser_;

      if (this->AmendmentReasonCounts_parser_)
        this->AmendmentReasonCounts_parser_->pre ();

      return true;
    }

    if (n == "DeleteReasonCounts" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->DeleteReasonCounts_parser_;

      if (this->DeleteReasonCounts_parser_)
        this->DeleteReasonCounts_parser_->pre ();

      return true;
    }

    return false;
  }

  bool DeliverySummary_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "TotalFolioCount" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->TotalFolioCount_parser_)
        this->TotalFolioCount (this->TotalFolioCount_parser_->post_integer ());

      return true;
    }

    if (n == "TaxableFolioCount" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->TaxableFolioCount_parser_)
        this->TaxableFolioCount (this->TaxableFolioCount_parser_->post_integer ());

      return true;
    }

    if (n == "TaxExemptFolioCount" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->TaxExemptFolioCount_parser_)
        this->TaxExemptFolioCount (this->TaxExemptFolioCount_parser_->post_integer ());

      return true;
    }

    if (n == "TotalGrossValues" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->TotalGrossValues_parser_)
      {
        this->TotalGrossValues_parser_->post_FolioGroupValues ();
        this->TotalGrossValues ();
      }

      return true;
    }

    if (n == "TotalTaxExemptValues" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->TotalTaxExemptValues_parser_)
      {
        this->TotalTaxExemptValues_parser_->post_FolioGroupValues ();
        this->TotalTaxExemptValues ();
      }

      return true;
    }

    if (n == "TotalNetValues" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->TotalNetValues_parser_)
      {
        this->TotalNetValues_parser_->post_FolioGroupValues ();
        this->TotalNetValues ();
      }

      return true;
    }

    if (n == "GeneralValues" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->GeneralValues_parser_)
        this->GeneralValues (this->GeneralValues_parser_->post_PropertyClassValuesCollection ());

      return true;
    }

    if (n == "BCTransitValues" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->BCTransitValues_parser_)
        this->BCTransitValues (this->BCTransitValues_parser_->post_PropertyClassValuesCollection ());

      return true;
    }

    if (n == "SchoolValues" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->SchoolValues_parser_)
        this->SchoolValues (this->SchoolValues_parser_->post_PropertyClassValuesCollection ());

      return true;
    }

    if (n == "AmendmentReasonCounts" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->AmendmentReasonCounts_parser_)
      {
        this->AmendmentReasonCounts_parser_->post_AmendmentReasonCountCollection ();
        this->AmendmentReasonCounts ();
      }

      return true;
    }

    if (n == "DeleteReasonCounts" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->DeleteReasonCounts_parser_)
      {
        this->DeleteReasonCounts_parser_->post_DeleteReasonCountCollection ();
        this->DeleteReasonCounts ();
      }

      return true;
    }

    return false;
  }

  // AmendmentReasonCountCollection_pskel
  //

  void AmendmentReasonCountCollection_pskel::
  AmendmentReasonCount ()
  {
  }

  void AmendmentReasonCountCollection_pskel::
  post_AmendmentReasonCountCollection ()
  {
  }

  bool AmendmentReasonCountCollection_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "AmendmentReasonCount" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->AmendmentReasonCount_parser_;

      if (this->AmendmentReasonCount_parser_)
        this->AmendmentReasonCount_parser_->pre ();

      return true;
    }

    return false;
  }

  bool AmendmentReasonCountCollection_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "AmendmentReasonCount" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->AmendmentReasonCount_parser_)
      {
        this->AmendmentReasonCount_parser_->post_AmendmentReasonCount ();
        this->AmendmentReasonCount ();
      }

      return true;
    }

    return false;
  }

  // AmendmentReasonCount_pskel
  //

  void AmendmentReasonCount_pskel::
  AmendmentReasonCode (const QString&)
  {
  }

  void AmendmentReasonCount_pskel::
  AmendmentReasonDescription (const QString&)
  {
  }

  void AmendmentReasonCount_pskel::
  FolioCount (long long)
  {
  }

  void AmendmentReasonCount_pskel::
  post_AmendmentReasonCount ()
  {
  }

  bool AmendmentReasonCount_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "AmendmentReasonCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->AmendmentReasonCode_parser_;

      if (this->AmendmentReasonCode_parser_)
        this->AmendmentReasonCode_parser_->pre ();

      return true;
    }

    if (n == "AmendmentReasonDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->AmendmentReasonDescription_parser_;

      if (this->AmendmentReasonDescription_parser_)
        this->AmendmentReasonDescription_parser_->pre ();

      return true;
    }

    if (n == "FolioCount" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FolioCount_parser_;

      if (this->FolioCount_parser_)
        this->FolioCount_parser_->pre ();

      return true;
    }

    return false;
  }

  bool AmendmentReasonCount_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "AmendmentReasonCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->AmendmentReasonCode_parser_)
        this->AmendmentReasonCode (this->AmendmentReasonCode_parser_->post_LookupCode ());

      return true;
    }

    if (n == "AmendmentReasonDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->AmendmentReasonDescription_parser_)
        this->AmendmentReasonDescription (this->AmendmentReasonDescription_parser_->post_String255 ());

      return true;
    }

    if (n == "FolioCount" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->FolioCount_parser_)
        this->FolioCount (this->FolioCount_parser_->post_integer ());

      return true;
    }

    return false;
  }

  // DeleteReasonCountCollection_pskel
  //

  void DeleteReasonCountCollection_pskel::
  DeleteReasonCount ()
  {
  }

  void DeleteReasonCountCollection_pskel::
  post_DeleteReasonCountCollection ()
  {
  }

  bool DeleteReasonCountCollection_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "DeleteReasonCount" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->DeleteReasonCount_parser_;

      if (this->DeleteReasonCount_parser_)
        this->DeleteReasonCount_parser_->pre ();

      return true;
    }

    return false;
  }

  bool DeleteReasonCountCollection_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "DeleteReasonCount" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->DeleteReasonCount_parser_)
      {
        this->DeleteReasonCount_parser_->post_DeleteReasonCount ();
        this->DeleteReasonCount ();
      }

      return true;
    }

    return false;
  }

  // DeleteReasonCount_pskel
  //

  void DeleteReasonCount_pskel::
  DeleteReasonCode (const QString&)
  {
  }

  void DeleteReasonCount_pskel::
  DeleteReasonDescription (const QString&)
  {
  }

  void DeleteReasonCount_pskel::
  FolioCount (long long)
  {
  }

  void DeleteReasonCount_pskel::
  post_DeleteReasonCount ()
  {
  }

  bool DeleteReasonCount_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "DeleteReasonCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->DeleteReasonCode_parser_;

      if (this->DeleteReasonCode_parser_)
        this->DeleteReasonCode_parser_->pre ();

      return true;
    }

    if (n == "DeleteReasonDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->DeleteReasonDescription_parser_;

      if (this->DeleteReasonDescription_parser_)
        this->DeleteReasonDescription_parser_->pre ();

      return true;
    }

    if (n == "FolioCount" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FolioCount_parser_;

      if (this->FolioCount_parser_)
        this->FolioCount_parser_->pre ();

      return true;
    }

    return false;
  }

  bool DeleteReasonCount_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "DeleteReasonCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->DeleteReasonCode_parser_)
        this->DeleteReasonCode (this->DeleteReasonCode_parser_->post_LookupCode ());

      return true;
    }

    if (n == "DeleteReasonDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->DeleteReasonDescription_parser_)
        this->DeleteReasonDescription (this->DeleteReasonDescription_parser_->post_String255 ());

      return true;
    }

    if (n == "FolioCount" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->FolioCount_parser_)
        this->FolioCount (this->FolioCount_parser_->post_integer ());

      return true;
    }

    return false;
  }

  // AssessmentAreaCollection_pskel
  //

  void AssessmentAreaCollection_pskel::
  AssessmentArea ()
  {
  }

  void AssessmentAreaCollection_pskel::
  post_AssessmentAreaCollection ()
  {
  }

  bool AssessmentAreaCollection_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "AssessmentArea" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->AssessmentArea_parser_;

      if (this->AssessmentArea_parser_)
        this->AssessmentArea_parser_->pre ();

      return true;
    }

    return false;
  }

  bool AssessmentAreaCollection_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "AssessmentArea" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->AssessmentArea_parser_)
      {
        this->AssessmentArea_parser_->post_AssessmentArea ();
        this->AssessmentArea ();
      }

      return true;
    }

    return false;
  }

  // AssessmentArea_pskel
  //

  void AssessmentArea_pskel::
  AssessmentAreaCode (const QString&)
  {
  }

  void AssessmentArea_pskel::
  AssessmentAreaDescription (const QString&)
  {
  }

  void AssessmentArea_pskel::
  Jurisdictions ()
  {
  }

  void AssessmentArea_pskel::
  AreaSummary (std::unique_ptr<model::DeliverySummary>&)
  {
  }

  void AssessmentArea_pskel::
  post_AssessmentArea ()
  {
  }

  bool AssessmentArea_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "AssessmentAreaCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->AssessmentAreaCode_parser_;

      if (this->AssessmentAreaCode_parser_)
        this->AssessmentAreaCode_parser_->pre ();

      return true;
    }

    if (n == "AssessmentAreaDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->AssessmentAreaDescription_parser_;

      if (this->AssessmentAreaDescription_parser_)
        this->AssessmentAreaDescription_parser_->pre ();

      return true;
    }

    if (n == "Jurisdictions" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Jurisdictions_parser_;

      if (this->Jurisdictions_parser_)
        this->Jurisdictions_parser_->pre ();

      return true;
    }

    if (n == "AreaSummary" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->AreaSummary_parser_;

      if (this->AreaSummary_parser_)
        this->AreaSummary_parser_->pre ();

      return true;
    }

    return false;
  }

  bool AssessmentArea_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "AssessmentAreaCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->AssessmentAreaCode_parser_)
        this->AssessmentAreaCode (this->AssessmentAreaCode_parser_->post_AssessmentAreaCode ());

      return true;
    }

    if (n == "AssessmentAreaDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->AssessmentAreaDescription_parser_)
        this->AssessmentAreaDescription (this->AssessmentAreaDescription_parser_->post_String255 ());

      return true;
    }

    if (n == "Jurisdictions" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Jurisdictions_parser_)
      {
        this->Jurisdictions_parser_->post_JurisdictionCollection ();
        this->Jurisdictions ();
      }

      return true;
    }

    if (n == "AreaSummary" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->AreaSummary_parser_)
        this->AreaSummary (this->AreaSummary_parser_->post_DeliverySummary ());

      return true;
    }

    return false;
  }

  // JurisdictionCollection_pskel
  //

  void JurisdictionCollection_pskel::
  Jurisdiction ()
  {
  }

  void JurisdictionCollection_pskel::
  post_JurisdictionCollection ()
  {
  }

  bool JurisdictionCollection_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Jurisdiction" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Jurisdiction_parser_;

      if (this->Jurisdiction_parser_)
        this->Jurisdiction_parser_->pre ();

      return true;
    }

    return false;
  }

  bool JurisdictionCollection_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Jurisdiction" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Jurisdiction_parser_)
      {
        this->Jurisdiction_parser_->post_Jurisdiction ();
        this->Jurisdiction ();
      }

      return true;
    }

    return false;
  }

  // Jurisdiction_pskel
  //

  void Jurisdiction_pskel::
  JurisdictionCode (const QString&)
  {
  }

  void Jurisdiction_pskel::
  JurisdictionDescription (const QString&)
  {
  }

  void Jurisdiction_pskel::
  FolioRecords (std::vector<std::unique_ptr<model::Folio>>&)
  {
  }

  void Jurisdiction_pskel::
  JurisdictionSummary (std::unique_ptr<model::DeliverySummary>&)
  {
  }

  void Jurisdiction_pskel::
  post_Jurisdiction ()
  {
  }

  bool Jurisdiction_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "JurisdictionCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->JurisdictionCode_parser_;

      if (this->JurisdictionCode_parser_)
        this->JurisdictionCode_parser_->pre ();

      return true;
    }

    if (n == "JurisdictionDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->JurisdictionDescription_parser_;

      if (this->JurisdictionDescription_parser_)
        this->JurisdictionDescription_parser_->pre ();

      return true;
    }

    if (n == "FolioRecords" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FolioRecords_parser_;

      if (this->FolioRecords_parser_)
        this->FolioRecords_parser_->pre ();

      return true;
    }

    if (n == "JurisdictionSummary" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->JurisdictionSummary_parser_;

      if (this->JurisdictionSummary_parser_)
        this->JurisdictionSummary_parser_->pre ();

      return true;
    }

    return false;
  }

  bool Jurisdiction_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "JurisdictionCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->JurisdictionCode_parser_)
        this->JurisdictionCode (this->JurisdictionCode_parser_->post_JurisdictionCode ());

      return true;
    }

    if (n == "JurisdictionDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->JurisdictionDescription_parser_)
        this->JurisdictionDescription (this->JurisdictionDescription_parser_->post_String255 ());

      return true;
    }

    if (n == "FolioRecords" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->FolioRecords_parser_)
        this->FolioRecords (this->FolioRecords_parser_->post_FolioRecordCollection ());

      return true;
    }

    if (n == "JurisdictionSummary" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->JurisdictionSummary_parser_)
        this->JurisdictionSummary (this->JurisdictionSummary_parser_->post_DeliverySummary ());

      return true;
    }

    return false;
  }

  // FolioGroupValues_pskel
  //

  void FolioGroupValues_pskel::
  LandValue (double)
  {
  }

  void FolioGroupValues_pskel::
  ImprovementValue (double)
  {
  }

  void FolioGroupValues_pskel::
  post_FolioGroupValues ()
  {
  }

  bool FolioGroupValues_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "LandValue" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->LandValue_parser_;

      if (this->LandValue_parser_)
        this->LandValue_parser_->pre ();

      return true;
    }

    if (n == "ImprovementValue" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ImprovementValue_parser_;

      if (this->ImprovementValue_parser_)
        this->ImprovementValue_parser_->pre ();

      return true;
    }

    return false;
  }

  bool FolioGroupValues_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "LandValue" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->LandValue_parser_)
        this->LandValue (this->LandValue_parser_->post_decimal ());

      return true;
    }

    if (n == "ImprovementValue" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ImprovementValue_parser_)
        this->ImprovementValue (this->ImprovementValue_parser_->post_decimal ());

      return true;
    }

    return false;
  }

  // FolioRecordCollection_pskel
  //

  void FolioRecordCollection_pskel::
  FolioRecord (std::unique_ptr<model::Folio>&)
  {
  }

  bool FolioRecordCollection_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "FolioRecord" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FolioRecord_parser_;

      if (this->FolioRecord_parser_)
        this->FolioRecord_parser_->pre ();

      return true;
    }

    return false;
  }

  bool FolioRecordCollection_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "FolioRecord" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->FolioRecord_parser_)
        this->FolioRecord (this->FolioRecord_parser_->post_FolioRecord ());

      return true;
    }

    return false;
  }

  // FolioRecord_pskel
  //

  void FolioRecord_pskel::
  RollNumber (const model::StringItem&)
  {
  }

  void FolioRecord_pskel::
  FolioStatus (const model::StringItem&)
  {
  }

  void FolioRecord_pskel::
  FolioStatusDescription (const model::StringItem&)
  {
  }

  void FolioRecord_pskel::
  FolioAction (std::unique_ptr<model::FolioAction>&)
  {
  }

  void FolioRecord_pskel::
  FolioAddresses (std::vector<std::unique_ptr<model::FolioAddress>>&)
  {
  }

  void FolioRecord_pskel::
  OwnershipGroups (std::vector<std::unique_ptr<model::OwnershipGroup>>&)
  {
  }

  void FolioRecord_pskel::
  LegalDescriptions (std::vector<std::unique_ptr<model::LegalDescription>>&)
  {
  }

  void FolioRecord_pskel::
  FolioDescription (std::unique_ptr<model::FolioDescription>&)
  {
  }

  void FolioRecord_pskel::
  Sales (std::vector<std::unique_ptr<model::Sale>>&)
  {
  }

  void FolioRecord_pskel::
  Values (std::unique_ptr<model::PropertyValues>&)
  {
  }

  void FolioRecord_pskel::
  Amendments ()
  {
  }

  void FolioRecord_pskel::
  MinorTaxing (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&)
  {
  }

  void FolioRecord_pskel::
  Farms (std::vector<std::unique_ptr<model::Farm>>&)
  {
  }

  void FolioRecord_pskel::
  ManufacturedHomes (std::vector<std::unique_ptr<model::ManufacturedHome>>&)
  {
  }

  void FolioRecord_pskel::
  ManagedForests (std::vector<std::unique_ptr<model::ManagedForest>>&)
  {
  }

  void FolioRecord_pskel::
  OilAndGas (std::vector<std::unique_ptr<model::OilAndGas>>&)
  {
  }

  void FolioRecord_pskel::
  LandCharacteristics (std::vector<std::unique_ptr<model::LandCharacteristic>>&)
  {
  }

  void FolioRecord_pskel::
  ID (const QString&)
  {
  }

  bool FolioRecord_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "RollNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->RollNumber_parser_;

      if (this->RollNumber_parser_)
        this->RollNumber_parser_->pre ();

      return true;
    }

    if (n == "FolioStatus" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FolioStatus_parser_;

      if (this->FolioStatus_parser_)
        this->FolioStatus_parser_->pre ();

      return true;
    }

    if (n == "FolioStatusDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FolioStatusDescription_parser_;

      if (this->FolioStatusDescription_parser_)
        this->FolioStatusDescription_parser_->pre ();

      return true;
    }

    if (n == "FolioAction" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FolioAction_parser_;

      if (this->FolioAction_parser_)
        this->FolioAction_parser_->pre ();

      return true;
    }

    if (n == "FolioAddresses" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FolioAddresses_parser_;

      if (this->FolioAddresses_parser_)
        this->FolioAddresses_parser_->pre ();

      return true;
    }

    if (n == "OwnershipGroups" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->OwnershipGroups_parser_;

      if (this->OwnershipGroups_parser_)
        this->OwnershipGroups_parser_->pre ();

      return true;
    }

    if (n == "LegalDescriptions" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->LegalDescriptions_parser_;

      if (this->LegalDescriptions_parser_)
        this->LegalDescriptions_parser_->pre ();

      return true;
    }

    if (n == "FolioDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FolioDescription_parser_;

      if (this->FolioDescription_parser_)
        this->FolioDescription_parser_->pre ();

      return true;
    }

    if (n == "Sales" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Sales_parser_;

      if (this->Sales_parser_)
        this->Sales_parser_->pre ();

      return true;
    }

    if (n == "Values" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Values_parser_;

      if (this->Values_parser_)
        this->Values_parser_->pre ();

      return true;
    }

    if (n == "Amendments" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Amendments_parser_;

      if (this->Amendments_parser_)
        this->Amendments_parser_->pre ();

      return true;
    }

    if (n == "MinorTaxing" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->MinorTaxing_parser_;

      if (this->MinorTaxing_parser_)
        this->MinorTaxing_parser_->pre ();

      return true;
    }

    if (n == "Farms" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Farms_parser_;

      if (this->Farms_parser_)
        this->Farms_parser_->pre ();

      return true;
    }

    if (n == "ManufacturedHomes" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ManufacturedHomes_parser_;

      if (this->ManufacturedHomes_parser_)
        this->ManufacturedHomes_parser_->pre ();

      return true;
    }

    if (n == "ManagedForests" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ManagedForests_parser_;

      if (this->ManagedForests_parser_)
        this->ManagedForests_parser_->pre ();

      return true;
    }

    if (n == "OilAndGas" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->OilAndGas_parser_;

      if (this->OilAndGas_parser_)
        this->OilAndGas_parser_->pre ();

      return true;
    }

    if (n == "LandCharacteristics" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->LandCharacteristics_parser_;

      if (this->LandCharacteristics_parser_)
        this->LandCharacteristics_parser_->pre ();

      return true;
    }

    return false;
  }

  bool FolioRecord_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "RollNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->RollNumber_parser_)
        this->RollNumber (this->RollNumber_parser_->post_FolioRollNumber ());

      return true;
    }

    if (n == "FolioStatus" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->FolioStatus_parser_)
        this->FolioStatus (this->FolioStatus_parser_->post_FolioLookupCodeItem ());

      return true;
    }

    if (n == "FolioStatusDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->FolioStatusDescription_parser_)
        this->FolioStatusDescription (this->FolioStatusDescription_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "FolioAction" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->FolioAction_parser_)
        this->FolioAction (this->FolioAction_parser_->post_FolioAction ());

      return true;
    }

    if (n == "FolioAddresses" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->FolioAddresses_parser_)
        this->FolioAddresses (this->FolioAddresses_parser_->post_FolioAddressCollection ());

      return true;
    }

    if (n == "OwnershipGroups" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->OwnershipGroups_parser_)
        this->OwnershipGroups (this->OwnershipGroups_parser_->post_OwnershipGroupCollection ());

      return true;
    }

    if (n == "LegalDescriptions" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->LegalDescriptions_parser_)
        this->LegalDescriptions (this->LegalDescriptions_parser_->post_LegalDescriptionCollection ());

      return true;
    }

    if (n == "FolioDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->FolioDescription_parser_)
        this->FolioDescription (this->FolioDescription_parser_->post_FolioDescription ());

      return true;
    }

    if (n == "Sales" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Sales_parser_)
        this->Sales (this->Sales_parser_->post_SaleCollection ());

      return true;
    }

    if (n == "Values" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Values_parser_)
        this->Values (this->Values_parser_->post_PropertyValues ());

      return true;
    }

    if (n == "Amendments" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Amendments_parser_)
      {
        this->Amendments_parser_->post_FolioAmendmentCollection ();
        this->Amendments ();
      }

      return true;
    }

    if (n == "MinorTaxing" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->MinorTaxing_parser_)
        this->MinorTaxing (this->MinorTaxing_parser_->post_MinorTaxing ());

      return true;
    }

    if (n == "Farms" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Farms_parser_)
        this->Farms (this->Farms_parser_->post_FarmCollection ());

      return true;
    }

    if (n == "ManufacturedHomes" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ManufacturedHomes_parser_)
        this->ManufacturedHomes (this->ManufacturedHomes_parser_->post_ManufacturedHomeCollection ());

      return true;
    }

    if (n == "ManagedForests" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ManagedForests_parser_)
        this->ManagedForests (this->ManagedForests_parser_->post_ManagedForestCollection ());

      return true;
    }

    if (n == "OilAndGas" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->OilAndGas_parser_)
        this->OilAndGas (this->OilAndGas_parser_->post_OilAndGasCollection ());

      return true;
    }

    if (n == "LandCharacteristics" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->LandCharacteristics_parser_)
        this->LandCharacteristics (this->LandCharacteristics_parser_->post_LandCharacteristicCollection ());

      return true;
    }

    return false;
  }

  bool FolioRecord_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();
        this->ID_parser_->_pre_impl ();
        this->ID_parser_->_characters (v);
        this->ID_parser_->_post_impl ();
        this->ID (this->ID_parser_->post_UniqueID ());
      }

      return true;
    }

    return false;
  }

  // FolioRollNumber_pskel
  //

  void FolioRollNumber_pskel::
  Action (const model::ActionCode::Code&)
  {
  }

  void FolioRollNumber_pskel::
  OldValue (const QString&)
  {
  }

  bool FolioRollNumber_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::dataadvice::String32_pskel::_attribute_impl (ns, n, v))
      return true;

    if (n == "Action" && ns.empty ())
    {
      if (this->Action_parser_)
      {
        this->Action_parser_->pre ();
        this->Action_parser_->_pre_impl ();
        this->Action_parser_->_characters (v);
        this->Action_parser_->_post_impl ();
        this->Action (this->Action_parser_->post_ActionCode ());
      }

      return true;
    }

    if (n == "OldValue" && ns.empty ())
    {
      if (this->OldValue_parser_)
      {
        this->OldValue_parser_->pre ();
        this->OldValue_parser_->_pre_impl ();
        this->OldValue_parser_->_characters (v);
        this->OldValue_parser_->_post_impl ();
        this->OldValue (this->OldValue_parser_->post_String32 ());
      }

      return true;
    }

    return false;
  }

  // FolioAction_pskel
  //

  void FolioAction_pskel::
  FolioAdd (const model::FolioAction&)
  {
  }

  void FolioAction_pskel::
  FolioDelete (const model::FolioAction&)
  {
  }

  bool FolioAction_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "FolioAdd" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FolioAdd_parser_;

      if (this->FolioAdd_parser_)
        this->FolioAdd_parser_->pre ();

      return true;
    }

    if (n == "FolioDelete" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FolioDelete_parser_;

      if (this->FolioDelete_parser_)
        this->FolioDelete_parser_->pre ();

      return true;
    }

    return false;
  }

  bool FolioAction_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "FolioAdd" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->FolioAdd_parser_)
        this->FolioAdd (this->FolioAdd_parser_->post_FolioAdd ());

      return true;
    }

    if (n == "FolioDelete" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->FolioDelete_parser_)
        this->FolioDelete (this->FolioDelete_parser_->post_FolioDelete ());

      return true;
    }

    return false;
  }

  // FolioAdd_pskel
  //

  void FolioAdd_pskel::
  FolioRenumber (const model::FolioRenumber&)
  {
  }

  bool FolioAdd_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "FolioRenumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FolioRenumber_parser_;

      if (this->FolioRenumber_parser_)
        this->FolioRenumber_parser_->pre ();

      return true;
    }

    return false;
  }

  bool FolioAdd_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "FolioRenumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->FolioRenumber_parser_)
        this->FolioRenumber (this->FolioRenumber_parser_->post_FolioRenumber ());

      return true;
    }

    return false;
  }

  // FolioDelete_pskel
  //

  void FolioDelete_pskel::
  FolioRenumber (const model::FolioRenumber&)
  {
  }

  void FolioDelete_pskel::
  DeleteReasonCode (const QString&)
  {
  }

  void FolioDelete_pskel::
  DeleteReasonDescription (const QString&)
  {
  }

  bool FolioDelete_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "FolioRenumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FolioRenumber_parser_;

      if (this->FolioRenumber_parser_)
        this->FolioRenumber_parser_->pre ();

      return true;
    }

    if (n == "DeleteReasonCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->DeleteReasonCode_parser_;

      if (this->DeleteReasonCode_parser_)
        this->DeleteReasonCode_parser_->pre ();

      return true;
    }

    if (n == "DeleteReasonDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->DeleteReasonDescription_parser_;

      if (this->DeleteReasonDescription_parser_)
        this->DeleteReasonDescription_parser_->pre ();

      return true;
    }

    return false;
  }

  bool FolioDelete_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "FolioRenumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->FolioRenumber_parser_)
        this->FolioRenumber (this->FolioRenumber_parser_->post_FolioRenumber ());

      return true;
    }

    if (n == "DeleteReasonCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->DeleteReasonCode_parser_)
        this->DeleteReasonCode (this->DeleteReasonCode_parser_->post_LookupCode ());

      return true;
    }

    if (n == "DeleteReasonDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->DeleteReasonDescription_parser_)
        this->DeleteReasonDescription (this->DeleteReasonDescription_parser_->post_String255 ());

      return true;
    }

    return false;
  }

  // FolioRenumber_pskel
  //

  void FolioRenumber_pskel::
  AssessmentAreaCode (const QString&)
  {
  }

  void FolioRenumber_pskel::
  AssessmentAreaDescription (const QString&)
  {
  }

  void FolioRenumber_pskel::
  JurisdictionCode (const QString&)
  {
  }

  void FolioRenumber_pskel::
  JurisdictionDescription (const QString&)
  {
  }

  void FolioRenumber_pskel::
  RollNumber (const QString&)
  {
  }

  bool FolioRenumber_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "AssessmentAreaCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->AssessmentAreaCode_parser_;

      if (this->AssessmentAreaCode_parser_)
        this->AssessmentAreaCode_parser_->pre ();

      return true;
    }

    if (n == "AssessmentAreaDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->AssessmentAreaDescription_parser_;

      if (this->AssessmentAreaDescription_parser_)
        this->AssessmentAreaDescription_parser_->pre ();

      return true;
    }

    if (n == "JurisdictionCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->JurisdictionCode_parser_;

      if (this->JurisdictionCode_parser_)
        this->JurisdictionCode_parser_->pre ();

      return true;
    }

    if (n == "JurisdictionDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->JurisdictionDescription_parser_;

      if (this->JurisdictionDescription_parser_)
        this->JurisdictionDescription_parser_->pre ();

      return true;
    }

    if (n == "RollNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->RollNumber_parser_;

      if (this->RollNumber_parser_)
        this->RollNumber_parser_->pre ();

      return true;
    }

    return false;
  }

  bool FolioRenumber_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "AssessmentAreaCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->AssessmentAreaCode_parser_)
        this->AssessmentAreaCode (this->AssessmentAreaCode_parser_->post_AssessmentAreaCode ());

      return true;
    }

    if (n == "AssessmentAreaDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->AssessmentAreaDescription_parser_)
        this->AssessmentAreaDescription (this->AssessmentAreaDescription_parser_->post_String255 ());

      return true;
    }

    if (n == "JurisdictionCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->JurisdictionCode_parser_)
        this->JurisdictionCode (this->JurisdictionCode_parser_->post_JurisdictionCode ());

      return true;
    }

    if (n == "JurisdictionDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->JurisdictionDescription_parser_)
        this->JurisdictionDescription (this->JurisdictionDescription_parser_->post_String255 ());

      return true;
    }

    if (n == "RollNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->RollNumber_parser_)
        this->RollNumber (this->RollNumber_parser_->post_String32 ());

      return true;
    }

    return false;
  }

  // FolioItemGroup_pskel
  //

  void FolioItemGroup_pskel::
  Action (const model::ActionCode::Code&)
  {
  }

  bool FolioItemGroup_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Action" && ns.empty ())
    {
      if (this->Action_parser_)
      {
        this->Action_parser_->pre ();
        this->Action_parser_->_pre_impl ();
        this->Action_parser_->_characters (v);
        this->Action_parser_->_post_impl ();
        this->Action (this->Action_parser_->post_ActionCode ());
      }

      return true;
    }

    return false;
  }

  // FolioAddressCollection_pskel
  //

  void FolioAddressCollection_pskel::
  FolioAddress (std::unique_ptr<model::FolioAddress>&)
  {
  }

  bool FolioAddressCollection_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "FolioAddress" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FolioAddress_parser_;

      if (this->FolioAddress_parser_)
        this->FolioAddress_parser_->pre ();

      return true;
    }

    return false;
  }

  bool FolioAddressCollection_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "FolioAddress" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->FolioAddress_parser_)
        this->FolioAddress (this->FolioAddress_parser_->post_FolioAddress ());

      return true;
    }

    return false;
  }

  // FolioAddress_pskel
  //

  void FolioAddress_pskel::
  PrimaryFlag (const model::BooleanItem&)
  {
  }

  void FolioAddress_pskel::
  UnitNumber (const model::StringItem&)
  {
  }

  void FolioAddress_pskel::
  StreetNumber (const model::StringItem&)
  {
  }

  void FolioAddress_pskel::
  StreetDirectionPrefix (const model::StringItem&)
  {
  }

  void FolioAddress_pskel::
  StreetName (const model::StringItem&)
  {
  }

  void FolioAddress_pskel::
  StreetType (const model::StringItem&)
  {
  }

  void FolioAddress_pskel::
  StreetDirectionSuffix (const model::StringItem&)
  {
  }

  void FolioAddress_pskel::
  City (const model::StringItem&)
  {
  }

  void FolioAddress_pskel::
  ProvinceState (const model::StringItem&)
  {
  }

  void FolioAddress_pskel::
  PostalZip (const model::StringItem&)
  {
  }

  void FolioAddress_pskel::
  MapReferenceNumber (const model::StringItem&)
  {
  }

  void FolioAddress_pskel::
  ID (const QString&)
  {
  }

  bool FolioAddress_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "PrimaryFlag" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->PrimaryFlag_parser_;

      if (this->PrimaryFlag_parser_)
        this->PrimaryFlag_parser_->pre ();

      return true;
    }

    if (n == "UnitNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->UnitNumber_parser_;

      if (this->UnitNumber_parser_)
        this->UnitNumber_parser_->pre ();

      return true;
    }

    if (n == "StreetNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->StreetNumber_parser_;

      if (this->StreetNumber_parser_)
        this->StreetNumber_parser_->pre ();

      return true;
    }

    if (n == "StreetDirectionPrefix" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->StreetDirectionPrefix_parser_;

      if (this->StreetDirectionPrefix_parser_)
        this->StreetDirectionPrefix_parser_->pre ();

      return true;
    }

    if (n == "StreetName" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->StreetName_parser_;

      if (this->StreetName_parser_)
        this->StreetName_parser_->pre ();

      return true;
    }

    if (n == "StreetType" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->StreetType_parser_;

      if (this->StreetType_parser_)
        this->StreetType_parser_->pre ();

      return true;
    }

    if (n == "StreetDirectionSuffix" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->StreetDirectionSuffix_parser_;

      if (this->StreetDirectionSuffix_parser_)
        this->StreetDirectionSuffix_parser_->pre ();

      return true;
    }

    if (n == "City" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->City_parser_;

      if (this->City_parser_)
        this->City_parser_->pre ();

      return true;
    }

    if (n == "ProvinceState" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ProvinceState_parser_;

      if (this->ProvinceState_parser_)
        this->ProvinceState_parser_->pre ();

      return true;
    }

    if (n == "PostalZip" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->PostalZip_parser_;

      if (this->PostalZip_parser_)
        this->PostalZip_parser_->pre ();

      return true;
    }

    if (n == "MapReferenceNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->MapReferenceNumber_parser_;

      if (this->MapReferenceNumber_parser_)
        this->MapReferenceNumber_parser_->pre ();

      return true;
    }

    return false;
  }

  bool FolioAddress_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "PrimaryFlag" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->PrimaryFlag_parser_)
        this->PrimaryFlag (this->PrimaryFlag_parser_->post_FolioBooleanItem ());

      return true;
    }

    if (n == "UnitNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->UnitNumber_parser_)
        this->UnitNumber (this->UnitNumber_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "StreetNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->StreetNumber_parser_)
        this->StreetNumber (this->StreetNumber_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "StreetDirectionPrefix" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->StreetDirectionPrefix_parser_)
        this->StreetDirectionPrefix (this->StreetDirectionPrefix_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "StreetName" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->StreetName_parser_)
        this->StreetName (this->StreetName_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "StreetType" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->StreetType_parser_)
        this->StreetType (this->StreetType_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "StreetDirectionSuffix" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->StreetDirectionSuffix_parser_)
        this->StreetDirectionSuffix (this->StreetDirectionSuffix_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "City" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->City_parser_)
        this->City (this->City_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "ProvinceState" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ProvinceState_parser_)
        this->ProvinceState (this->ProvinceState_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "PostalZip" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->PostalZip_parser_)
        this->PostalZip (this->PostalZip_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "MapReferenceNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->MapReferenceNumber_parser_)
        this->MapReferenceNumber (this->MapReferenceNumber_parser_->post_FolioString255Item ());

      return true;
    }

    return false;
  }

  bool FolioAddress_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_attribute_impl (ns, n, v))
      return true;

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();
        this->ID_parser_->_pre_impl ();
        this->ID_parser_->_characters (v);
        this->ID_parser_->_post_impl ();
        this->ID (this->ID_parser_->post_UniqueID ());
      }

      return true;
    }

    return false;
  }

  // OwnershipGroupCollection_pskel
  //

  void OwnershipGroupCollection_pskel::
  OwnershipGroup (std::unique_ptr<model::OwnershipGroup>&)
  {
  }

  bool OwnershipGroupCollection_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "OwnershipGroup" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->OwnershipGroup_parser_;

      if (this->OwnershipGroup_parser_)
        this->OwnershipGroup_parser_->pre ();

      return true;
    }

    return false;
  }

  bool OwnershipGroupCollection_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "OwnershipGroup" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->OwnershipGroup_parser_)
        this->OwnershipGroup (this->OwnershipGroup_parser_->post_OwnershipGroup ());

      return true;
    }

    return false;
  }

  // OwnershipGroup_pskel
  //

  void OwnershipGroup_pskel::
  OwnershipGroupID (const model::StringItem&)
  {
  }

  void OwnershipGroup_pskel::
  AssessmentNoticeReturned (const model::BooleanItem&)
  {
  }

  void OwnershipGroup_pskel::
  AssessmentNoticeSuppressed (const model::BooleanItem&)
  {
  }

  void OwnershipGroup_pskel::
  ChangeType (const model::StringItem&)
  {
  }

  void OwnershipGroup_pskel::
  ChangeTypeDescription (const model::StringItem&)
  {
  }

  void OwnershipGroup_pskel::
  ChangeDate (const model::DateItem&)
  {
  }

  void OwnershipGroup_pskel::
  ChangeSource (const model::StringItem&)
  {
  }

  void OwnershipGroup_pskel::
  ChangeSourceDescription (const model::StringItem&)
  {
  }

  void OwnershipGroup_pskel::
  Owners (std::vector<std::unique_ptr<model::Owner>>&)
  {
  }

  void OwnershipGroup_pskel::
  FormattedMailingAddress (std::unique_ptr<model::FormattedMailingAddress>&)
  {
  }

  void OwnershipGroup_pskel::
  MailingAddress (std::unique_ptr<model::MailingAddress>&)
  {
  }

  bool OwnershipGroup_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "OwnershipGroupID" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->OwnershipGroupID_parser_;

      if (this->OwnershipGroupID_parser_)
        this->OwnershipGroupID_parser_->pre ();

      return true;
    }

    if (n == "AssessmentNoticeReturned" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->AssessmentNoticeReturned_parser_;

      if (this->AssessmentNoticeReturned_parser_)
        this->AssessmentNoticeReturned_parser_->pre ();

      return true;
    }

    if (n == "AssessmentNoticeSuppressed" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->AssessmentNoticeSuppressed_parser_;

      if (this->AssessmentNoticeSuppressed_parser_)
        this->AssessmentNoticeSuppressed_parser_->pre ();

      return true;
    }

    if (n == "ChangeType" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ChangeType_parser_;

      if (this->ChangeType_parser_)
        this->ChangeType_parser_->pre ();

      return true;
    }

    if (n == "ChangeTypeDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ChangeTypeDescription_parser_;

      if (this->ChangeTypeDescription_parser_)
        this->ChangeTypeDescription_parser_->pre ();

      return true;
    }

    if (n == "ChangeDate" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ChangeDate_parser_;

      if (this->ChangeDate_parser_)
        this->ChangeDate_parser_->pre ();

      return true;
    }

    if (n == "ChangeSource" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ChangeSource_parser_;

      if (this->ChangeSource_parser_)
        this->ChangeSource_parser_->pre ();

      return true;
    }

    if (n == "ChangeSourceDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ChangeSourceDescription_parser_;

      if (this->ChangeSourceDescription_parser_)
        this->ChangeSourceDescription_parser_->pre ();

      return true;
    }

    if (n == "Owners" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Owners_parser_;

      if (this->Owners_parser_)
        this->Owners_parser_->pre ();

      return true;
    }

    if (n == "FormattedMailingAddress" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FormattedMailingAddress_parser_;

      if (this->FormattedMailingAddress_parser_)
        this->FormattedMailingAddress_parser_->pre ();

      return true;
    }

    if (n == "MailingAddress" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->MailingAddress_parser_;

      if (this->MailingAddress_parser_)
        this->MailingAddress_parser_->pre ();

      return true;
    }

    return false;
  }

  bool OwnershipGroup_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "OwnershipGroupID" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->OwnershipGroupID_parser_)
        this->OwnershipGroupID (this->OwnershipGroupID_parser_->post_FolioUniqueIDItem ());

      return true;
    }

    if (n == "AssessmentNoticeReturned" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->AssessmentNoticeReturned_parser_)
        this->AssessmentNoticeReturned (this->AssessmentNoticeReturned_parser_->post_FolioBooleanItem ());

      return true;
    }

    if (n == "AssessmentNoticeSuppressed" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->AssessmentNoticeSuppressed_parser_)
        this->AssessmentNoticeSuppressed (this->AssessmentNoticeSuppressed_parser_->post_FolioBooleanItem ());

      return true;
    }

    if (n == "ChangeType" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ChangeType_parser_)
        this->ChangeType (this->ChangeType_parser_->post_FolioLookupCodeItem ());

      return true;
    }

    if (n == "ChangeTypeDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ChangeTypeDescription_parser_)
        this->ChangeTypeDescription (this->ChangeTypeDescription_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "ChangeDate" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ChangeDate_parser_)
        this->ChangeDate (this->ChangeDate_parser_->post_FolioDateItem ());

      return true;
    }

    if (n == "ChangeSource" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ChangeSource_parser_)
        this->ChangeSource (this->ChangeSource_parser_->post_FolioLookupCodeItem ());

      return true;
    }

    if (n == "ChangeSourceDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ChangeSourceDescription_parser_)
        this->ChangeSourceDescription (this->ChangeSourceDescription_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "Owners" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Owners_parser_)
        this->Owners (this->Owners_parser_->post_OwnerCollection ());

      return true;
    }

    if (n == "FormattedMailingAddress" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->FormattedMailingAddress_parser_)
        this->FormattedMailingAddress (this->FormattedMailingAddress_parser_->post_FormattedMailingAddress ());

      return true;
    }

    if (n == "MailingAddress" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->MailingAddress_parser_)
        this->MailingAddress (this->MailingAddress_parser_->post_MailingAddress ());

      return true;
    }

    return false;
  }

  // OwnerCollection_pskel
  //

  void OwnerCollection_pskel::
  Owner (std::unique_ptr<model::Owner>&)
  {
  }

  bool OwnerCollection_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "Owner" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Owner_parser_;

      if (this->Owner_parser_)
        this->Owner_parser_->pre ();

      return true;
    }

    return false;
  }

  bool OwnerCollection_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "Owner" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Owner_parser_)
        this->Owner (this->Owner_parser_->post_Owner ());

      return true;
    }

    return false;
  }

  // Owner_pskel
  //

  void Owner_pskel::
  FirstName (const model::StringItem&)
  {
  }

  void Owner_pskel::
  MiddleName (const model::StringItem&)
  {
  }

  void Owner_pskel::
  MiddleInitial (const model::StringItem&)
  {
  }

  void Owner_pskel::
  CompanyOrLastName (const model::StringItem&)
  {
  }

  void Owner_pskel::
  OwnerSequenceID (const model::StringItem&)
  {
  }

  void Owner_pskel::
  EquityType (const model::StringItem&)
  {
  }

  void Owner_pskel::
  EquityTypeDescription (const model::StringItem&)
  {
  }

  void Owner_pskel::
  ID (const QString&)
  {
  }

  bool Owner_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "FirstName" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FirstName_parser_;

      if (this->FirstName_parser_)
        this->FirstName_parser_->pre ();

      return true;
    }

    if (n == "MiddleName" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->MiddleName_parser_;

      if (this->MiddleName_parser_)
        this->MiddleName_parser_->pre ();

      return true;
    }

    if (n == "MiddleInitial" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->MiddleInitial_parser_;

      if (this->MiddleInitial_parser_)
        this->MiddleInitial_parser_->pre ();

      return true;
    }

    if (n == "CompanyOrLastName" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->CompanyOrLastName_parser_;

      if (this->CompanyOrLastName_parser_)
        this->CompanyOrLastName_parser_->pre ();

      return true;
    }

    if (n == "OwnerSequenceID" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->OwnerSequenceID_parser_;

      if (this->OwnerSequenceID_parser_)
        this->OwnerSequenceID_parser_->pre ();

      return true;
    }

    if (n == "EquityType" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->EquityType_parser_;

      if (this->EquityType_parser_)
        this->EquityType_parser_->pre ();

      return true;
    }

    if (n == "EquityTypeDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->EquityTypeDescription_parser_;

      if (this->EquityTypeDescription_parser_)
        this->EquityTypeDescription_parser_->pre ();

      return true;
    }

    return false;
  }

  bool Owner_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "FirstName" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->FirstName_parser_)
        this->FirstName (this->FirstName_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "MiddleName" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->MiddleName_parser_)
        this->MiddleName (this->MiddleName_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "MiddleInitial" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->MiddleInitial_parser_)
        this->MiddleInitial (this->MiddleInitial_parser_->post_FolioString1Item ());

      return true;
    }

    if (n == "CompanyOrLastName" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->CompanyOrLastName_parser_)
        this->CompanyOrLastName (this->CompanyOrLastName_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "OwnerSequenceID" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->OwnerSequenceID_parser_)
        this->OwnerSequenceID (this->OwnerSequenceID_parser_->post_FolioUniqueIDItem ());

      return true;
    }

    if (n == "EquityType" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->EquityType_parser_)
        this->EquityType (this->EquityType_parser_->post_FolioLookupCodeItem ());

      return true;
    }

    if (n == "EquityTypeDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->EquityTypeDescription_parser_)
        this->EquityTypeDescription (this->EquityTypeDescription_parser_->post_FolioString255Item ());

      return true;
    }

    return false;
  }

  bool Owner_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_attribute_impl (ns, n, v))
      return true;

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();
        this->ID_parser_->_pre_impl ();
        this->ID_parser_->_characters (v);
        this->ID_parser_->_post_impl ();
        this->ID (this->ID_parser_->post_UniqueID ());
      }

      return true;
    }

    return false;
  }

  // MailingAddress_pskel
  //

  void MailingAddress_pskel::
  Attention (const model::StringItem&)
  {
  }

  void MailingAddress_pskel::
  CareOf (const model::StringItem&)
  {
  }

  void MailingAddress_pskel::
  Floor (const model::StringItem&)
  {
  }

  void MailingAddress_pskel::
  UnitNumber (const model::StringItem&)
  {
  }

  void MailingAddress_pskel::
  StreetDirectionPrefix (const model::StringItem&)
  {
  }

  void MailingAddress_pskel::
  StreetNumber (const model::StringItem&)
  {
  }

  void MailingAddress_pskel::
  StreetName (const model::StringItem&)
  {
  }

  void MailingAddress_pskel::
  StreetType (const model::StringItem&)
  {
  }

  void MailingAddress_pskel::
  StreetDirectionSuffix (const model::StringItem&)
  {
  }

  void MailingAddress_pskel::
  City (const model::StringItem&)
  {
  }

  void MailingAddress_pskel::
  ProvinceState (const model::StringItem&)
  {
  }

  void MailingAddress_pskel::
  Country (const model::StringItem&)
  {
  }

  void MailingAddress_pskel::
  PostalZip (const model::StringItem&)
  {
  }

  void MailingAddress_pskel::
  FreeformAddress (const model::StringItem&)
  {
  }

  void MailingAddress_pskel::
  Compartment (const model::StringItem&)
  {
  }

  void MailingAddress_pskel::
  DeliveryInstallationType (const model::StringItem&)
  {
  }

  void MailingAddress_pskel::
  DeliveryInstallationTypeValue (const model::StringItem&)
  {
  }

  void MailingAddress_pskel::
  ModeOfDelivery (const model::StringItem&)
  {
  }

  void MailingAddress_pskel::
  ModeOfDeliveryValue (const model::StringItem&)
  {
  }

  void MailingAddress_pskel::
  Site (const model::StringItem&)
  {
  }

  void MailingAddress_pskel::
  BulkMailCode (const model::StringItem&)
  {
  }

  void MailingAddress_pskel::
  ID (const QString&)
  {
  }

  bool MailingAddress_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "Attention" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Attention_parser_;

      if (this->Attention_parser_)
        this->Attention_parser_->pre ();

      return true;
    }

    if (n == "CareOf" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->CareOf_parser_;

      if (this->CareOf_parser_)
        this->CareOf_parser_->pre ();

      return true;
    }

    if (n == "Floor" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Floor_parser_;

      if (this->Floor_parser_)
        this->Floor_parser_->pre ();

      return true;
    }

    if (n == "UnitNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->UnitNumber_parser_;

      if (this->UnitNumber_parser_)
        this->UnitNumber_parser_->pre ();

      return true;
    }

    if (n == "StreetDirectionPrefix" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->StreetDirectionPrefix_parser_;

      if (this->StreetDirectionPrefix_parser_)
        this->StreetDirectionPrefix_parser_->pre ();

      return true;
    }

    if (n == "StreetNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->StreetNumber_parser_;

      if (this->StreetNumber_parser_)
        this->StreetNumber_parser_->pre ();

      return true;
    }

    if (n == "StreetName" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->StreetName_parser_;

      if (this->StreetName_parser_)
        this->StreetName_parser_->pre ();

      return true;
    }

    if (n == "StreetType" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->StreetType_parser_;

      if (this->StreetType_parser_)
        this->StreetType_parser_->pre ();

      return true;
    }

    if (n == "StreetDirectionSuffix" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->StreetDirectionSuffix_parser_;

      if (this->StreetDirectionSuffix_parser_)
        this->StreetDirectionSuffix_parser_->pre ();

      return true;
    }

    if (n == "City" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->City_parser_;

      if (this->City_parser_)
        this->City_parser_->pre ();

      return true;
    }

    if (n == "ProvinceState" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ProvinceState_parser_;

      if (this->ProvinceState_parser_)
        this->ProvinceState_parser_->pre ();

      return true;
    }

    if (n == "Country" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Country_parser_;

      if (this->Country_parser_)
        this->Country_parser_->pre ();

      return true;
    }

    if (n == "PostalZip" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->PostalZip_parser_;

      if (this->PostalZip_parser_)
        this->PostalZip_parser_->pre ();

      return true;
    }

    if (n == "FreeformAddress" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FreeformAddress_parser_;

      if (this->FreeformAddress_parser_)
        this->FreeformAddress_parser_->pre ();

      return true;
    }

    if (n == "Compartment" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Compartment_parser_;

      if (this->Compartment_parser_)
        this->Compartment_parser_->pre ();

      return true;
    }

    if (n == "DeliveryInstallationType" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->DeliveryInstallationType_parser_;

      if (this->DeliveryInstallationType_parser_)
        this->DeliveryInstallationType_parser_->pre ();

      return true;
    }

    if (n == "DeliveryInstallationTypeValue" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->DeliveryInstallationTypeValue_parser_;

      if (this->DeliveryInstallationTypeValue_parser_)
        this->DeliveryInstallationTypeValue_parser_->pre ();

      return true;
    }

    if (n == "ModeOfDelivery" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ModeOfDelivery_parser_;

      if (this->ModeOfDelivery_parser_)
        this->ModeOfDelivery_parser_->pre ();

      return true;
    }

    if (n == "ModeOfDeliveryValue" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ModeOfDeliveryValue_parser_;

      if (this->ModeOfDeliveryValue_parser_)
        this->ModeOfDeliveryValue_parser_->pre ();

      return true;
    }

    if (n == "Site" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Site_parser_;

      if (this->Site_parser_)
        this->Site_parser_->pre ();

      return true;
    }

    if (n == "BulkMailCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->BulkMailCode_parser_;

      if (this->BulkMailCode_parser_)
        this->BulkMailCode_parser_->pre ();

      return true;
    }

    return false;
  }

  bool MailingAddress_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "Attention" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Attention_parser_)
        this->Attention (this->Attention_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "CareOf" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->CareOf_parser_)
        this->CareOf (this->CareOf_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "Floor" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Floor_parser_)
        this->Floor (this->Floor_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "UnitNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->UnitNumber_parser_)
        this->UnitNumber (this->UnitNumber_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "StreetDirectionPrefix" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->StreetDirectionPrefix_parser_)
        this->StreetDirectionPrefix (this->StreetDirectionPrefix_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "StreetNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->StreetNumber_parser_)
        this->StreetNumber (this->StreetNumber_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "StreetName" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->StreetName_parser_)
        this->StreetName (this->StreetName_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "StreetType" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->StreetType_parser_)
        this->StreetType (this->StreetType_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "StreetDirectionSuffix" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->StreetDirectionSuffix_parser_)
        this->StreetDirectionSuffix (this->StreetDirectionSuffix_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "City" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->City_parser_)
        this->City (this->City_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "ProvinceState" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ProvinceState_parser_)
        this->ProvinceState (this->ProvinceState_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "Country" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Country_parser_)
        this->Country (this->Country_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "PostalZip" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->PostalZip_parser_)
        this->PostalZip (this->PostalZip_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "FreeformAddress" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->FreeformAddress_parser_)
        this->FreeformAddress (this->FreeformAddress_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "Compartment" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Compartment_parser_)
        this->Compartment (this->Compartment_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "DeliveryInstallationType" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->DeliveryInstallationType_parser_)
        this->DeliveryInstallationType (this->DeliveryInstallationType_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "DeliveryInstallationTypeValue" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->DeliveryInstallationTypeValue_parser_)
        this->DeliveryInstallationTypeValue (this->DeliveryInstallationTypeValue_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "ModeOfDelivery" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ModeOfDelivery_parser_)
        this->ModeOfDelivery (this->ModeOfDelivery_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "ModeOfDeliveryValue" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ModeOfDeliveryValue_parser_)
        this->ModeOfDeliveryValue (this->ModeOfDeliveryValue_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "Site" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Site_parser_)
        this->Site (this->Site_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "BulkMailCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->BulkMailCode_parser_)
        this->BulkMailCode (this->BulkMailCode_parser_->post_FolioString255Item ());

      return true;
    }

    return false;
  }

  bool MailingAddress_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_attribute_impl (ns, n, v))
      return true;

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();
        this->ID_parser_->_pre_impl ();
        this->ID_parser_->_characters (v);
        this->ID_parser_->_post_impl ();
        this->ID (this->ID_parser_->post_UniqueID ());
      }

      return true;
    }

    return false;
  }

  // FormattedMailingAddress_pskel
  //

  void FormattedMailingAddress_pskel::
  Line1 (const model::StringItem&)
  {
  }

  void FormattedMailingAddress_pskel::
  Line2 (const model::StringItem&)
  {
  }

  void FormattedMailingAddress_pskel::
  Line3 (const model::StringItem&)
  {
  }

  void FormattedMailingAddress_pskel::
  Line4 (const model::StringItem&)
  {
  }

  void FormattedMailingAddress_pskel::
  Line5 (const model::StringItem&)
  {
  }

  void FormattedMailingAddress_pskel::
  Line6 (const model::StringItem&)
  {
  }

  void FormattedMailingAddress_pskel::
  ID (const QString&)
  {
  }

  bool FormattedMailingAddress_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "Line1" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Line1_parser_;

      if (this->Line1_parser_)
        this->Line1_parser_->pre ();

      return true;
    }

    if (n == "Line2" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Line2_parser_;

      if (this->Line2_parser_)
        this->Line2_parser_->pre ();

      return true;
    }

    if (n == "Line3" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Line3_parser_;

      if (this->Line3_parser_)
        this->Line3_parser_->pre ();

      return true;
    }

    if (n == "Line4" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Line4_parser_;

      if (this->Line4_parser_)
        this->Line4_parser_->pre ();

      return true;
    }

    if (n == "Line5" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Line5_parser_;

      if (this->Line5_parser_)
        this->Line5_parser_->pre ();

      return true;
    }

    if (n == "Line6" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Line6_parser_;

      if (this->Line6_parser_)
        this->Line6_parser_->pre ();

      return true;
    }

    return false;
  }

  bool FormattedMailingAddress_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "Line1" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Line1_parser_)
        this->Line1 (this->Line1_parser_->post_FormattedMailingAddressLine ());

      return true;
    }

    if (n == "Line2" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Line2_parser_)
        this->Line2 (this->Line2_parser_->post_FormattedMailingAddressLine ());

      return true;
    }

    if (n == "Line3" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Line3_parser_)
        this->Line3 (this->Line3_parser_->post_FormattedMailingAddressLine ());

      return true;
    }

    if (n == "Line4" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Line4_parser_)
        this->Line4 (this->Line4_parser_->post_FormattedMailingAddressLine ());

      return true;
    }

    if (n == "Line5" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Line5_parser_)
        this->Line5 (this->Line5_parser_->post_FormattedMailingAddressLine ());

      return true;
    }

    if (n == "Line6" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Line6_parser_)
        this->Line6 (this->Line6_parser_->post_FormattedMailingAddressLine ());

      return true;
    }

    return false;
  }

  bool FormattedMailingAddress_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_attribute_impl (ns, n, v))
      return true;

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();
        this->ID_parser_->_pre_impl ();
        this->ID_parser_->_characters (v);
        this->ID_parser_->_post_impl ();
        this->ID (this->ID_parser_->post_UniqueID ());
      }

      return true;
    }

    return false;
  }

  // FormattedMailingAddressLine_pskel
  //

  void FormattedMailingAddressLine_pskel::
  Action (const model::ActionCode::Code&)
  {
  }

  void FormattedMailingAddressLine_pskel::
  OldValue (const QString&)
  {
  }

  bool FormattedMailingAddressLine_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::dataadvice::String40_pskel::_attribute_impl (ns, n, v))
      return true;

    if (n == "Action" && ns.empty ())
    {
      if (this->Action_parser_)
      {
        this->Action_parser_->pre ();
        this->Action_parser_->_pre_impl ();
        this->Action_parser_->_characters (v);
        this->Action_parser_->_post_impl ();
        this->Action (this->Action_parser_->post_ActionCode ());
      }

      return true;
    }

    if (n == "OldValue" && ns.empty ())
    {
      if (this->OldValue_parser_)
      {
        this->OldValue_parser_->pre ();
        this->OldValue_parser_->_pre_impl ();
        this->OldValue_parser_->_characters (v);
        this->OldValue_parser_->_post_impl ();
        this->OldValue (this->OldValue_parser_->post_String40 ());
      }

      return true;
    }

    return false;
  }

  // LegalDescriptionCollection_pskel
  //

  void LegalDescriptionCollection_pskel::
  LegalDescription (std::unique_ptr<model::LegalDescription>&)
  {
  }

  bool LegalDescriptionCollection_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "LegalDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->LegalDescription_parser_;

      if (this->LegalDescription_parser_)
        this->LegalDescription_parser_->pre ();

      return true;
    }

    return false;
  }

  bool LegalDescriptionCollection_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "LegalDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->LegalDescription_parser_)
        this->LegalDescription (this->LegalDescription_parser_->post_LegalDescription ());

      return true;
    }

    return false;
  }

  // LegalDescription_pskel
  //

  void LegalDescription_pskel::
  FormattedLegalDescription (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  PID (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  Lot (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  StrataLot (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  Parcel (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  Block (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  SubBlock (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  Plan (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  SubLot (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  Part1 (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  Part2 (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  Part3 (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  Part4 (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  DistrictLot (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  LegalSubdivision (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  Section (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  Township (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  Range (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  Meridian (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  MeridianShort (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  BCAGroup (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  LandDistrict (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  LandDistrictDescription (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  Portion (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  ExceptPlan (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  FirstNationReserveNumber (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  FirstNationReserveDescription (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  LeaseLicenceNumber (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  LandBranchFileNumber (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  AirSpaceParcelNumber (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  NtsLocation (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  LegalText (const model::StringItem&)
  {
  }

  void LegalDescription_pskel::
  ID (const QString&)
  {
  }

  bool LegalDescription_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "FormattedLegalDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FormattedLegalDescription_parser_;

      if (this->FormattedLegalDescription_parser_)
        this->FormattedLegalDescription_parser_->pre ();

      return true;
    }

    if (n == "PID" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->PID_parser_;

      if (this->PID_parser_)
        this->PID_parser_->pre ();

      return true;
    }

    if (n == "Lot" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Lot_parser_;

      if (this->Lot_parser_)
        this->Lot_parser_->pre ();

      return true;
    }

    if (n == "StrataLot" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->StrataLot_parser_;

      if (this->StrataLot_parser_)
        this->StrataLot_parser_->pre ();

      return true;
    }

    if (n == "Parcel" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Parcel_parser_;

      if (this->Parcel_parser_)
        this->Parcel_parser_->pre ();

      return true;
    }

    if (n == "Block" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Block_parser_;

      if (this->Block_parser_)
        this->Block_parser_->pre ();

      return true;
    }

    if (n == "SubBlock" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->SubBlock_parser_;

      if (this->SubBlock_parser_)
        this->SubBlock_parser_->pre ();

      return true;
    }

    if (n == "Plan" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Plan_parser_;

      if (this->Plan_parser_)
        this->Plan_parser_->pre ();

      return true;
    }

    if (n == "SubLot" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->SubLot_parser_;

      if (this->SubLot_parser_)
        this->SubLot_parser_->pre ();

      return true;
    }

    if (n == "Part1" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Part1_parser_;

      if (this->Part1_parser_)
        this->Part1_parser_->pre ();

      return true;
    }

    if (n == "Part2" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Part2_parser_;

      if (this->Part2_parser_)
        this->Part2_parser_->pre ();

      return true;
    }

    if (n == "Part3" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Part3_parser_;

      if (this->Part3_parser_)
        this->Part3_parser_->pre ();

      return true;
    }

    if (n == "Part4" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Part4_parser_;

      if (this->Part4_parser_)
        this->Part4_parser_->pre ();

      return true;
    }

    if (n == "DistrictLot" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->DistrictLot_parser_;

      if (this->DistrictLot_parser_)
        this->DistrictLot_parser_->pre ();

      return true;
    }

    if (n == "LegalSubdivision" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->LegalSubdivision_parser_;

      if (this->LegalSubdivision_parser_)
        this->LegalSubdivision_parser_->pre ();

      return true;
    }

    if (n == "Section" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Section_parser_;

      if (this->Section_parser_)
        this->Section_parser_->pre ();

      return true;
    }

    if (n == "Township" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Township_parser_;

      if (this->Township_parser_)
        this->Township_parser_->pre ();

      return true;
    }

    if (n == "Range" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Range_parser_;

      if (this->Range_parser_)
        this->Range_parser_->pre ();

      return true;
    }

    if (n == "Meridian" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Meridian_parser_;

      if (this->Meridian_parser_)
        this->Meridian_parser_->pre ();

      return true;
    }

    if (n == "MeridianShort" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->MeridianShort_parser_;

      if (this->MeridianShort_parser_)
        this->MeridianShort_parser_->pre ();

      return true;
    }

    if (n == "BCAGroup" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->BCAGroup_parser_;

      if (this->BCAGroup_parser_)
        this->BCAGroup_parser_->pre ();

      return true;
    }

    if (n == "LandDistrict" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->LandDistrict_parser_;

      if (this->LandDistrict_parser_)
        this->LandDistrict_parser_->pre ();

      return true;
    }

    if (n == "LandDistrictDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->LandDistrictDescription_parser_;

      if (this->LandDistrictDescription_parser_)
        this->LandDistrictDescription_parser_->pre ();

      return true;
    }

    if (n == "Portion" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Portion_parser_;

      if (this->Portion_parser_)
        this->Portion_parser_->pre ();

      return true;
    }

    if (n == "ExceptPlan" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ExceptPlan_parser_;

      if (this->ExceptPlan_parser_)
        this->ExceptPlan_parser_->pre ();

      return true;
    }

    if (n == "FirstNationReserveNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FirstNationReserveNumber_parser_;

      if (this->FirstNationReserveNumber_parser_)
        this->FirstNationReserveNumber_parser_->pre ();

      return true;
    }

    if (n == "FirstNationReserveDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FirstNationReserveDescription_parser_;

      if (this->FirstNationReserveDescription_parser_)
        this->FirstNationReserveDescription_parser_->pre ();

      return true;
    }

    if (n == "LeaseLicenceNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->LeaseLicenceNumber_parser_;

      if (this->LeaseLicenceNumber_parser_)
        this->LeaseLicenceNumber_parser_->pre ();

      return true;
    }

    if (n == "LandBranchFileNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->LandBranchFileNumber_parser_;

      if (this->LandBranchFileNumber_parser_)
        this->LandBranchFileNumber_parser_->pre ();

      return true;
    }

    if (n == "AirSpaceParcelNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->AirSpaceParcelNumber_parser_;

      if (this->AirSpaceParcelNumber_parser_)
        this->AirSpaceParcelNumber_parser_->pre ();

      return true;
    }

    if (n == "NtsLocation" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->NtsLocation_parser_;

      if (this->NtsLocation_parser_)
        this->NtsLocation_parser_->pre ();

      return true;
    }

    if (n == "LegalText" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->LegalText_parser_;

      if (this->LegalText_parser_)
        this->LegalText_parser_->pre ();

      return true;
    }

    return false;
  }

  bool LegalDescription_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "FormattedLegalDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->FormattedLegalDescription_parser_)
        this->FormattedLegalDescription (this->FormattedLegalDescription_parser_->post_FolioString1024Item ());

      return true;
    }

    if (n == "PID" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->PID_parser_)
        this->PID (this->PID_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "Lot" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Lot_parser_)
        this->Lot (this->Lot_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "StrataLot" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->StrataLot_parser_)
        this->StrataLot (this->StrataLot_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "Parcel" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Parcel_parser_)
        this->Parcel (this->Parcel_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "Block" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Block_parser_)
        this->Block (this->Block_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "SubBlock" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->SubBlock_parser_)
        this->SubBlock (this->SubBlock_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "Plan" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Plan_parser_)
        this->Plan (this->Plan_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "SubLot" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->SubLot_parser_)
        this->SubLot (this->SubLot_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "Part1" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Part1_parser_)
        this->Part1 (this->Part1_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "Part2" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Part2_parser_)
        this->Part2 (this->Part2_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "Part3" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Part3_parser_)
        this->Part3 (this->Part3_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "Part4" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Part4_parser_)
        this->Part4 (this->Part4_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "DistrictLot" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->DistrictLot_parser_)
        this->DistrictLot (this->DistrictLot_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "LegalSubdivision" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->LegalSubdivision_parser_)
        this->LegalSubdivision (this->LegalSubdivision_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "Section" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Section_parser_)
        this->Section (this->Section_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "Township" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Township_parser_)
        this->Township (this->Township_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "Range" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Range_parser_)
        this->Range (this->Range_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "Meridian" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Meridian_parser_)
        this->Meridian (this->Meridian_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "MeridianShort" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->MeridianShort_parser_)
        this->MeridianShort (this->MeridianShort_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "BCAGroup" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->BCAGroup_parser_)
        this->BCAGroup (this->BCAGroup_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "LandDistrict" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->LandDistrict_parser_)
        this->LandDistrict (this->LandDistrict_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "LandDistrictDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->LandDistrictDescription_parser_)
        this->LandDistrictDescription (this->LandDistrictDescription_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "Portion" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Portion_parser_)
        this->Portion (this->Portion_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "ExceptPlan" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ExceptPlan_parser_)
        this->ExceptPlan (this->ExceptPlan_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "FirstNationReserveNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->FirstNationReserveNumber_parser_)
        this->FirstNationReserveNumber (this->FirstNationReserveNumber_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "FirstNationReserveDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->FirstNationReserveDescription_parser_)
        this->FirstNationReserveDescription (this->FirstNationReserveDescription_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "LeaseLicenceNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->LeaseLicenceNumber_parser_)
        this->LeaseLicenceNumber (this->LeaseLicenceNumber_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "LandBranchFileNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->LandBranchFileNumber_parser_)
        this->LandBranchFileNumber (this->LandBranchFileNumber_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "AirSpaceParcelNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->AirSpaceParcelNumber_parser_)
        this->AirSpaceParcelNumber (this->AirSpaceParcelNumber_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "NtsLocation" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->NtsLocation_parser_)
        this->NtsLocation (this->NtsLocation_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "LegalText" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->LegalText_parser_)
        this->LegalText (this->LegalText_parser_->post_FolioString1024Item ());

      return true;
    }

    return false;
  }

  bool LegalDescription_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_attribute_impl (ns, n, v))
      return true;

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();
        this->ID_parser_->_pre_impl ();
        this->ID_parser_->_characters (v);
        this->ID_parser_->_post_impl ();
        this->ID (this->ID_parser_->post_UniqueID ());
      }

      return true;
    }

    return false;
  }

  // LandCharacteristic_pskel
  //

  void LandCharacteristic_pskel::
  LandCharacteristicCode (const model::StringItem&)
  {
  }

  void LandCharacteristic_pskel::
  LandCharacteristicDescription (const model::StringItem&)
  {
  }

  bool LandCharacteristic_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "LandCharacteristicCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->LandCharacteristicCode_parser_;

      if (this->LandCharacteristicCode_parser_)
        this->LandCharacteristicCode_parser_->pre ();

      return true;
    }

    if (n == "LandCharacteristicDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->LandCharacteristicDescription_parser_;

      if (this->LandCharacteristicDescription_parser_)
        this->LandCharacteristicDescription_parser_->pre ();

      return true;
    }

    return false;
  }

  bool LandCharacteristic_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "LandCharacteristicCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->LandCharacteristicCode_parser_)
        this->LandCharacteristicCode (this->LandCharacteristicCode_parser_->post_FolioLookupCodeItem ());

      return true;
    }

    if (n == "LandCharacteristicDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->LandCharacteristicDescription_parser_)
        this->LandCharacteristicDescription (this->LandCharacteristicDescription_parser_->post_FolioString255Item ());

      return true;
    }

    return false;
  }

  // LandCharacteristicCollection_pskel
  //

  void LandCharacteristicCollection_pskel::
  LandCharacteristic (std::unique_ptr<model::LandCharacteristic>&)
  {
  }

  bool LandCharacteristicCollection_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "LandCharacteristic" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->LandCharacteristic_parser_;

      if (this->LandCharacteristic_parser_)
        this->LandCharacteristic_parser_->pre ();

      return true;
    }

    return false;
  }

  bool LandCharacteristicCollection_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "LandCharacteristic" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->LandCharacteristic_parser_)
        this->LandCharacteristic (this->LandCharacteristic_parser_->post_LandCharacteristic ());

      return true;
    }

    return false;
  }

  // ManufacturedHomeCollection_pskel
  //

  void ManufacturedHomeCollection_pskel::
  ManufacturedHome (std::unique_ptr<model::ManufacturedHome>&)
  {
  }

  bool ManufacturedHomeCollection_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "ManufacturedHome" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ManufacturedHome_parser_;

      if (this->ManufacturedHome_parser_)
        this->ManufacturedHome_parser_->pre ();

      return true;
    }

    return false;
  }

  bool ManufacturedHomeCollection_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "ManufacturedHome" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ManufacturedHome_parser_)
        this->ManufacturedHome (this->ManufacturedHome_parser_->post_ManufacturedHome ());

      return true;
    }

    return false;
  }

  // ManufacturedHome_pskel
  //

  void ManufacturedHome_pskel::
  MHRegistryNumber (const model::StringItem&)
  {
  }

  void ManufacturedHome_pskel::
  MHBayNumber (const model::StringItem&)
  {
  }

  void ManufacturedHome_pskel::
  MHPark (const model::StringItem&)
  {
  }

  void ManufacturedHome_pskel::
  MHParkRollNumber (const model::StringItem&)
  {
  }

  void ManufacturedHome_pskel::
  ID (const QString&)
  {
  }

  bool ManufacturedHome_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "MHRegistryNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->MHRegistryNumber_parser_;

      if (this->MHRegistryNumber_parser_)
        this->MHRegistryNumber_parser_->pre ();

      return true;
    }

    if (n == "MHBayNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->MHBayNumber_parser_;

      if (this->MHBayNumber_parser_)
        this->MHBayNumber_parser_->pre ();

      return true;
    }

    if (n == "MHPark" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->MHPark_parser_;

      if (this->MHPark_parser_)
        this->MHPark_parser_->pre ();

      return true;
    }

    if (n == "MHParkRollNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->MHParkRollNumber_parser_;

      if (this->MHParkRollNumber_parser_)
        this->MHParkRollNumber_parser_->pre ();

      return true;
    }

    return false;
  }

  bool ManufacturedHome_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "MHRegistryNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->MHRegistryNumber_parser_)
        this->MHRegistryNumber (this->MHRegistryNumber_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "MHBayNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->MHBayNumber_parser_)
        this->MHBayNumber (this->MHBayNumber_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "MHPark" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->MHPark_parser_)
        this->MHPark (this->MHPark_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "MHParkRollNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->MHParkRollNumber_parser_)
        this->MHParkRollNumber (this->MHParkRollNumber_parser_->post_FolioString255Item ());

      return true;
    }

    return false;
  }

  bool ManufacturedHome_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_attribute_impl (ns, n, v))
      return true;

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();
        this->ID_parser_->_pre_impl ();
        this->ID_parser_->_characters (v);
        this->ID_parser_->_post_impl ();
        this->ID (this->ID_parser_->post_UniqueID ());
      }

      return true;
    }

    return false;
  }

  // FarmCollection_pskel
  //

  void FarmCollection_pskel::
  Farm (std::unique_ptr<model::Farm>&)
  {
  }

  bool FarmCollection_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "Farm" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Farm_parser_;

      if (this->Farm_parser_)
        this->Farm_parser_->pre ();

      return true;
    }

    return false;
  }

  bool FarmCollection_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "Farm" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Farm_parser_)
        this->Farm (this->Farm_parser_->post_Farm ());

      return true;
    }

    return false;
  }

  // Farm_pskel
  //

  void Farm_pskel::
  FarmNumber (const model::StringItem&)
  {
  }

  void Farm_pskel::
  ID (const QString&)
  {
  }

  bool Farm_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "FarmNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FarmNumber_parser_;

      if (this->FarmNumber_parser_)
        this->FarmNumber_parser_->pre ();

      return true;
    }

    return false;
  }

  bool Farm_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "FarmNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->FarmNumber_parser_)
        this->FarmNumber (this->FarmNumber_parser_->post_FolioString255Item ());

      return true;
    }

    return false;
  }

  bool Farm_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_attribute_impl (ns, n, v))
      return true;

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();
        this->ID_parser_->_pre_impl ();
        this->ID_parser_->_characters (v);
        this->ID_parser_->_post_impl ();
        this->ID (this->ID_parser_->post_UniqueID ());
      }

      return true;
    }

    return false;
  }

  // OilAndGasCollection_pskel
  //

  void OilAndGasCollection_pskel::
  OilAndGas (std::unique_ptr<model::OilAndGas>&)
  {
  }

  bool OilAndGasCollection_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "OilAndGas" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->OilAndGas_parser_;

      if (this->OilAndGas_parser_)
        this->OilAndGas_parser_->pre ();

      return true;
    }

    return false;
  }

  bool OilAndGasCollection_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "OilAndGas" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->OilAndGas_parser_)
        this->OilAndGas (this->OilAndGas_parser_->post_OilAndGas ());

      return true;
    }

    return false;
  }

  // OilAndGas_pskel
  //

  void OilAndGas_pskel::
  PipelineProjectNumber (const model::StringItem&)
  {
  }

  void OilAndGas_pskel::
  ID (const QString&)
  {
  }

  bool OilAndGas_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "PipelineProjectNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->PipelineProjectNumber_parser_;

      if (this->PipelineProjectNumber_parser_)
        this->PipelineProjectNumber_parser_->pre ();

      return true;
    }

    return false;
  }

  bool OilAndGas_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "PipelineProjectNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->PipelineProjectNumber_parser_)
        this->PipelineProjectNumber (this->PipelineProjectNumber_parser_->post_FolioString255Item ());

      return true;
    }

    return false;
  }

  bool OilAndGas_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_attribute_impl (ns, n, v))
      return true;

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();
        this->ID_parser_->_pre_impl ();
        this->ID_parser_->_characters (v);
        this->ID_parser_->_post_impl ();
        this->ID (this->ID_parser_->post_UniqueID ());
      }

      return true;
    }

    return false;
  }

  // ManagedForestCollection_pskel
  //

  void ManagedForestCollection_pskel::
  ManagedForest (std::unique_ptr<model::ManagedForest>&)
  {
  }

  bool ManagedForestCollection_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "ManagedForest" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ManagedForest_parser_;

      if (this->ManagedForest_parser_)
        this->ManagedForest_parser_->pre ();

      return true;
    }

    return false;
  }

  bool ManagedForestCollection_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "ManagedForest" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ManagedForest_parser_)
        this->ManagedForest (this->ManagedForest_parser_->post_ManagedForest ());

      return true;
    }

    return false;
  }

  // ManagedForest_pskel
  //

  void ManagedForest_pskel::
  ManagedForestNumber (const model::StringItem&)
  {
  }

  void ManagedForest_pskel::
  ID (const QString&)
  {
  }

  bool ManagedForest_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "ManagedForestNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ManagedForestNumber_parser_;

      if (this->ManagedForestNumber_parser_)
        this->ManagedForestNumber_parser_->pre ();

      return true;
    }

    return false;
  }

  bool ManagedForest_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "ManagedForestNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ManagedForestNumber_parser_)
        this->ManagedForestNumber (this->ManagedForestNumber_parser_->post_FolioString255Item ());

      return true;
    }

    return false;
  }

  bool ManagedForest_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_attribute_impl (ns, n, v))
      return true;

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();
        this->ID_parser_->_pre_impl ();
        this->ID_parser_->_characters (v);
        this->ID_parser_->_post_impl ();
        this->ID (this->ID_parser_->post_UniqueID ());
      }

      return true;
    }

    return false;
  }

  // FolioAmendmentCollection_pskel
  //

  void FolioAmendmentCollection_pskel::
  Amendment ()
  {
  }

  void FolioAmendmentCollection_pskel::
  post_FolioAmendmentCollection ()
  {
  }

  bool FolioAmendmentCollection_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "Amendment" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Amendment_parser_;

      if (this->Amendment_parser_)
        this->Amendment_parser_->pre ();

      return true;
    }

    return false;
  }

  bool FolioAmendmentCollection_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "Amendment" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Amendment_parser_)
      {
        this->Amendment_parser_->post_FolioAmendment ();
        this->Amendment ();
      }

      return true;
    }

    return false;
  }

  // FolioAmendment_pskel
  //

  void FolioAmendment_pskel::
  AmendmentType (const model::StringItem&)
  {
  }

  void FolioAmendment_pskel::
  AmendmentTypeDescription (const model::StringItem&)
  {
  }

  void FolioAmendment_pskel::
  AmendmentReasonCode (const model::StringItem&)
  {
  }

  void FolioAmendment_pskel::
  AmendmentReasonDescription (const model::StringItem&)
  {
  }

  void FolioAmendment_pskel::
  SuppOccupancyDate (const model::DateItem&)
  {
  }

  void FolioAmendment_pskel::
  SuppOccupancyCode (const model::StringItem&)
  {
  }

  void FolioAmendment_pskel::
  ID (const QString&)
  {
  }

  void FolioAmendment_pskel::
  post_FolioAmendment ()
  {
  }

  bool FolioAmendment_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "AmendmentType" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->AmendmentType_parser_;

      if (this->AmendmentType_parser_)
        this->AmendmentType_parser_->pre ();

      return true;
    }

    if (n == "AmendmentTypeDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->AmendmentTypeDescription_parser_;

      if (this->AmendmentTypeDescription_parser_)
        this->AmendmentTypeDescription_parser_->pre ();

      return true;
    }

    if (n == "AmendmentReasonCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->AmendmentReasonCode_parser_;

      if (this->AmendmentReasonCode_parser_)
        this->AmendmentReasonCode_parser_->pre ();

      return true;
    }

    if (n == "AmendmentReasonDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->AmendmentReasonDescription_parser_;

      if (this->AmendmentReasonDescription_parser_)
        this->AmendmentReasonDescription_parser_->pre ();

      return true;
    }

    if (n == "SuppOccupancyDate" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->SuppOccupancyDate_parser_;

      if (this->SuppOccupancyDate_parser_)
        this->SuppOccupancyDate_parser_->pre ();

      return true;
    }

    if (n == "SuppOccupancyCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->SuppOccupancyCode_parser_;

      if (this->SuppOccupancyCode_parser_)
        this->SuppOccupancyCode_parser_->pre ();

      return true;
    }

    return false;
  }

  bool FolioAmendment_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "AmendmentType" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->AmendmentType_parser_)
        this->AmendmentType (this->AmendmentType_parser_->post_FolioLookupCodeItem ());

      return true;
    }

    if (n == "AmendmentTypeDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->AmendmentTypeDescription_parser_)
        this->AmendmentTypeDescription (this->AmendmentTypeDescription_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "AmendmentReasonCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->AmendmentReasonCode_parser_)
        this->AmendmentReasonCode (this->AmendmentReasonCode_parser_->post_FolioLookupCodeItem ());

      return true;
    }

    if (n == "AmendmentReasonDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->AmendmentReasonDescription_parser_)
        this->AmendmentReasonDescription (this->AmendmentReasonDescription_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "SuppOccupancyDate" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->SuppOccupancyDate_parser_)
        this->SuppOccupancyDate (this->SuppOccupancyDate_parser_->post_FolioDateItem ());

      return true;
    }

    if (n == "SuppOccupancyCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->SuppOccupancyCode_parser_)
        this->SuppOccupancyCode (this->SuppOccupancyCode_parser_->post_FolioString1Item ());

      return true;
    }

    return false;
  }

  bool FolioAmendment_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_attribute_impl (ns, n, v))
      return true;

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();
        this->ID_parser_->_pre_impl ();
        this->ID_parser_->_characters (v);
        this->ID_parser_->_post_impl ();
        this->ID (this->ID_parser_->post_UniqueID ());
      }

      return true;
    }

    return false;
  }

  // SaleCollection_pskel
  //

  void SaleCollection_pskel::
  Sale (std::unique_ptr<model::Sale>&)
  {
  }

  bool SaleCollection_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "Sale" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Sale_parser_;

      if (this->Sale_parser_)
        this->Sale_parser_->pre ();

      return true;
    }

    return false;
  }

  bool SaleCollection_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "Sale" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Sale_parser_)
        this->Sale (this->Sale_parser_->post_Sale ());

      return true;
    }

    return false;
  }

  // Sale_pskel
  //

  void Sale_pskel::
  DocumentNumber (const model::StringItem&)
  {
  }

  void Sale_pskel::
  ConveyanceDate (const model::DateItem&)
  {
  }

  void Sale_pskel::
  ConveyancePrice (const model::DecimalItem&)
  {
  }

  void Sale_pskel::
  ConveyanceType (const model::StringItem&)
  {
  }

  void Sale_pskel::
  ConveyanceTypeDescription (const model::StringItem&)
  {
  }

  void Sale_pskel::
  RejectReasonCode (const model::StringItem&)
  {
  }

  void Sale_pskel::
  RejectReasonDescription (const model::StringItem&)
  {
  }

  void Sale_pskel::
  ID (const QString&)
  {
  }

  bool Sale_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "DocumentNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->DocumentNumber_parser_;

      if (this->DocumentNumber_parser_)
        this->DocumentNumber_parser_->pre ();

      return true;
    }

    if (n == "ConveyanceDate" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ConveyanceDate_parser_;

      if (this->ConveyanceDate_parser_)
        this->ConveyanceDate_parser_->pre ();

      return true;
    }

    if (n == "ConveyancePrice" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ConveyancePrice_parser_;

      if (this->ConveyancePrice_parser_)
        this->ConveyancePrice_parser_->pre ();

      return true;
    }

    if (n == "ConveyanceType" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ConveyanceType_parser_;

      if (this->ConveyanceType_parser_)
        this->ConveyanceType_parser_->pre ();

      return true;
    }

    if (n == "ConveyanceTypeDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ConveyanceTypeDescription_parser_;

      if (this->ConveyanceTypeDescription_parser_)
        this->ConveyanceTypeDescription_parser_->pre ();

      return true;
    }

    if (n == "RejectReasonCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->RejectReasonCode_parser_;

      if (this->RejectReasonCode_parser_)
        this->RejectReasonCode_parser_->pre ();

      return true;
    }

    if (n == "RejectReasonDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->RejectReasonDescription_parser_;

      if (this->RejectReasonDescription_parser_)
        this->RejectReasonDescription_parser_->pre ();

      return true;
    }

    return false;
  }

  bool Sale_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "DocumentNumber" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->DocumentNumber_parser_)
        this->DocumentNumber (this->DocumentNumber_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "ConveyanceDate" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ConveyanceDate_parser_)
        this->ConveyanceDate (this->ConveyanceDate_parser_->post_FolioDateItem ());

      return true;
    }

    if (n == "ConveyancePrice" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ConveyancePrice_parser_)
        this->ConveyancePrice (this->ConveyancePrice_parser_->post_FolioDecimalItem ());

      return true;
    }

    if (n == "ConveyanceType" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ConveyanceType_parser_)
        this->ConveyanceType (this->ConveyanceType_parser_->post_FolioLookupCodeItem ());

      return true;
    }

    if (n == "ConveyanceTypeDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ConveyanceTypeDescription_parser_)
        this->ConveyanceTypeDescription (this->ConveyanceTypeDescription_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "RejectReasonCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->RejectReasonCode_parser_)
        this->RejectReasonCode (this->RejectReasonCode_parser_->post_FolioLookupCodeItem ());

      return true;
    }

    if (n == "RejectReasonDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->RejectReasonDescription_parser_)
        this->RejectReasonDescription (this->RejectReasonDescription_parser_->post_FolioString255Item ());

      return true;
    }

    return false;
  }

  bool Sale_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_attribute_impl (ns, n, v))
      return true;

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();
        this->ID_parser_->_pre_impl ();
        this->ID_parser_->_characters (v);
        this->ID_parser_->_post_impl ();
        this->ID (this->ID_parser_->post_UniqueID ());
      }

      return true;
    }

    return false;
  }

  // FolioDescription_pskel
  //

  void FolioDescription_pskel::
  Neighbourhood (std::unique_ptr<model::Neighbourhood>&)
  {
  }

  void FolioDescription_pskel::
  ActualUseCode (const model::StringItem&)
  {
  }

  void FolioDescription_pskel::
  ActualUseDescription (const model::StringItem&)
  {
  }

  void FolioDescription_pskel::
  VacantFlag (const model::BooleanItem&)
  {
  }

  void FolioDescription_pskel::
  BCTransitFlag (const model::BooleanItem&)
  {
  }

  void FolioDescription_pskel::
  PoliceTaxFlag (const model::BooleanItem&)
  {
  }

  void FolioDescription_pskel::
  ALRCode (const model::StringItem&)
  {
  }

  void FolioDescription_pskel::
  ALRDescription (const model::StringItem&)
  {
  }

  void FolioDescription_pskel::
  TenureCode (const model::StringItem&)
  {
  }

  void FolioDescription_pskel::
  TenureDescription (const model::StringItem&)
  {
  }

  void FolioDescription_pskel::
  ParkingArea (const model::StringItem&)
  {
  }

  void FolioDescription_pskel::
  LandMeasurement (std::unique_ptr<model::LandMeasurement>&)
  {
  }

  void FolioDescription_pskel::
  SchoolDistrict (std::unique_ptr<model::SpecialDistrict>&)
  {
  }

  void FolioDescription_pskel::
  RegionalDistrict (std::unique_ptr<model::SpecialDistrict>&)
  {
  }

  void FolioDescription_pskel::
  RegionalHospitalDistrict (std::unique_ptr<model::SpecialDistrict>&)
  {
  }

  void FolioDescription_pskel::
  PredominantManualClass (std::unique_ptr<model::ManualClass>&)
  {
  }

  bool FolioDescription_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "Neighbourhood" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Neighbourhood_parser_;

      if (this->Neighbourhood_parser_)
        this->Neighbourhood_parser_->pre ();

      return true;
    }

    if (n == "ActualUseCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ActualUseCode_parser_;

      if (this->ActualUseCode_parser_)
        this->ActualUseCode_parser_->pre ();

      return true;
    }

    if (n == "ActualUseDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ActualUseDescription_parser_;

      if (this->ActualUseDescription_parser_)
        this->ActualUseDescription_parser_->pre ();

      return true;
    }

    if (n == "VacantFlag" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->VacantFlag_parser_;

      if (this->VacantFlag_parser_)
        this->VacantFlag_parser_->pre ();

      return true;
    }

    if (n == "BCTransitFlag" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->BCTransitFlag_parser_;

      if (this->BCTransitFlag_parser_)
        this->BCTransitFlag_parser_->pre ();

      return true;
    }

    if (n == "PoliceTaxFlag" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->PoliceTaxFlag_parser_;

      if (this->PoliceTaxFlag_parser_)
        this->PoliceTaxFlag_parser_->pre ();

      return true;
    }

    if (n == "ALRCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ALRCode_parser_;

      if (this->ALRCode_parser_)
        this->ALRCode_parser_->pre ();

      return true;
    }

    if (n == "ALRDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ALRDescription_parser_;

      if (this->ALRDescription_parser_)
        this->ALRDescription_parser_->pre ();

      return true;
    }

    if (n == "TenureCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->TenureCode_parser_;

      if (this->TenureCode_parser_)
        this->TenureCode_parser_->pre ();

      return true;
    }

    if (n == "TenureDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->TenureDescription_parser_;

      if (this->TenureDescription_parser_)
        this->TenureDescription_parser_->pre ();

      return true;
    }

    if (n == "ParkingArea" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ParkingArea_parser_;

      if (this->ParkingArea_parser_)
        this->ParkingArea_parser_->pre ();

      return true;
    }

    if (n == "LandMeasurement" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->LandMeasurement_parser_;

      if (this->LandMeasurement_parser_)
        this->LandMeasurement_parser_->pre ();

      return true;
    }

    if (n == "SchoolDistrict" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->SchoolDistrict_parser_;

      if (this->SchoolDistrict_parser_)
        this->SchoolDistrict_parser_->pre ();

      return true;
    }

    if (n == "RegionalDistrict" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->RegionalDistrict_parser_;

      if (this->RegionalDistrict_parser_)
        this->RegionalDistrict_parser_->pre ();

      return true;
    }

    if (n == "RegionalHospitalDistrict" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->RegionalHospitalDistrict_parser_;

      if (this->RegionalHospitalDistrict_parser_)
        this->RegionalHospitalDistrict_parser_->pre ();

      return true;
    }

    if (n == "PredominantManualClass" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->PredominantManualClass_parser_;

      if (this->PredominantManualClass_parser_)
        this->PredominantManualClass_parser_->pre ();

      return true;
    }

    return false;
  }

  bool FolioDescription_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "Neighbourhood" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Neighbourhood_parser_)
        this->Neighbourhood (this->Neighbourhood_parser_->post_Neighbourhood ());

      return true;
    }

    if (n == "ActualUseCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ActualUseCode_parser_)
        this->ActualUseCode (this->ActualUseCode_parser_->post_FolioLookupCodeItem ());

      return true;
    }

    if (n == "ActualUseDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ActualUseDescription_parser_)
        this->ActualUseDescription (this->ActualUseDescription_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "VacantFlag" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->VacantFlag_parser_)
        this->VacantFlag (this->VacantFlag_parser_->post_FolioBooleanItem ());

      return true;
    }

    if (n == "BCTransitFlag" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->BCTransitFlag_parser_)
        this->BCTransitFlag (this->BCTransitFlag_parser_->post_FolioBooleanItem ());

      return true;
    }

    if (n == "PoliceTaxFlag" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->PoliceTaxFlag_parser_)
        this->PoliceTaxFlag (this->PoliceTaxFlag_parser_->post_FolioBooleanItem ());

      return true;
    }

    if (n == "ALRCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ALRCode_parser_)
        this->ALRCode (this->ALRCode_parser_->post_FolioLookupCodeItem ());

      return true;
    }

    if (n == "ALRDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ALRDescription_parser_)
        this->ALRDescription (this->ALRDescription_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "TenureCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->TenureCode_parser_)
        this->TenureCode (this->TenureCode_parser_->post_FolioLookupCodeItem ());

      return true;
    }

    if (n == "TenureDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->TenureDescription_parser_)
        this->TenureDescription (this->TenureDescription_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "ParkingArea" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ParkingArea_parser_)
        this->ParkingArea (this->ParkingArea_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "LandMeasurement" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->LandMeasurement_parser_)
        this->LandMeasurement (this->LandMeasurement_parser_->post_LandMeasurement ());

      return true;
    }

    if (n == "SchoolDistrict" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->SchoolDistrict_parser_)
        this->SchoolDistrict (this->SchoolDistrict_parser_->post_SpecialDistrict ());

      return true;
    }

    if (n == "RegionalDistrict" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->RegionalDistrict_parser_)
        this->RegionalDistrict (this->RegionalDistrict_parser_->post_SpecialDistrict ());

      return true;
    }

    if (n == "RegionalHospitalDistrict" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->RegionalHospitalDistrict_parser_)
        this->RegionalHospitalDistrict (this->RegionalHospitalDistrict_parser_->post_SpecialDistrict ());

      return true;
    }

    if (n == "PredominantManualClass" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->PredominantManualClass_parser_)
        this->PredominantManualClass (this->PredominantManualClass_parser_->post_ManualClass ());

      return true;
    }

    return false;
  }

  // LandMeasurement_pskel
  //

  void LandMeasurement_pskel::
  LandDimensionType (const model::StringItem&)
  {
  }

  void LandMeasurement_pskel::
  LandDimensionTypeDescription (const model::StringItem&)
  {
  }

  void LandMeasurement_pskel::
  LandDimension (const model::StringItem&)
  {
  }

  void LandMeasurement_pskel::
  LandWidth (const model::StringItem&)
  {
  }

  void LandMeasurement_pskel::
  LandDepth (const model::StringItem&)
  {
  }

  bool LandMeasurement_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "LandDimensionType" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->LandDimensionType_parser_;

      if (this->LandDimensionType_parser_)
        this->LandDimensionType_parser_->pre ();

      return true;
    }

    if (n == "LandDimensionTypeDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->LandDimensionTypeDescription_parser_;

      if (this->LandDimensionTypeDescription_parser_)
        this->LandDimensionTypeDescription_parser_->pre ();

      return true;
    }

    if (n == "LandDimension" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->LandDimension_parser_;

      if (this->LandDimension_parser_)
        this->LandDimension_parser_->pre ();

      return true;
    }

    if (n == "LandWidth" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->LandWidth_parser_;

      if (this->LandWidth_parser_)
        this->LandWidth_parser_->pre ();

      return true;
    }

    if (n == "LandDepth" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->LandDepth_parser_;

      if (this->LandDepth_parser_)
        this->LandDepth_parser_->pre ();

      return true;
    }

    return false;
  }

  bool LandMeasurement_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "LandDimensionType" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->LandDimensionType_parser_)
        this->LandDimensionType (this->LandDimensionType_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "LandDimensionTypeDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->LandDimensionTypeDescription_parser_)
        this->LandDimensionTypeDescription (this->LandDimensionTypeDescription_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "LandDimension" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->LandDimension_parser_)
        this->LandDimension (this->LandDimension_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "LandWidth" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->LandWidth_parser_)
        this->LandWidth (this->LandWidth_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "LandDepth" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->LandDepth_parser_)
        this->LandDepth (this->LandDepth_parser_->post_FolioString255Item ());

      return true;
    }

    return false;
  }

  // Neighbourhood_pskel
  //

  void Neighbourhood_pskel::
  NeighbourhoodCode (const model::StringItem&)
  {
  }

  void Neighbourhood_pskel::
  NeighbourhoodDescription (const model::StringItem&)
  {
  }

  bool Neighbourhood_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "NeighbourhoodCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->NeighbourhoodCode_parser_;

      if (this->NeighbourhoodCode_parser_)
        this->NeighbourhoodCode_parser_->pre ();

      return true;
    }

    if (n == "NeighbourhoodDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->NeighbourhoodDescription_parser_;

      if (this->NeighbourhoodDescription_parser_)
        this->NeighbourhoodDescription_parser_->pre ();

      return true;
    }

    return false;
  }

  bool Neighbourhood_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "NeighbourhoodCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->NeighbourhoodCode_parser_)
        this->NeighbourhoodCode (this->NeighbourhoodCode_parser_->post_FolioLookupCodeItem ());

      return true;
    }

    if (n == "NeighbourhoodDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->NeighbourhoodDescription_parser_)
        this->NeighbourhoodDescription (this->NeighbourhoodDescription_parser_->post_FolioString255Item ());

      return true;
    }

    return false;
  }

  // SpecialDistrict_pskel
  //

  void SpecialDistrict_pskel::
  DistrictCode (const model::StringItem&)
  {
  }

  void SpecialDistrict_pskel::
  DistrictDescription (const model::StringItem&)
  {
  }

  bool SpecialDistrict_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "DistrictCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->DistrictCode_parser_;

      if (this->DistrictCode_parser_)
        this->DistrictCode_parser_->pre ();

      return true;
    }

    if (n == "DistrictDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->DistrictDescription_parser_;

      if (this->DistrictDescription_parser_)
        this->DistrictDescription_parser_->pre ();

      return true;
    }

    return false;
  }

  bool SpecialDistrict_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "DistrictCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->DistrictCode_parser_)
        this->DistrictCode (this->DistrictCode_parser_->post_FolioLookupCodeItem ());

      return true;
    }

    if (n == "DistrictDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->DistrictDescription_parser_)
        this->DistrictDescription (this->DistrictDescription_parser_->post_FolioString255Item ());

      return true;
    }

    return false;
  }

  // ManualClass_pskel
  //

  void ManualClass_pskel::
  ManualClassCode (const model::StringItem&)
  {
  }

  void ManualClass_pskel::
  ManualClassDescription (const model::StringItem&)
  {
  }

  void ManualClass_pskel::
  PercentDeviation (const model::DecimalItem&)
  {
  }

  bool ManualClass_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "ManualClassCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ManualClassCode_parser_;

      if (this->ManualClassCode_parser_)
        this->ManualClassCode_parser_->pre ();

      return true;
    }

    if (n == "ManualClassDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ManualClassDescription_parser_;

      if (this->ManualClassDescription_parser_)
        this->ManualClassDescription_parser_->pre ();

      return true;
    }

    if (n == "PercentDeviation" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->PercentDeviation_parser_;

      if (this->PercentDeviation_parser_)
        this->PercentDeviation_parser_->pre ();

      return true;
    }

    return false;
  }

  bool ManualClass_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "ManualClassCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ManualClassCode_parser_)
        this->ManualClassCode (this->ManualClassCode_parser_->post_FolioLookupCodeItem ());

      return true;
    }

    if (n == "ManualClassDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ManualClassDescription_parser_)
        this->ManualClassDescription (this->ManualClassDescription_parser_->post_FolioString255Item ());

      return true;
    }

    if (n == "PercentDeviation" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->PercentDeviation_parser_)
        this->PercentDeviation (this->PercentDeviation_parser_->post_FolioDecimalItem ());

      return true;
    }

    return false;
  }

  // MinorTaxing_pskel
  //

  void MinorTaxing_pskel::
  ElectoralAreas (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&)
  {
  }

  void MinorTaxing_pskel::
  ServiceAreas (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&)
  {
  }

  void MinorTaxing_pskel::
  Defined (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&)
  {
  }

  void MinorTaxing_pskel::
  SpecifiedRegional (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&)
  {
  }

  void MinorTaxing_pskel::
  SpecifiedMunicipal (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&)
  {
  }

  void MinorTaxing_pskel::
  LocalAreas (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&)
  {
  }

  void MinorTaxing_pskel::
  GeneralServices (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&)
  {
  }

  void MinorTaxing_pskel::
  ImprovementDistricts (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&)
  {
  }

  void MinorTaxing_pskel::
  IslandsTrusts (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&)
  {
  }

  bool MinorTaxing_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "ElectoralAreas" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ElectoralAreas_parser_;

      if (this->ElectoralAreas_parser_)
        this->ElectoralAreas_parser_->pre ();

      return true;
    }

    if (n == "ServiceAreas" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ServiceAreas_parser_;

      if (this->ServiceAreas_parser_)
        this->ServiceAreas_parser_->pre ();

      return true;
    }

    if (n == "Defined" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Defined_parser_;

      if (this->Defined_parser_)
        this->Defined_parser_->pre ();

      return true;
    }

    if (n == "SpecifiedRegional" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->SpecifiedRegional_parser_;

      if (this->SpecifiedRegional_parser_)
        this->SpecifiedRegional_parser_->pre ();

      return true;
    }

    if (n == "SpecifiedMunicipal" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->SpecifiedMunicipal_parser_;

      if (this->SpecifiedMunicipal_parser_)
        this->SpecifiedMunicipal_parser_->pre ();

      return true;
    }

    if (n == "LocalAreas" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->LocalAreas_parser_;

      if (this->LocalAreas_parser_)
        this->LocalAreas_parser_->pre ();

      return true;
    }

    if (n == "GeneralServices" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->GeneralServices_parser_;

      if (this->GeneralServices_parser_)
        this->GeneralServices_parser_->pre ();

      return true;
    }

    if (n == "ImprovementDistricts" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ImprovementDistricts_parser_;

      if (this->ImprovementDistricts_parser_)
        this->ImprovementDistricts_parser_->pre ();

      return true;
    }

    if (n == "IslandsTrusts" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->IslandsTrusts_parser_;

      if (this->IslandsTrusts_parser_)
        this->IslandsTrusts_parser_->pre ();

      return true;
    }

    return false;
  }

  bool MinorTaxing_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "ElectoralAreas" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ElectoralAreas_parser_)
        this->ElectoralAreas (this->ElectoralAreas_parser_->post_MinorTaxingJurisdictionCollection ());

      return true;
    }

    if (n == "ServiceAreas" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ServiceAreas_parser_)
        this->ServiceAreas (this->ServiceAreas_parser_->post_MinorTaxingJurisdictionCollection ());

      return true;
    }

    if (n == "Defined" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Defined_parser_)
        this->Defined (this->Defined_parser_->post_MinorTaxingJurisdictionCollection ());

      return true;
    }

    if (n == "SpecifiedRegional" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->SpecifiedRegional_parser_)
        this->SpecifiedRegional (this->SpecifiedRegional_parser_->post_MinorTaxingJurisdictionCollection ());

      return true;
    }

    if (n == "SpecifiedMunicipal" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->SpecifiedMunicipal_parser_)
        this->SpecifiedMunicipal (this->SpecifiedMunicipal_parser_->post_MinorTaxingJurisdictionCollection ());

      return true;
    }

    if (n == "LocalAreas" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->LocalAreas_parser_)
        this->LocalAreas (this->LocalAreas_parser_->post_MinorTaxingJurisdictionCollection ());

      return true;
    }

    if (n == "GeneralServices" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->GeneralServices_parser_)
        this->GeneralServices (this->GeneralServices_parser_->post_MinorTaxingJurisdictionCollection ());

      return true;
    }

    if (n == "ImprovementDistricts" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ImprovementDistricts_parser_)
        this->ImprovementDistricts (this->ImprovementDistricts_parser_->post_MinorTaxingJurisdictionCollection ());

      return true;
    }

    if (n == "IslandsTrusts" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->IslandsTrusts_parser_)
        this->IslandsTrusts (this->IslandsTrusts_parser_->post_MinorTaxingJurisdictionCollection ());

      return true;
    }

    return false;
  }

  // MinorTaxingJurisdictionCollection_pskel
  //

  void MinorTaxingJurisdictionCollection_pskel::
  MinorTaxingJurisdiction (std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>&)
  {
  }

  bool MinorTaxingJurisdictionCollection_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "MinorTaxingJurisdiction" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->MinorTaxingJurisdiction_parser_;

      if (this->MinorTaxingJurisdiction_parser_)
        this->MinorTaxingJurisdiction_parser_->pre ();

      return true;
    }

    return false;
  }

  bool MinorTaxingJurisdictionCollection_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "MinorTaxingJurisdiction" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->MinorTaxingJurisdiction_parser_)
        this->MinorTaxingJurisdiction (this->MinorTaxingJurisdiction_parser_->post_MinorTaxingJurisdiction ());

      return true;
    }

    return false;
  }

  // MinorTaxingJurisdiction_pskel
  //

  void MinorTaxingJurisdiction_pskel::
  MinorTaxingCode (const model::StringItem&)
  {
  }

  void MinorTaxingJurisdiction_pskel::
  MinorTaxingCodeShort (const model::StringItem&)
  {
  }

  void MinorTaxingJurisdiction_pskel::
  MinorTaxingDescription (const model::StringItem&)
  {
  }

  void MinorTaxingJurisdiction_pskel::
  ID (const QString&)
  {
  }

  bool MinorTaxingJurisdiction_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::dataadvice::FolioItemGroup_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "MinorTaxingCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->MinorTaxingCode_parser_;

      if (this->MinorTaxingCode_parser_)
        this->MinorTaxingCode_parser_->pre ();

      return true;
    }

    if (n == "MinorTaxingCodeShort" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->MinorTaxingCodeShort_parser_;

      if (this->MinorTaxingCodeShort_parser_)
        this->MinorTaxingCodeShort_parser_->pre ();

      return true;
    }

    if (n == "MinorTaxingDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->MinorTaxingDescription_parser_;

      if (this->MinorTaxingDescription_parser_)
        this->MinorTaxingDescription_parser_->pre ();

      return true;
    }

    return false;
  }

  bool MinorTaxingJurisdiction_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "MinorTaxingCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->MinorTaxingCode_parser_)
        this->MinorTaxingCode (this->MinorTaxingCode_parser_->post_FolioLookupCodeItem ());

      return true;
    }

    if (n == "MinorTaxingCodeShort" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->MinorTaxingCodeShort_parser_)
        this->MinorTaxingCodeShort (this->MinorTaxingCodeShort_parser_->post_FolioString1Item ());

      return true;
    }

    if (n == "MinorTaxingDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->MinorTaxingDescription_parser_)
        this->MinorTaxingDescription (this->MinorTaxingDescription_parser_->post_FolioString255Item ());

      return true;
    }

    return false;
  }

  bool MinorTaxingJurisdiction_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::dataadvice::FolioItemGroup_pskel::_attribute_impl (ns, n, v))
      return true;

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();
        this->ID_parser_->_pre_impl ();
        this->ID_parser_->_characters (v);
        this->ID_parser_->_post_impl ();
        this->ID (this->ID_parser_->post_UniqueID ());
      }

      return true;
    }

    return false;
  }

  // PropertyValues_pskel
  //

  void PropertyValues_pskel::
  GeneralValues (std::vector<std::unique_ptr<model::PropertyClassValue>>&)
  {
  }

  void PropertyValues_pskel::
  BCTransitValues (std::vector<std::unique_ptr<model::PropertyClassValue>>&)
  {
  }

  void PropertyValues_pskel::
  SchoolValues (std::vector<std::unique_ptr<model::PropertyClassValue>>&)
  {
  }

  void PropertyValues_pskel::
  Valuation (std::vector<std::unique_ptr<model::ValuesByETC>>&)
  {
  }

  bool PropertyValues_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "GeneralValues" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->GeneralValues_parser_;

      if (this->GeneralValues_parser_)
        this->GeneralValues_parser_->pre ();

      return true;
    }

    if (n == "BCTransitValues" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->BCTransitValues_parser_;

      if (this->BCTransitValues_parser_)
        this->BCTransitValues_parser_->pre ();

      return true;
    }

    if (n == "SchoolValues" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->SchoolValues_parser_;

      if (this->SchoolValues_parser_)
        this->SchoolValues_parser_->pre ();

      return true;
    }

    if (n == "Valuation" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Valuation_parser_;

      if (this->Valuation_parser_)
        this->Valuation_parser_->pre ();

      return true;
    }

    return false;
  }

  bool PropertyValues_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "GeneralValues" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->GeneralValues_parser_)
        this->GeneralValues (this->GeneralValues_parser_->post_PropertyClassValuesCollection ());

      return true;
    }

    if (n == "BCTransitValues" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->BCTransitValues_parser_)
        this->BCTransitValues (this->BCTransitValues_parser_->post_PropertyClassValuesCollection ());

      return true;
    }

    if (n == "SchoolValues" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->SchoolValues_parser_)
        this->SchoolValues (this->SchoolValues_parser_->post_PropertyClassValuesCollection ());

      return true;
    }

    if (n == "Valuation" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->Valuation_parser_)
        this->Valuation (this->Valuation_parser_->post_ValuationCollection ());

      return true;
    }

    return false;
  }

  // ValuationCollection_pskel
  //

  void ValuationCollection_pskel::
  ValuesByETC (std::unique_ptr<model::ValuesByETC>&)
  {
  }

  bool ValuationCollection_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "ValuesByETC" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ValuesByETC_parser_;

      if (this->ValuesByETC_parser_)
        this->ValuesByETC_parser_->pre ();

      return true;
    }

    return false;
  }

  bool ValuationCollection_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "ValuesByETC" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ValuesByETC_parser_)
        this->ValuesByETC (this->ValuesByETC_parser_->post_ValuesByETC ());

      return true;
    }

    return false;
  }

  // ValuesByETC_pskel
  //

  void ValuesByETC_pskel::
  TaxExemptCode (const QString&)
  {
  }

  void ValuesByETC_pskel::
  TaxExemptDescription (const QString&)
  {
  }

  void ValuesByETC_pskel::
  PropertyClassCode (const QString&)
  {
  }

  void ValuesByETC_pskel::
  PropertyClassDescription (const QString&)
  {
  }

  void ValuesByETC_pskel::
  LandValue (double)
  {
  }

  void ValuesByETC_pskel::
  ImprovementValue (double)
  {
  }

  bool ValuesByETC_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "TaxExemptCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->TaxExemptCode_parser_;

      if (this->TaxExemptCode_parser_)
        this->TaxExemptCode_parser_->pre ();

      return true;
    }

    if (n == "TaxExemptDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->TaxExemptDescription_parser_;

      if (this->TaxExemptDescription_parser_)
        this->TaxExemptDescription_parser_->pre ();

      return true;
    }

    if (n == "PropertyClassCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->PropertyClassCode_parser_;

      if (this->PropertyClassCode_parser_)
        this->PropertyClassCode_parser_->pre ();

      return true;
    }

    if (n == "PropertyClassDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->PropertyClassDescription_parser_;

      if (this->PropertyClassDescription_parser_)
        this->PropertyClassDescription_parser_->pre ();

      return true;
    }

    if (n == "LandValue" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->LandValue_parser_;

      if (this->LandValue_parser_)
        this->LandValue_parser_->pre ();

      return true;
    }

    if (n == "ImprovementValue" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ImprovementValue_parser_;

      if (this->ImprovementValue_parser_)
        this->ImprovementValue_parser_->pre ();

      return true;
    }

    return false;
  }

  bool ValuesByETC_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "TaxExemptCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->TaxExemptCode_parser_)
        this->TaxExemptCode (this->TaxExemptCode_parser_->post_LookupCode ());

      return true;
    }

    if (n == "TaxExemptDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->TaxExemptDescription_parser_)
        this->TaxExemptDescription (this->TaxExemptDescription_parser_->post_String255 ());

      return true;
    }

    if (n == "PropertyClassCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->PropertyClassCode_parser_)
        this->PropertyClassCode (this->PropertyClassCode_parser_->post_PropertyClassCode ());

      return true;
    }

    if (n == "PropertyClassDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->PropertyClassDescription_parser_)
        this->PropertyClassDescription (this->PropertyClassDescription_parser_->post_String255 ());

      return true;
    }

    if (n == "LandValue" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->LandValue_parser_)
        this->LandValue (this->LandValue_parser_->post_decimal ());

      return true;
    }

    if (n == "ImprovementValue" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ImprovementValue_parser_)
        this->ImprovementValue (this->ImprovementValue_parser_->post_decimal ());

      return true;
    }

    return false;
  }

  // PropertyClassValuesCollection_pskel
  //

  void PropertyClassValuesCollection_pskel::
  PropertyClassValues (std::unique_ptr<model::PropertyClassValue>&)
  {
  }

  bool PropertyClassValuesCollection_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "PropertyClassValues" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->PropertyClassValues_parser_;

      if (this->PropertyClassValues_parser_)
        this->PropertyClassValues_parser_->pre ();

      return true;
    }

    return false;
  }

  bool PropertyClassValuesCollection_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "PropertyClassValues" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->PropertyClassValues_parser_)
        this->PropertyClassValues (this->PropertyClassValues_parser_->post_PropertyClassValues ());

      return true;
    }

    return false;
  }

  // PropertyClassValues_pskel
  //

  void PropertyClassValues_pskel::
  PropertyClassCode (const QString&)
  {
  }

  void PropertyClassValues_pskel::
  PropertyClassDescription (const QString&)
  {
  }

  void PropertyClassValues_pskel::
  PropertySubClassCode (const QString&)
  {
  }

  void PropertyClassValues_pskel::
  PropertySubClassDescription (const QString&)
  {
  }

  void PropertyClassValues_pskel::
  GrossValues (std::unique_ptr<model::Valuation>&)
  {
  }

  void PropertyClassValues_pskel::
  TaxExemptValues (std::unique_ptr<model::Valuation>&)
  {
  }

  void PropertyClassValues_pskel::
  NetValues (std::unique_ptr<model::Valuation>&)
  {
  }

  bool PropertyClassValues_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "PropertyClassCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->PropertyClassCode_parser_;

      if (this->PropertyClassCode_parser_)
        this->PropertyClassCode_parser_->pre ();

      return true;
    }

    if (n == "PropertyClassDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->PropertyClassDescription_parser_;

      if (this->PropertyClassDescription_parser_)
        this->PropertyClassDescription_parser_->pre ();

      return true;
    }

    if (n == "PropertySubClassCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->PropertySubClassCode_parser_;

      if (this->PropertySubClassCode_parser_)
        this->PropertySubClassCode_parser_->pre ();

      return true;
    }

    if (n == "PropertySubClassDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->PropertySubClassDescription_parser_;

      if (this->PropertySubClassDescription_parser_)
        this->PropertySubClassDescription_parser_->pre ();

      return true;
    }

    if (n == "GrossValues" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->GrossValues_parser_;

      if (this->GrossValues_parser_)
        this->GrossValues_parser_->pre ();

      return true;
    }

    if (n == "TaxExemptValues" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->TaxExemptValues_parser_;

      if (this->TaxExemptValues_parser_)
        this->TaxExemptValues_parser_->pre ();

      return true;
    }

    if (n == "NetValues" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->NetValues_parser_;

      if (this->NetValues_parser_)
        this->NetValues_parser_->pre ();

      return true;
    }

    return false;
  }

  bool PropertyClassValues_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "PropertyClassCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->PropertyClassCode_parser_)
        this->PropertyClassCode (this->PropertyClassCode_parser_->post_PropertyClassCode ());

      return true;
    }

    if (n == "PropertyClassDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->PropertyClassDescription_parser_)
        this->PropertyClassDescription (this->PropertyClassDescription_parser_->post_String255 ());

      return true;
    }

    if (n == "PropertySubClassCode" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->PropertySubClassCode_parser_)
        this->PropertySubClassCode (this->PropertySubClassCode_parser_->post_PropertySubClassCode ());

      return true;
    }

    if (n == "PropertySubClassDescription" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->PropertySubClassDescription_parser_)
        this->PropertySubClassDescription (this->PropertySubClassDescription_parser_->post_String255 ());

      return true;
    }

    if (n == "GrossValues" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->GrossValues_parser_)
        this->GrossValues (this->GrossValues_parser_->post_Valuation ());

      return true;
    }

    if (n == "TaxExemptValues" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->TaxExemptValues_parser_)
        this->TaxExemptValues (this->TaxExemptValues_parser_->post_Valuation ());

      return true;
    }

    if (n == "NetValues" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->NetValues_parser_)
        this->NetValues (this->NetValues_parser_->post_Valuation ());

      return true;
    }

    return false;
  }

  // Valuation_pskel
  //

  void Valuation_pskel::
  LandValue (double)
  {
  }

  void Valuation_pskel::
  ImprovementValue (double)
  {
  }

  bool Valuation_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "LandValue" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->LandValue_parser_;

      if (this->LandValue_parser_)
        this->LandValue_parser_->pre ();

      return true;
    }

    if (n == "ImprovementValue" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ImprovementValue_parser_;

      if (this->ImprovementValue_parser_)
        this->ImprovementValue_parser_->pre ();

      return true;
    }

    return false;
  }

  bool Valuation_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "LandValue" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->LandValue_parser_)
        this->LandValue (this->LandValue_parser_->post_decimal ());

      return true;
    }

    if (n == "ImprovementValue" && ns == "http://data.bcassessment.ca/DataAdvice/Formats/DAX/DataAdvice.xsd")
    {
      if (this->ImprovementValue_parser_)
        this->ImprovementValue (this->ImprovementValue_parser_->post_decimal ());

      return true;
    }

    return false;
  }

  // FolioIntegerItem_pskel
  //

  void FolioIntegerItem_pskel::
  Action (const model::ActionCode::Code&)
  {
  }

  void FolioIntegerItem_pskel::
  OldValue (long long)
  {
  }

  bool FolioIntegerItem_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::integer_pskel::_attribute_impl (ns, n, v))
      return true;

    if (n == "Action" && ns.empty ())
    {
      if (this->Action_parser_)
      {
        this->Action_parser_->pre ();
        this->Action_parser_->_pre_impl ();
        this->Action_parser_->_characters (v);
        this->Action_parser_->_post_impl ();
        this->Action (this->Action_parser_->post_ActionCode ());
      }

      return true;
    }

    if (n == "OldValue" && ns.empty ())
    {
      if (this->OldValue_parser_)
      {
        this->OldValue_parser_->pre ();
        this->OldValue_parser_->_pre_impl ();
        this->OldValue_parser_->_characters (v);
        this->OldValue_parser_->_post_impl ();
        this->OldValue (this->OldValue_parser_->post_integer ());
      }

      return true;
    }

    return false;
  }

  // FolioBooleanItem_pskel
  //

  void FolioBooleanItem_pskel::
  Action (const model::ActionCode::Code&)
  {
  }

  void FolioBooleanItem_pskel::
  OldValue (bool)
  {
  }

  bool FolioBooleanItem_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::boolean_pskel::_attribute_impl (ns, n, v))
      return true;

    if (n == "Action" && ns.empty ())
    {
      if (this->Action_parser_)
      {
        this->Action_parser_->pre ();
        this->Action_parser_->_pre_impl ();
        this->Action_parser_->_characters (v);
        this->Action_parser_->_post_impl ();
        this->Action (this->Action_parser_->post_ActionCode ());
      }

      return true;
    }

    if (n == "OldValue" && ns.empty ())
    {
      if (this->OldValue_parser_)
      {
        this->OldValue_parser_->pre ();
        this->OldValue_parser_->_pre_impl ();
        this->OldValue_parser_->_characters (v);
        this->OldValue_parser_->_post_impl ();
        this->OldValue (this->OldValue_parser_->post_boolean ());
      }

      return true;
    }

    return false;
  }

  // FolioDecimalItem_pskel
  //

  void FolioDecimalItem_pskel::
  Action (const model::ActionCode::Code&)
  {
  }

  void FolioDecimalItem_pskel::
  OldValue (double)
  {
  }

  bool FolioDecimalItem_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::decimal_pskel::_attribute_impl (ns, n, v))
      return true;

    if (n == "Action" && ns.empty ())
    {
      if (this->Action_parser_)
      {
        this->Action_parser_->pre ();
        this->Action_parser_->_pre_impl ();
        this->Action_parser_->_characters (v);
        this->Action_parser_->_post_impl ();
        this->Action (this->Action_parser_->post_ActionCode ());
      }

      return true;
    }

    if (n == "OldValue" && ns.empty ())
    {
      if (this->OldValue_parser_)
      {
        this->OldValue_parser_->pre ();
        this->OldValue_parser_->_pre_impl ();
        this->OldValue_parser_->_characters (v);
        this->OldValue_parser_->_post_impl ();
        this->OldValue (this->OldValue_parser_->post_decimal ());
      }

      return true;
    }

    return false;
  }

  // FolioDateItem_pskel
  //

  void FolioDateItem_pskel::
  Action (const model::ActionCode::Code&)
  {
  }

  void FolioDateItem_pskel::
  OldValue (const ::xml_schema::date&)
  {
  }

  bool FolioDateItem_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::date_pskel::_attribute_impl (ns, n, v))
      return true;

    if (n == "Action" && ns.empty ())
    {
      if (this->Action_parser_)
      {
        this->Action_parser_->pre ();
        this->Action_parser_->_pre_impl ();
        this->Action_parser_->_characters (v);
        this->Action_parser_->_post_impl ();
        this->Action (this->Action_parser_->post_ActionCode ());
      }

      return true;
    }

    if (n == "OldValue" && ns.empty ())
    {
      if (this->OldValue_parser_)
      {
        this->OldValue_parser_->pre ();
        this->OldValue_parser_->_pre_impl ();
        this->OldValue_parser_->_characters (v);
        this->OldValue_parser_->_post_impl ();
        this->OldValue (this->OldValue_parser_->post_date ());
      }

      return true;
    }

    return false;
  }

  // FolioUniqueIDItem_pskel
  //

  void FolioUniqueIDItem_pskel::
  Action (const model::ActionCode::Code&)
  {
  }

  void FolioUniqueIDItem_pskel::
  OldValue (const QString&)
  {
  }

  bool FolioUniqueIDItem_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::dataadvice::UniqueID_pskel::_attribute_impl (ns, n, v))
      return true;

    if (n == "Action" && ns.empty ())
    {
      if (this->Action_parser_)
      {
        this->Action_parser_->pre ();
        this->Action_parser_->_pre_impl ();
        this->Action_parser_->_characters (v);
        this->Action_parser_->_post_impl ();
        this->Action (this->Action_parser_->post_ActionCode ());
      }

      return true;
    }

    if (n == "OldValue" && ns.empty ())
    {
      if (this->OldValue_parser_)
      {
        this->OldValue_parser_->pre ();
        this->OldValue_parser_->_pre_impl ();
        this->OldValue_parser_->_characters (v);
        this->OldValue_parser_->_post_impl ();
        this->OldValue (this->OldValue_parser_->post_UniqueID ());
      }

      return true;
    }

    return false;
  }

  // FolioLookupCodeItem_pskel
  //

  void FolioLookupCodeItem_pskel::
  Action (const model::ActionCode::Code&)
  {
  }

  void FolioLookupCodeItem_pskel::
  OldValue (const QString&)
  {
  }

  bool FolioLookupCodeItem_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::dataadvice::LookupCode_pskel::_attribute_impl (ns, n, v))
      return true;

    if (n == "Action" && ns.empty ())
    {
      if (this->Action_parser_)
      {
        this->Action_parser_->pre ();
        this->Action_parser_->_pre_impl ();
        this->Action_parser_->_characters (v);
        this->Action_parser_->_post_impl ();
        this->Action (this->Action_parser_->post_ActionCode ());
      }

      return true;
    }

    if (n == "OldValue" && ns.empty ())
    {
      if (this->OldValue_parser_)
      {
        this->OldValue_parser_->pre ();
        this->OldValue_parser_->_pre_impl ();
        this->OldValue_parser_->_characters (v);
        this->OldValue_parser_->_post_impl ();
        this->OldValue (this->OldValue_parser_->post_LookupCode ());
      }

      return true;
    }

    return false;
  }

  // FolioString1Item_pskel
  //

  void FolioString1Item_pskel::
  Action (const model::ActionCode::Code&)
  {
  }

  void FolioString1Item_pskel::
  OldValue (const QString&)
  {
  }

  bool FolioString1Item_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::dataadvice::String1_pskel::_attribute_impl (ns, n, v))
      return true;

    if (n == "Action" && ns.empty ())
    {
      if (this->Action_parser_)
      {
        this->Action_parser_->pre ();
        this->Action_parser_->_pre_impl ();
        this->Action_parser_->_characters (v);
        this->Action_parser_->_post_impl ();
        this->Action (this->Action_parser_->post_ActionCode ());
      }

      return true;
    }

    if (n == "OldValue" && ns.empty ())
    {
      if (this->OldValue_parser_)
      {
        this->OldValue_parser_->pre ();
        this->OldValue_parser_->_pre_impl ();
        this->OldValue_parser_->_characters (v);
        this->OldValue_parser_->_post_impl ();
        this->OldValue (this->OldValue_parser_->post_String1 ());
      }

      return true;
    }

    return false;
  }

  // FolioString255Item_pskel
  //

  void FolioString255Item_pskel::
  Action (const model::ActionCode::Code&)
  {
  }

  void FolioString255Item_pskel::
  OldValue (const QString&)
  {
  }

  bool FolioString255Item_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::dataadvice::String255_pskel::_attribute_impl (ns, n, v))
      return true;

    if (n == "Action" && ns.empty ())
    {
      if (this->Action_parser_)
      {
        this->Action_parser_->pre ();
        this->Action_parser_->_pre_impl ();
        this->Action_parser_->_characters (v);
        this->Action_parser_->_post_impl ();
        this->Action (this->Action_parser_->post_ActionCode ());
      }

      return true;
    }

    if (n == "OldValue" && ns.empty ())
    {
      if (this->OldValue_parser_)
      {
        this->OldValue_parser_->pre ();
        this->OldValue_parser_->_pre_impl ();
        this->OldValue_parser_->_characters (v);
        this->OldValue_parser_->_post_impl ();
        this->OldValue (this->OldValue_parser_->post_String255 ());
      }

      return true;
    }

    return false;
  }

  // FolioString1024Item_pskel
  //

  void FolioString1024Item_pskel::
  Action (const model::ActionCode::Code&)
  {
  }

  void FolioString1024Item_pskel::
  OldValue (const QString&)
  {
  }

  bool FolioString1024Item_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::dataadvice::String1024_pskel::_attribute_impl (ns, n, v))
      return true;

    if (n == "Action" && ns.empty ())
    {
      if (this->Action_parser_)
      {
        this->Action_parser_->pre ();
        this->Action_parser_->_pre_impl ();
        this->Action_parser_->_characters (v);
        this->Action_parser_->_post_impl ();
        this->Action (this->Action_parser_->post_ActionCode ());
      }

      return true;
    }

    if (n == "OldValue" && ns.empty ())
    {
      if (this->OldValue_parser_)
      {
        this->OldValue_parser_->pre ();
        this->OldValue_parser_->_pre_impl ();
        this->OldValue_parser_->_characters (v);
        this->OldValue_parser_->_post_impl ();
        this->OldValue (this->OldValue_parser_->post_String1024 ());
      }

      return true;
    }

    return false;
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

