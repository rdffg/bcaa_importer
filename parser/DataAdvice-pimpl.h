// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#ifndef CXX___DATA_ADVICE_PIMPL_H
#define CXX___DATA_ADVICE_PIMPL_H

#include "DataAdvice-pskel.h"

namespace dataadvice
{
  class DataAdviceImpl: public QObject, public virtual DataAdvice_pskel
  {
      Q_OBJECT
    public:
    virtual void
    pre () override;

    virtual void
    RollYear (long long) override;

    virtual void
    OwnershipYear (long long) override;

    virtual void
    RunType (const QString&) override;

    virtual void
    StartDate (const ::xml_schema::date&) override;

    virtual void
    EndDate (const ::xml_schema::date&) override;

    virtual void
    //AssessmentAreas (const std::vector<model::AssessmentArea*>&) override;
    AssessmentAreas () override;

    virtual void
    ReportSummary (std::unique_ptr<model::DeliverySummary>&) override;

    virtual void
    Version (const QString&) override;

    virtual void
    RequestID (const QString&) override;

    virtual void
    OrderID (const QString&) override;

    virtual void
    RunDate (const ::xml_schema::date&) override;

    virtual std::unique_ptr<model::DataAdvice>
    post_DataAdvice () override;
  private:
      long long rollYear;
      long long ownershipYear;
      QString runType;
      QDate startDate;
      QDate endDate;
      QDate runDate;
      QString requestID;
      QString orderID;
      QString version;
      std::unique_ptr<model::DeliverySummary> reportSummary;
      std::vector<model::AssessmentArea*> assessmentAreas;
  signals:
      void message(const QString& message);
  };

  class VersionImpl: public virtual Version_pskel,
    public ::xml_schema::stringImpl
  {
    public:
    virtual void
    pre ();

    virtual QString
    post_Version ();
  };

  class RunTypeImpl: public virtual RunType_pskel,
    public ::xml_schema::stringImpl
  {
    public:
    virtual void
    pre ();

    virtual QString
    post_RunType ();
  };

  class DeliverySummaryImpl: public virtual DeliverySummary_pskel
  {
    public:
    virtual void
    pre () override;

    virtual void
    TotalFolioCount (long long) override;

    virtual void
    TaxableFolioCount (long long) override;

    virtual void
    TaxExemptFolioCount (long long) override;

    virtual void
    TotalGrossValues () override;

    virtual void
    TotalTaxExemptValues () override;

    virtual void
    TotalNetValues () override;

    virtual void
    GeneralValues (std::vector<std::unique_ptr<model::PropertyClassValue>>&) override;

    virtual void
    BCTransitValues (std::vector<std::unique_ptr<model::PropertyClassValue>>&) override;

    virtual void
    SchoolValues (std::vector<std::unique_ptr<model::PropertyClassValue>>&) override;

    virtual void
    AmendmentReasonCounts () override;

    virtual void
    DeleteReasonCounts () override;

    virtual std::unique_ptr<model::DeliverySummary>
    post_DeliverySummary () override;
      private:
      long long totalFolioCount;
      long long taxableFolioCount;
      long long taxExemptFolioCount;
      std::vector<std::unique_ptr<model::PropertyClassValue>> generalValues;
      std::vector<std::unique_ptr<model::PropertyClassValue>> bcTransitValues;
      std::vector<std::unique_ptr<model::PropertyClassValue>> schoolValues;
  };

  class AmendmentReasonCountCollectionImpl: public virtual AmendmentReasonCountCollection_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    AmendmentReasonCount ();

    virtual void
    post_AmendmentReasonCountCollection ();
  };

  class AmendmentReasonCountImpl: public virtual AmendmentReasonCount_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    AmendmentReasonCode (const QString&);

    virtual void
    AmendmentReasonDescription (const QString&);

    virtual void
    FolioCount (long long);

    virtual void
    post_AmendmentReasonCount ();
  };

  class DeleteReasonCountCollectionImpl: public virtual DeleteReasonCountCollection_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    DeleteReasonCount ();

    virtual void
    post_DeleteReasonCountCollection ();
  };

  class DeleteReasonCountImpl: public virtual DeleteReasonCount_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    DeleteReasonCode (const QString&);

    virtual void
    DeleteReasonDescription (const QString&);

    virtual void
    FolioCount (long long);

    virtual void
    post_DeleteReasonCount ();
  };

  class AssessmentAreaCollectionImpl: public virtual AssessmentAreaCollection_pskel
  {
  public:
      virtual void
      pre () override;

      virtual void AssessmentArea() override;

      virtual void post_AssessmentAreaCollection() override;
      virtual ~AssessmentAreaCollectionImpl() override;
  };

  class AssessmentAreaImpl: public virtual AssessmentArea_pskel
  {
    public:
    virtual void
    pre () override;

    virtual void
    AssessmentAreaCode (const QString&) override;

    virtual void
    AssessmentAreaDescription (const QString&) override;

//    virtual void
//    Jurisdictions (std::vector<std::unique_ptr<model::Jurisdiction>>&) override;
      virtual void Jurisdictions() override;

    virtual void
    AreaSummary (std::unique_ptr<model::DeliverySummary>&) override;

    virtual void post_AssessmentArea () override;

    virtual ~AssessmentAreaImpl();

  private:
      QString assessmentAreaDescription;
      QString assessmentAreaCode;
      //std::vector<std::unique_ptr<model::Jurisdiction>> jurisdictions;
      std::shared_ptr<model::AssessmentArea> m_assessmentArea;
  };

  class AssessmentAreaCodeImpl: public virtual AssessmentAreaCode_pskel,
    public ::xml_schema::stringImpl
  {
    public:
    virtual void
    pre () override;

    virtual QString
    post_AssessmentAreaCode () override;
  };

  class JurisdictionCollectionImpl: public virtual JurisdictionCollection_pskel
  {
    public:
    virtual void
    pre () override;

//    virtual void
//    Jurisdiction (std::unique_ptr<model::Jurisdiction>&);

//    virtual std::vector<std::unique_ptr<model::Jurisdiction>>
//    post_JurisdictionCollection ();
    virtual void Jurisdiction() override;

    virtual void post_JurisdictionCollection() override;

    virtual ~JurisdictionCollectionImpl();

    Jurisdiction_pskel* Jurisdiction_parser() const;

    friend class AssessmentAreaImpl;

  private:
      std::vector<std::unique_ptr<model::Jurisdiction>> jurisdictions;
  };

  class JurisdictionImpl: public virtual Jurisdiction_pskel
  {
    public:
    virtual void
    pre () override;

    virtual void
    JurisdictionCode (const QString&) override;

    virtual void
    JurisdictionDescription (const QString&) override;

    virtual void
    FolioRecords (std::vector<std::unique_ptr<model::Folio>>&) override;

    virtual void
    JurisdictionSummary (std::unique_ptr<model::DeliverySummary>&) override;

//    virtual std::unique_ptr<model::Jurisdiction>
//    post_Jurisdiction () override;

      virtual void post_Jurisdiction() override;

    void currentAssessmentArea(model::AssessmentArea&);

    void setAssessmentArea(std::weak_ptr<model::AssessmentArea>& area);

    ~JurisdictionImpl();
  private:
    std::weak_ptr<model::AssessmentArea> m_area;
    std::vector<std::unique_ptr<model::Folio>> folios;
    std::shared_ptr<model::Jurisdiction> jurisdiction;

  };

  class JurisdictionCodeImpl: public virtual JurisdictionCode_pskel,
    public ::xml_schema::stringImpl
  {
    public:
    virtual void
    pre ();

    virtual QString
    post_JurisdictionCode ();
  };

  class FolioGroupValuesImpl: public virtual FolioGroupValues_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    LandValue (double);

    virtual void
    ImprovementValue (double);

    virtual void
    post_FolioGroupValues ();
  };

  class FolioRecordCollectionImpl: public virtual FolioRecordCollection_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    FolioRecord (std::unique_ptr<model::Folio>&);

    virtual std::vector<std::unique_ptr<model::Folio>>
    post_FolioRecordCollection ();

      ~FolioRecordCollectionImpl();

    FolioRecord_pskel* folioRecord_parser() const;

  private:
      std::vector<std::unique_ptr<model::Folio>> folios;
  };

  class FolioRecordImpl: public QObject, public virtual FolioRecord_pskel
  {
    Q_OBJECT
    public:

      FolioRecordImpl(std::ifstream& is, long long size);
    virtual void
    pre () override;

    virtual void
    RollNumber (const model::StringItem&) override;

    virtual void
    FolioStatus (const model::StringItem&) override;

    virtual void
    FolioStatusDescription (const model::StringItem&) override;

    virtual void
    FolioAction (std::unique_ptr<model::FolioAction>&) override;

    virtual void
    FolioAddresses (std::vector<std::unique_ptr<model::FolioAddress>>&) override;

    virtual void
    OwnershipGroups (std::vector<std::unique_ptr<model::OwnershipGroup>>&) override;

    virtual void
    LegalDescriptions (std::vector<std::unique_ptr<model::LegalDescription>>&) override;

    virtual void
    FolioDescription (std::unique_ptr<model::FolioDescription>&) override;

    virtual void
    Sales (std::vector<std::unique_ptr<model::Sale>>&) override;

    virtual void
    Values (std::unique_ptr<model::PropertyValues>& values) override;

    virtual void
    Amendments () override;

    virtual void
    MinorTaxing (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&) override;

    virtual void
    Farms (std::vector<std::unique_ptr<model::Farm>>&) override;

    virtual void
    ManufacturedHomes (std::vector<std::unique_ptr<model::ManufacturedHome>>&) override;

    virtual void
    ManagedForests (std::vector<std::unique_ptr<model::ManagedForest>>&) override;

    virtual void
    OilAndGas (std::vector<std::unique_ptr<model::OilAndGas>>&) override;

    virtual void
    LandCharacteristics (std::vector<std::unique_ptr<model::LandCharacteristic>>&) override;

    virtual void
    ID (const QString&) override;

    virtual std::unique_ptr<model::Folio>
    post_FolioRecord () override;

    void setJurisdiction(std::weak_ptr<model::Jurisdiction> jurisdiction);

    void setCancelFlag(bool& shouldCancel);

    virtual ~FolioRecordImpl();
  signals:
      void folioSaved(float progress);
      void message(const QString& message);

  private:
      std::unique_ptr<model::FolioAction> m_action;
      std::unique_ptr<model::Folio> m_folio;
      std::vector<std::unique_ptr<model::FolioAddress>> m_folioAddresses;
      std::vector<std::unique_ptr<model::OwnershipGroup>> m_ownershipGroups;
      std::vector<std::unique_ptr<model::LegalDescription>> m_legalDescriptions;
      std::unique_ptr<model::FolioDescription> m_folioDescription;
      std::vector<std::unique_ptr<model::Sale>> m_sales;
      std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>> m_minorTaxingJurisdictions;
      std::vector<std::unique_ptr<model::Farm>> m_farms;
      std::vector<std::unique_ptr<model::ManufacturedHome>> m_manufacturedHomes;
      std::vector<std::unique_ptr<model::ManagedForest>> m_managedForests;
      std::vector<std::unique_ptr<model::OilAndGas>> m_oilAndGas;
      std::vector<std::unique_ptr<model::LandCharacteristic>> m_landCharacteristics;
      std::weak_ptr<model::Jurisdiction> m_jurisdiction;
      std::unique_ptr<model::PropertyValues> m_propertyValues;
      bool* m_shouldCancel;
      std::ifstream& m_inputStream;
      long long m_inputSize;
  };

  class String32Impl: public virtual String32_pskel,
    public ::xml_schema::stringImpl
  {
    public:
    virtual void
    pre ();

    virtual QString
    post_String32 ();
  };

  class FolioRollNumberImpl: public virtual FolioRollNumber_pskel,
    public ::dataadvice::String32Impl
  {
    public:
    virtual void
    pre () override;

    virtual void
    Action (const model::ActionCode::Code&) override;

    virtual void
    OldValue (const QString&) override;

    virtual model::StringItem
    post_FolioRollNumber () override;
  private:
      model::ActionCode::Code m_action;
      QString m_oldValue;
  };

  class FolioActionImpl: public virtual FolioAction_pskel
  {
    public:
    virtual void
    pre () override;

    virtual void
    FolioAdd (model::FolioAction&) override;

    virtual void
    FolioDelete (model::FolioAction&) override;

    std::unique_ptr<model::FolioAction>
    post_FolioAction () override;
  private:
    std::unique_ptr<model::FolioAction> m_action;
  };

  class FolioAddImpl: public virtual FolioAdd_pskel
  {
    public:
    virtual void
    pre () override;

    virtual void
    FolioRenumber (const model::FolioRenumber&) override;

    virtual model::FolioAction post_FolioAdd() override;
  private:
      std::unique_ptr<model::FolioRenumber> m_renumber;
  };

  class FolioDeleteImpl: public virtual FolioDelete_pskel
  {
    public:
    virtual void
    pre () override;

    virtual void
    FolioRenumber (const model::FolioRenumber&) override;

    virtual void
    DeleteReasonCode (const QString&) override;

    virtual void
    DeleteReasonDescription (const QString&) override;

    virtual model::FolioAction
    post_FolioDelete () override;
  private:
      std::unique_ptr<model::FolioRenumber> m_renumber;
      QString m_deleteReason;
      QString m_reasonDescr;
  };

  class FolioRenumberImpl: public virtual FolioRenumber_pskel
  {
    public:
    virtual void
    pre () override;

    virtual void
    AssessmentAreaCode (const QString&) override;

    virtual void
    AssessmentAreaDescription (const QString&) override;

    virtual void
    JurisdictionCode (const QString&) override;

    virtual void
    JurisdictionDescription (const QString&) override;

    virtual void
    RollNumber (const QString&) override;

    virtual model::FolioRenumber
    post_FolioRenumber () override;
  private:
      model::FolioRenumber m_renumber;
  };

  class FolioItemGroupImpl: public virtual FolioItemGroup_pskel
  {
    public:
    virtual void
    pre () override;

    virtual void
    Action (const model::ActionCode::Code&) override;

    virtual model::ActionCode::Code
    post_FolioItemGroup () override;
  private:
      model::ActionCode::Code action;
  };

  class FolioAddressCollectionImpl: public virtual FolioAddressCollection_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    FolioAddress (std::unique_ptr<model::FolioAddress>&) override;

    virtual std::vector<std::unique_ptr<model::FolioAddress> >
    post_FolioAddressCollection () override;
  private:
     std::vector<std::unique_ptr<model::FolioAddress> > addresses;
  };

  class FolioAddressImpl: public virtual FolioAddress_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    PrimaryFlag (const model::BooleanItem&) override;

    virtual void
    UnitNumber (const model::StringItem&) override;

    virtual void
    StreetNumber (const model::StringItem&) override;

    virtual void
    StreetDirectionPrefix (const model::StringItem&) override;

    virtual void
    StreetName (const model::StringItem&) override;

    virtual void
    StreetType (const model::StringItem &) override;

    virtual void
    StreetDirectionSuffix (const model::StringItem&) override;

    virtual void
    City (const model::StringItem&) override;

    virtual void
    ProvinceState (const model::StringItem&) override;

    virtual void
    PostalZip (const model::StringItem&) override;

    virtual void
    MapReferenceNumber (const model::StringItem&) override;

    virtual void
    ID (const QString&) override;

    virtual std::unique_ptr<model::FolioAddress>
    post_FolioAddress () override;
  private:
      std::unique_ptr<model::FolioAddress> m_address;
  };

  class OwnershipGroupCollectionImpl: public virtual OwnershipGroupCollection_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    OwnershipGroup (std::unique_ptr<model::OwnershipGroup>&) override;

    virtual std::vector<std::unique_ptr<model::OwnershipGroup>>
    post_OwnershipGroupCollection () override;
  private:
      std::vector<std::unique_ptr<model::OwnershipGroup>> m_owners;
  };

  class OwnershipGroupImpl: public virtual OwnershipGroup_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    OwnershipGroupID (const model::StringItem&) override;

    virtual void
    AssessmentNoticeReturned (const model::BooleanItem&) override;

    virtual void
    AssessmentNoticeSuppressed (const model::BooleanItem&) override;

    virtual void
    ChangeType (const model::StringItem&) override;

    virtual void
    ChangeTypeDescription (const model::StringItem&) override;

    virtual void
    ChangeDate (const model::DateItem&) override;

    virtual void
    ChangeSource (const model::StringItem&) override;

    virtual void
    ChangeSourceDescription (const model::StringItem&) override;

    virtual void
    Owners (std::vector<std::unique_ptr<model::Owner>>&) override;

    virtual void
    FormattedMailingAddress (std::unique_ptr<model::FormattedMailingAddress>&) override;

    virtual void
    MailingAddress (std::unique_ptr<model::MailingAddress>&) override;

    virtual std::unique_ptr<model::OwnershipGroup>
    post_OwnershipGroup () override;
  private:
      std::unique_ptr<model::OwnershipGroup> m_owners;
  };

  class OwnerCollectionImpl: public virtual OwnerCollection_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    Owner (std::unique_ptr<model::Owner>&) override;

    virtual std::vector<std::unique_ptr<model::Owner>>
    post_OwnerCollection () override;
  private:
      std::vector<std::unique_ptr<model::Owner>> m_owners;
  };

  class OwnerImpl: public virtual Owner_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    FirstName (const model::StringItem&) override;

    virtual void
    MiddleName (const model::StringItem&) override;

    virtual void
    MiddleInitial (const model::StringItem&) override;

    virtual void
    CompanyOrLastName (const model::StringItem&) override;

    virtual void
    OwnerSequenceID (const model::StringItem&) override;

    virtual void
    EquityType (const model::StringItem&) override;

    virtual void
    EquityTypeDescription (const model::StringItem&) override;

    virtual void
    ID (const QString&) override;

    virtual std::unique_ptr<model::Owner>
    post_Owner () override;
  private:
      std::unique_ptr<model::Owner> m_owner;
  };

  class MailingAddressImpl: public virtual MailingAddress_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    Attention (const model::StringItem&) override;

    virtual void
    CareOf (const model::StringItem &item) override;

    virtual void
    Floor (const model::StringItem &) override;

    virtual void
    UnitNumber (const model::StringItem &) override;

    virtual void
    StreetDirectionPrefix (const model::StringItem &) override;

    virtual void
    StreetNumber (const model::StringItem &) override;

    virtual void
    StreetName (const model::StringItem &) override;

    virtual void
    StreetType (const model::StringItem &) override;

    virtual void
    StreetDirectionSuffix (const model::StringItem &) override;

    virtual void
    City (const model::StringItem &) override;

    virtual void
    ProvinceState (const model::StringItem &) override;

    virtual void
    Country (const model::StringItem &) override;

    virtual void
    PostalZip (const model::StringItem &) override;

    virtual void
    FreeformAddress (const model::StringItem &) override;

    virtual void
    Compartment (const model::StringItem &) override;

    virtual void
    DeliveryInstallationType (const model::StringItem &) override;

    virtual void
    DeliveryInstallationTypeValue (const model::StringItem &) override;

    virtual void
    ModeOfDelivery (const model::StringItem &) override;

    virtual void
    ModeOfDeliveryValue (const model::StringItem &) override;

    virtual void
    Site (const model::StringItem &) override;

    virtual void
    BulkMailCode (const model::StringItem &) override;

    virtual void
    ID (const QString&) override;

    virtual std::unique_ptr<model::MailingAddress>
    post_MailingAddress () override;
  private:
      std::unique_ptr<model::MailingAddress> m_addr;
  };

  class FormattedMailingAddressImpl: public virtual FormattedMailingAddress_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    Line1 (const model::StringItem&) override;

    virtual void
    Line2 (const model::StringItem&) override;

    virtual void
    Line3 (const model::StringItem&) override;

    virtual void
    Line4 (const model::StringItem&) override;

    virtual void
    Line5 (const model::StringItem&) override;

    virtual void
    Line6 (const model::StringItem&) override;

    virtual void
    ID (const QString&);

    virtual std::unique_ptr<model::FormattedMailingAddress>
    post_FormattedMailingAddress ();
  private:
      std::unique_ptr<model::FormattedMailingAddress> m_addr;
  };

  class String40Impl: public virtual String40_pskel,
    public ::xml_schema::stringImpl
  {
    public:
    virtual void
    pre ();

    virtual QString
    post_String40 ();
  };

  class FormattedMailingAddressLineImpl: public virtual FormattedMailingAddressLine_pskel,
    public ::dataadvice::String40Impl
  {
    public:
    virtual void
    pre () override;

    virtual void
    Action (const model::ActionCode::Code&) override;

    virtual void
    OldValue (const QString&) override;

    virtual model::StringItem
    post_FormattedMailingAddressLine () override;
  private:
      model::ActionCode::Code m_action;
      QString m_oldValue;
  };

  class LegalDescriptionCollectionImpl: public virtual LegalDescriptionCollection_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    LegalDescription (std::unique_ptr<model::LegalDescription>&) override;

    virtual std::vector<std::unique_ptr<model::LegalDescription>>
    post_LegalDescriptionCollection () override;
  private:
      std::vector<std::unique_ptr<model::LegalDescription>> m_descr;
  };

  class LegalDescriptionImpl: public virtual LegalDescription_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    FormattedLegalDescription (const model::StringItem &item) override;

    virtual void
    PID (const model::StringItem &item) override;

    virtual void
    Lot (const model::StringItem &item) override;

    virtual void
    StrataLot (const model::StringItem &item) override;

    virtual void
    Parcel (const model::StringItem &item) override;

    virtual void
    Block (const model::StringItem &item) override;

    virtual void
    SubBlock (const model::StringItem &item) override;

    virtual void
    Plan (const model::StringItem &item) override;

    virtual void
    SubLot (const model::StringItem &item) override;

    virtual void
    Part1 (const model::StringItem &item) override;

    virtual void
    Part2 (const model::StringItem &item) override;

    virtual void
    Part3 (const model::StringItem &item) override;

    virtual void
    Part4 (const model::StringItem &item) override;

    virtual void
    DistrictLot (const model::StringItem &item) override;

    virtual void
    LegalSubdivision (const model::StringItem &item) override;

    virtual void
    Section (const model::StringItem &item) override;

    virtual void
    Township (const model::StringItem &item) override;

    virtual void
    Range (const model::StringItem &item) override;

    virtual void
    Meridian (const model::StringItem &item) override;

    virtual void
    MeridianShort (const model::StringItem &item) override;

    virtual void
    BCAGroup (const model::StringItem &item) override;

    virtual void
    LandDistrict (const model::StringItem &item) override;

    virtual void
    LandDistrictDescription (const model::StringItem &item) override;

    virtual void
    Portion (const model::StringItem &item) override;

    virtual void
    ExceptPlan (const model::StringItem &item) override;

    virtual void
    FirstNationReserveNumber (const model::StringItem &item) override;

    virtual void
    FirstNationReserveDescription (const model::StringItem &item) override;

    virtual void
    LeaseLicenceNumber (const model::StringItem &item) override;

    virtual void
    LandBranchFileNumber (const model::StringItem &item) override;

    virtual void
    AirSpaceParcelNumber (const model::StringItem &item) override;

    virtual void
    NtsLocation (const model::StringItem &item) override;

    virtual void
    LegalText (const model::StringItem &item) override;

    virtual void
    ID (const QString&) override;

    virtual std::unique_ptr<model::LegalDescription>
    post_LegalDescription () override;
  private:
      std::unique_ptr<model::LegalDescription> m_descr;
  } ;

  class LandCharacteristicImpl: public virtual LandCharacteristic_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    LandCharacteristicCode (const model::StringItem&) override;

    virtual void
    LandCharacteristicDescription (const model::StringItem&) override;

    virtual std::unique_ptr<model::LandCharacteristic>
    post_LandCharacteristic () override;
  private:
      std::unique_ptr<model::LandCharacteristic> m_characteristic;
  };

  class LandCharacteristicCollectionImpl: public virtual LandCharacteristicCollection_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    LandCharacteristic (std::unique_ptr<model::LandCharacteristic>&) override;

    virtual std::vector<std::unique_ptr<model::LandCharacteristic>>
    post_LandCharacteristicCollection () override;
  private:
      std::vector<std::unique_ptr<model::LandCharacteristic>> m_landcharacteristics;
  };

  class ManufacturedHomeCollectionImpl: public virtual ManufacturedHomeCollection_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    ManufacturedHome (std::unique_ptr<model::ManufacturedHome> &home) override;

    virtual std::vector<std::unique_ptr<model::ManufacturedHome>>
    post_ManufacturedHomeCollection () override;
  private:
      std::vector<std::unique_ptr<model::ManufacturedHome>> m_homes;
  };

  class ManufacturedHomeImpl: public virtual ManufacturedHome_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    MHRegistryNumber (const model::StringItem &item) override;

    virtual void
    MHBayNumber (const model::StringItem &item) override;

    virtual void
    MHPark (const model::StringItem &item) override;

    virtual void
    MHParkRollNumber (const model::StringItem &item) override;

    virtual void
    ID (const QString&) override;

    virtual std::unique_ptr<model::ManufacturedHome>
    post_ManufacturedHome () override;
  private:
      std::unique_ptr<model::ManufacturedHome> m_home;
  };

  class FarmCollectionImpl: public virtual FarmCollection_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    Farm (std::unique_ptr<model::Farm>&) override;

    virtual std::vector<std::unique_ptr<model::Farm>>
    post_FarmCollection () override;
  private:
      std::vector<std::unique_ptr<model::Farm>> farms;
  };

  class FarmImpl: public virtual Farm_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    FarmNumber (const model::StringItem&) override;

    virtual void
    ID (const QString&) override;

    virtual std::unique_ptr<model::Farm>
    post_Farm () override;
  private:
      std::unique_ptr<model::Farm> m_farm;
  };

  class OilAndGasCollectionImpl: public virtual OilAndGasCollection_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    OilAndGas (std::unique_ptr<model::OilAndGas>&) override;

    virtual std::vector<std::unique_ptr<model::OilAndGas>>
    post_OilAndGasCollection () override;
  private:
      std::vector<std::unique_ptr<model::OilAndGas>> m_oil;
  };

  class OilAndGasImpl: public virtual OilAndGas_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    PipelineProjectNumber (const model::StringItem&) override;

    virtual void
    ID (const QString&) override;

    virtual std::unique_ptr<model::OilAndGas>
    post_OilAndGas () override;
  private:
      std::unique_ptr<model::OilAndGas> m_oil;
  };

  class ManagedForestCollectionImpl: public virtual ManagedForestCollection_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    ManagedForest (std::unique_ptr<model::ManagedForest>&) override;

    virtual std::vector<std::unique_ptr<model::ManagedForest>>
    post_ManagedForestCollection () override;
  private:
      std::vector<std::unique_ptr<model::ManagedForest>> m_forest;
  };

  class ManagedForestImpl: public virtual ManagedForest_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    ManagedForestNumber (const model::StringItem&) override;

    virtual void
    ID (const QString&) override;

    virtual std::unique_ptr<model::ManagedForest>
    post_ManagedForest () override;
  private:
      std::unique_ptr<model::ManagedForest> m_forest;
  };

  class FolioAmendmentCollectionImpl: public virtual FolioAmendmentCollection_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre ();

    virtual void
    Amendment ();

    virtual void
    post_FolioAmendmentCollection ();
  };

  class FolioAmendmentImpl: public virtual FolioAmendment_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre ();

    virtual void
    AmendmentType ();

    virtual void
    AmendmentTypeDescription ();

    virtual void
    AmendmentReasonCode ();

    virtual void
    AmendmentReasonDescription ();

    virtual void
    SuppOccupancyDate ();

    virtual void
    SuppOccupancyCode ();

    virtual void
    ID (const QString&);

    virtual void
    post_FolioAmendment ();
  };

  class SaleCollectionImpl: public virtual SaleCollection_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    Sale (std::unique_ptr<model::Sale>&) override;

    virtual std::vector<std::unique_ptr<model::Sale>>
    post_SaleCollection () override;
  private:
      std::vector<std::unique_ptr<model::Sale>> sales;
  };

  class SaleImpl: public virtual Sale_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    DocumentNumber (const model::StringItem&) override;

    virtual void
    ConveyanceDate (const model::DateItem&) override;

    virtual void
    ConveyancePrice (const model::DecimalItem&) override;

    virtual void
    ConveyanceType (const model::StringItem&) override;

    virtual void
    ConveyanceTypeDescription (const model::StringItem&) override;

    virtual void
    RejectReasonCode (const model::StringItem&) override;

    virtual void
    RejectReasonDescription (const model::StringItem&) override;

    virtual void
    ID (const QString&) override;

    virtual std::unique_ptr<model::Sale>
    post_Sale () override;
  private:
      std::unique_ptr<model::Sale> m_sale;
  };

  class FolioDescriptionImpl: public virtual FolioDescription_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    Neighbourhood (std::unique_ptr<model::Neighbourhood>&) override;

    virtual void
    ActualUseCode (const model::StringItem&) override;

    virtual void
    ActualUseDescription (const model::StringItem&) override;

    virtual void
    VacantFlag (const model::BooleanItem&) override;

    virtual void
    BCTransitFlag (bool) override;

    virtual void
    PoliceTaxFlag (bool) override;

    virtual void
    ALRCode (const model::StringItem&) override;

    virtual void
    ALRDescription (const model::StringItem&) override;

    virtual void
    TenureCode (const model::StringItem&) override;

    virtual void
    TenureDescription (const model::StringItem&) override;

    virtual void
    ParkingArea (const model::StringItem&) override;

    virtual void
    LandMeasurement (std::unique_ptr<model::LandMeasurement>&) override;

    virtual void
    SchoolDistrict (std::unique_ptr<model::SpecialDistrict>&) override;

    virtual void
    RegionalDistrict (std::unique_ptr<model::SpecialDistrict>&) override;

    virtual void
    RegionalHospitalDistrict (std::unique_ptr<model::SpecialDistrict>&) override;

    virtual void
    PredominantManualClass (std::unique_ptr<model::ManualClass>&) override;

    virtual void AddSchoolTax3Mto4MFlag (bool) override;

    virtual void AddSchoolTaxGreater4MFlag (bool) override;

    virtual void CandidateforSpecTaxFlag (bool) override;


    virtual std::unique_ptr<model::FolioDescription>
    post_FolioDescription () override;
    private:
        std::unique_ptr<model::FolioDescription> m_descr;
  };

  class LandMeasurementImpl: public virtual LandMeasurement_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    LandDimensionType (const model::StringItem&) override;

    virtual void
    LandDimensionTypeDescription (const model::StringItem&) override;

    virtual void
    LandDimension (const model::StringItem&) override;

    virtual void
    LandWidth (const model::StringItem&) override;

    virtual void
    LandDepth (const model::StringItem&) override;

    virtual std::unique_ptr<model::LandMeasurement>
    post_LandMeasurement () override;
    private:
        std::unique_ptr<model::LandMeasurement> m_measurement;
  };

  class NeighbourhoodImpl: public virtual Neighbourhood_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    NeighbourhoodCode (const model::StringItem&) override;

    virtual void
    NeighbourhoodDescription (const model::StringItem&) override;

    virtual std::unique_ptr<model::Neighbourhood>
    post_Neighbourhood () override;
    private:
    std::unique_ptr<model::Neighbourhood> m_neighbourhood;
  };

  class SpecialDistrictImpl: public virtual SpecialDistrict_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    DistrictCode (const model::StringItem&) override;

    virtual void
    DistrictDescription (const model::StringItem&) override;

    virtual std::unique_ptr<model::SpecialDistrict>
    post_SpecialDistrict ();
  private:
      std::unique_ptr<model::SpecialDistrict> m_district;
  };

  class ManualClassImpl: public virtual ManualClass_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    ManualClassCode (const model::StringItem&) override;

    virtual void
    ManualClassDescription (const model::StringItem&) override;

    virtual void
    PercentDeviation (const model::DecimalItem&) override;

    virtual std::unique_ptr<model::ManualClass>
    post_ManualClass () override;
  private:
      std::unique_ptr<model::ManualClass> m_class;
  };

  class MinorTaxingImpl: public virtual MinorTaxing_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    ElectoralAreas (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&) override;

    virtual void
    ServiceAreas (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&) override;

    virtual void
    Defined (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&) override;

    virtual void
    SpecifiedRegional (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&) override;

    virtual void
    SpecifiedMunicipal (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&) override;

    virtual void
    LocalAreas (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&) override;

    virtual void
    GeneralServices (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&) override;

    virtual void
    ImprovementDistricts (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&) override;

    virtual void
    IslandsTrusts (std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>&) override;

    virtual std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>
    post_MinorTaxing () override;
  private:
      std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>> m_taxings;
  };

  class MinorTaxingJurisdictionCollectionImpl: public virtual MinorTaxingJurisdictionCollection_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    MinorTaxingJurisdiction (std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>&) override;

    virtual std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>>
    post_MinorTaxingJurisdictionCollection () override;
  private:
      std::vector<std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>> m_jurisdictions;
  };

  class MinorTaxingJurisdictionImpl: public virtual MinorTaxingJurisdiction_pskel,
    public ::dataadvice::FolioItemGroupImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    MinorTaxingCode (const model::StringItem&) override;

    virtual void
    MinorTaxingCodeShort (const model::StringItem&) override;

    virtual void
    MinorTaxingDescription (const model::StringItem&) override;

    virtual void
    ID (const QString&);

    virtual std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction>
    post_MinorTaxingJurisdiction () override;
  private:
      std::unique_ptr<model::minortaxing::MinorTaxingJurisdiction> m_jurisdiction;
  };

  class PropertyValuesImpl: public virtual PropertyValues_pskel
  {
    public:
    virtual void
    pre () override;

    virtual void
    GeneralValues (std::vector<std::unique_ptr<model::PropertyClassValue>>&) override;

    virtual void
    BCTransitValues (std::vector<std::unique_ptr<model::PropertyClassValue>>&) override;

    virtual void
    SchoolValues (std::vector<std::unique_ptr<model::PropertyClassValue>>&) override;

    virtual void
    Valuation (std::vector<std::unique_ptr<model::ValuesByETC>>&) override;

    virtual std::unique_ptr<model::PropertyValues>
    post_PropertyValues () override;
  private:
      std::unique_ptr<model::PropertyValues> m_values;
  };

  class ValuationCollectionImpl: public virtual ValuationCollection_pskel
  {
    public:
    virtual void
    pre () override;

    virtual void
    ValuesByETC (std::unique_ptr<model::ValuesByETC>&) override;

    virtual std::vector<std::unique_ptr<model::ValuesByETC>>
    post_ValuationCollection () override;
  private:
      std::vector<std::unique_ptr<model::ValuesByETC>> valuations;
  };

  class ValuesByETCImpl: public virtual ValuesByETC_pskel
  {
    public:
    virtual void
    pre () override;

    virtual void
    TaxExemptCode (const QString&) override;

    virtual void
    TaxExemptDescription (const QString&) override;

    virtual void
    PropertyClassCode (const QString&) override;

    virtual void
    PropertyClassDescription (const QString&) override;

    virtual void
    LandValue (double) override;

    virtual void
    ImprovementValue (double) override;

    virtual std::unique_ptr<model::ValuesByETC>
    post_ValuesByETC () override;
  private:
      std::unique_ptr<model::ValuesByETC> m_values;
  };

  class PropertyClassValuesCollectionImpl: public virtual PropertyClassValuesCollection_pskel
  {
    public:
    virtual void
    pre () override;

    virtual void
    PropertyClassValues (std::unique_ptr<model::PropertyClassValue> &) override;

    virtual std::vector<std::unique_ptr<model::PropertyClassValue>>
    post_PropertyClassValuesCollection () override;
  private:
      std::vector<std::unique_ptr<model::PropertyClassValue>> propertyClassValues;
  };

  class PropertyClassValuesImpl: public virtual PropertyClassValues_pskel
  {
    public:
    virtual void
    pre () override;

    virtual void
    PropertyClassCode (const QString&) override;

    virtual void
    PropertyClassDescription (const QString&) override;

    virtual void
    PropertySubClassCode (const QString&) override;

    virtual void
    PropertySubClassDescription (const QString&) override;

    virtual void
    GrossValues (std::unique_ptr<model::Valuation>&) override;

    virtual void
    TaxExemptValues (std::unique_ptr<model::Valuation>&) override;

    virtual void
    NetValues (std::unique_ptr<model::Valuation>&) override;

    virtual std::unique_ptr<model::PropertyClassValue>
    post_PropertyClassValues () override;
  private:
      std::unique_ptr<model::PropertyClassValue> m_value;
  };

  class PropertyClassCodeImpl: public virtual PropertyClassCode_pskel,
    public ::xml_schema::stringImpl
  {
    public:
    virtual void
    pre () override;

    virtual QString
    post_PropertyClassCode () override;
  };

  class PropertySubClassCodeImpl: public virtual PropertySubClassCode_pskel,
    public ::xml_schema::stringImpl
  {
    public:
    virtual void
    pre ();

    virtual QString
    post_PropertySubClassCode ();
  };

  class ValuationImpl: public virtual Valuation_pskel
  {
    public:
    virtual void
    pre () override;

    virtual void
    LandValue (double) override;

    virtual void
    ImprovementValue (double) override;

    virtual std::unique_ptr<model::Valuation>
    post_Valuation () override;
  private:
      double landValue;
      double improvementValue;
  };

  class FolioIntegerItemImpl: public virtual FolioIntegerItem_pskel,
    public ::xml_schema::integerImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    Action (const model::ActionCode::Code &) override;

    virtual void
    OldValue (long long) override;

    virtual model::IntegerItem
    post_FolioIntegerItem () override;
  private:
      long long oldValue;
      model::ActionCode::Code action;
  };

  class FolioBooleanItemImpl: public virtual FolioBooleanItem_pskel,
    public ::xml_schema::booleanImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    Action (const model::ActionCode::Code& code) override;

    virtual void
    OldValue (bool) override;

    virtual model::BooleanItem
    post_FolioBooleanItem () override;
  private:
      bool oldValue;
      model::ActionCode::Code action;
  };

  class FolioDecimalItemImpl: public virtual FolioDecimalItem_pskel,
    public ::xml_schema::decimalImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    Action (const model::ActionCode::Code&) override;

    virtual void
    OldValue (double) override;

    virtual model::DecimalItem
    post_FolioDecimalItem () override;
  private:
      double oldValue;
      model::ActionCode::Code action;
  };

  class FolioDateItemImpl: public virtual FolioDateItem_pskel,
    public ::xml_schema::dateImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    Action (const model::ActionCode::Code&) override;

    virtual void
    OldValue (const ::xml_schema::date&) override;

    virtual model::DateItem
    post_FolioDateItem () override;
  private:
      model::ActionCode::Code action;
      QDate oldValue;
  };

  class UniqueIDImpl: public virtual UniqueID_pskel,
    public ::xml_schema::stringImpl
  {
    public:
    virtual void
    pre ();

    virtual QString
    post_UniqueID ();
  };

  class FolioUniqueIDItemImpl: public virtual FolioUniqueIDItem_pskel,
    public ::dataadvice::UniqueIDImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    Action (const model::ActionCode::Code&) override;

    virtual void
    OldValue (const QString&);

    virtual model::StringItem
    post_FolioUniqueIDItem ();
  private:
      QString oldValue;
      model::ActionCode::Code action;
  };

  class LookupCodeImpl: public virtual LookupCode_pskel,
    public ::xml_schema::stringImpl
  {
    public:
    virtual void
    pre ();

    virtual QString
    post_LookupCode ();
  };

  class FolioLookupCodeItemImpl: public virtual FolioLookupCodeItem_pskel,
    public ::dataadvice::LookupCodeImpl
  {
    public:
    virtual void
    pre () override;

    virtual void
    Action (const model::ActionCode::Code&) override;

    virtual void
    OldValue (const QString&) override;

    virtual model::StringItem
    post_FolioLookupCodeItem () override;
  private:
      QString oldValue;
      model::ActionCode::Code action;
  };

  class String1Impl: public virtual String1_pskel,
    public ::xml_schema::stringImpl
  {
    public:
    virtual void
    pre ();

    virtual QString
    post_String1 ();
  };

  class FolioString1ItemImpl: public virtual FolioString1Item_pskel,
    public ::dataadvice::String1Impl
  {
    public:
    virtual void
    pre () override;

    virtual void
    Action (const model::ActionCode::Code &) override;

    virtual void
    OldValue (const QString&) override;

    virtual model::StringItem
    post_FolioString1Item () override;
  private:
      model::ActionCode::Code action;
      QString oldValue;
  };

  class String255Impl: public virtual String255_pskel,
    public ::xml_schema::stringImpl
  {
    public:
    virtual void
    pre () override;

    virtual QString
    post_String255 () override;
  };

  class FolioString255ItemImpl: public virtual FolioString255Item_pskel,
    public ::dataadvice::String255Impl
  {
    public:
    virtual void
    pre () override;

    virtual void
    Action (const model::ActionCode::Code&) override;

    virtual void
    OldValue (const QString&) override;

    virtual model::StringItem
    post_FolioString255Item () override;
  private:
      model::ActionCode::Code m_action;
      QString m_oldValue;
  };

  class String1024Impl: public virtual String1024_pskel,
    public ::xml_schema::stringImpl
  {
    public:
    virtual void
    pre () override;

    virtual QString
    post_String1024 () override;
  };

  class FolioString1024ItemImpl: public virtual FolioString1024Item_pskel,
    public ::dataadvice::String1024Impl
  {
    public:
    virtual void
    pre () override;

    virtual void
    Action (const model::ActionCode::Code&) override;

    virtual void
    OldValue (const QString&) override;

    virtual model::StringItem
    post_FolioString1024Item () override;
  private:
      model::ActionCode::Code m_action;
      QString m_oldValue;
  };

  class ActionCodeImpl: public virtual ActionCode_pskel,
    public ::xml_schema::stringImpl
  {
    public:
    virtual void
    pre () override;

    virtual model::ActionCode::Code
    post_ActionCode () override;
  };
}

#endif // CXX___DATA_ADVICE_PIMPL_H
